LessonsData={

"lesson29":{
theory:`<div><h1>Абзацы</h1><p>В курсе «Структура HTML-документа» вы познакомились с тегами, необходимыми для создания простейшей HTML-страницы, и с некоторыми служебными тегами, которые не отображаются в браузере.</p><p>В этом курсе мы будем изучать теги для логической разметки текста. Использовать их можно только внутри тега <code>&lt;body&gt;</code>.</p><p>Начнём с простейшего тега <code>&lt;p&gt;</code>, с помощью которого создаются абзацы. По умолчанию абзацы начинаются с новой строки и имеют вертикальные отступы, которыми можно управлять с помощью стилей.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Абзацы</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <p>Абзац — отрезок письменной речи, состоящий из нескольких предложений.</p>

    Абзац служит для группировки однородных единиц изложения.

    Выделение фразы в особый абзац усиливает падающий на неё смысловой акцент.

    Для выделения абзаца его обычно печатают с красной строки или делают абзацный отступ.

    Вот такие они, абзацы.
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Разметьте с помощью тега p ещё три предложения: «Абзац служит для … единиц изложения.»",
    check:()=>false,
  },
  {message:"«Выделение фразы в … смысловой акцент.»",
  check:null},
  {message:"«Для выделения абзаца … абзацный отступ.»",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson30":{
theory:`<div><h1>Заголовки и подзаголовки</h1><p>Для создания структуры больших текстов обычно используются заголовки. В текстовых редакторах есть возможность выделить часть текста, найти пункт «Заголовок» нужного уровня в меню, и применить его.</p><p>В языке HTML для выделения заголовков предусмотрено целое семейство тегов: от <code>&lt;h1&gt;</code> до <code>&lt;h6&gt;</code>. Тег <code>&lt;h1&gt;</code> обозначает самый важный заголовок (заголовок верхнего уровня), а тег <code>&lt;h6&gt;</code> обозначает подзаголовок самого нижнего уровня.</p><p>На практике редко встречаются тексты, в которых встречаются подзаголовки ниже третьего уровня. Поэтому самыми часто используемыми тегами заголовков являются: <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> и <code>&lt;h3&gt;</code>.</p><p>Стоит отметить, что поисковые системы придают особое значение заголовкам, поэтому необходимо учиться правильно их использовать.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Заголовки и подзаголовки</title>
  </head>
  <body>
    1 Заголовки
    <p>Заголовки являются одним из важнейших инструментов для структурирования текста.</p>

    1.1 Рекомендации по использованию
    <p>Вот некоторые рекомендации по использованию заголовков в HTML-странице.</p>

    1.1.1 Использование h1
    <p>Не рекомендуется, чтобы на одной странице содержалось несколько заголовков верхнего уровня.</p>

    1.1.2 Использование h2-h6
    <p>При использовании подзаголовков не рекомендуется пропускать уровни заголовков, то есть после заголовка h1 должен идти подзаголовок h2 и только потом подзаголовок h3.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Оберните в тег <h1> текст «1 Заголовки»,",
  check:null},
  {message:"в тег <h2> текст «1.1 Рекомендации по использованию»,",
  check:null},
  {message:"в теги <h3> тексты «1.1.1 Использование h1» и «1.1.2 Использование h2-h6».",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson31":{
theory:`<div><h1>Неупорядоченный список</h1><p>Списки часто используются в различных документах. Иногда, чтобы сделать список, пользователь просто нумерует строчки текста. Такой подход не является хорошим, так как в документе отсутствует логическая сущность «список».</p><p>В HTML существует семейство тегов для создания списков: неупорядоченных, упорядоченных и списков определений. В последующих заданиях мы будем тренироваться работать с ними.</p><p>Неупорядоченные (или маркированные) списки создаются с помощью тега <code>&lt;ul&gt;</code>, который может содержать внутри себя теги <code>&lt;li&gt;</code>, обозначающие «элемент списка».</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Неупорядоченный список</title>
  </head>
  <body>
    <h1>Список изученных тегов</h1>
    <ul>
      <li>html</li>
      <li>head</li>
      <li>body</li>
      <!-- добавьте пункты сюда -->
    </ul>
    <p>Неупорядоченный список используется для простого перечисления объектов, когда порядок неважен.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Добавьте в список изученных тегов ещё минимум три пункта.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson32":{
theory:`<div><h1>Упорядоченный список</h1><p>Упорядоченный список создаётся с помощью тега <code>&lt;ol&gt;</code>, который может содержать внутри себя теги <code>&lt;li&gt;</code>.</p><p>Если элементы неупорядоченного списка по умолчанию отмечаются маркерами, то элементы упорядоченного списка — нумеруются.</p><p>Для упорядоченного списка можно задать атрибут <code>start</code>, который изменяет начало нумерации. Например, код:</p><pre><code>&lt;ol start="3"&gt;
  &lt;li&gt;раз&lt;/li&gt;
  &lt;li&gt;два&lt;/li&gt;
&lt;/ol&gt;</code></pre><p>Приведёт к такому результату:</p><ol start="3"><li>раз</li><li>два</li></ol></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Упорядоченный список</title>
  </head>
  <body>
    <h1>Какие бывают заголовки?</h1>
    <p>Теги заголовков и подзаголовков в порядке убывания значимости:</p>
    <ol>
      <li>h1</li>
      <li>h2</li>
      <li>h3</li>
      <!-- добавьте пункты сюда -->
    </ol>
    <p>Упорядоченный список используется для перечисления объектов или действий, когда важен порядок.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Добавьте в список заголовков ещё минимум три пункта,",
  check:null},
  {message:"затем измените начало нумерации списка с помощью атрибута start так, чтобы она начиналась с числа 2 или больше.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson33":{
theory:`<div><h1>Многоуровневый список</h1><p>Создать многоуровневый список достаточно просто.</p><p>Сначала нужно создать список первого уровня, а затем внутрь любого элемента этого списка, между тегами <code>&lt;li&gt;</code> и <code>&lt;/li&gt;</code>, добавить список второго уровня. При этом необходимо аккуратно закрывать все теги.</p><div>
Пример правильного кода:
<pre><code>&lt;ul&gt;
  &lt;li&gt;1
    &lt;ul&gt;
      &lt;li&gt;1.1&lt;/li&gt;
      &lt;li&gt;1.2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;</code></pre></div><div>
Пример кода с ошибкой:
<pre><code>&lt;ul&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;1.1&lt;/li&gt;
    &lt;li&gt;1.2&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;</code></pre></div><p>В примере с ошибкой вложенный список вставлен не внутрь элемента списка, а между элементами, что недопустимо.</p><p>Количество уровней в списках не ограничено. В многоуровневом списке можно использовать как упорядоченные, так и неупорядоченные списки.</p><p>В этом задании мы потренируемся работать с многоуровневыми списками.</p></div>`,
html:`<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Многоуровневый список</title>
</head>
<body>
  <h1>Разделы курса</h1>
  <ol>
    <li>
      Теги заголовков
      <ol>
        <li>h1</li>
        <li>h2</li>
        <!-- добавьте элементы вложенного списка для первой цели сюда -->
      </ol>
    </li>
    <li>
      Теги списков
      <!-- добавьте вложенный список для второй цели сюда -->
    </li>
    <li>Теги форм</li>
  </ol>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Добавьте ещё два пункта во вложенный список «Теги заголовков».",
  check:null},
  {message:"Добавьте в пункт «Теги списков» неупорядоченный вложенный список из двух пунктов.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson34":{
theory:`<div><h1>Ещё более многоуровневый</h1><p>Хорошо. Вы создали двухуровневый список. Теперь задание посложнее.</p><p>В этом задании вам нужно будет создать четырёхуровневый список, наподобие этого:</p><ol><li>
    Разметка
    <ol><li>
        Основы HTML
        <ol><li>
            HTML-теги
            <ol><li>парные</li><li>одиночные</li></ol></li></ol></li><li>
        Основы CSS
        <ol><li>
            Селекторы
            <ol><li>по типу</li><li>по классу</li><li>вложенные</li></ol></li></ol></li><li>Стиль кодирования</li></ol></li><li>Работа с фотошопом</li><li>Построение сеток</li><li>Декоративные элементы</li><li>Введение в JavaScript</li><li>Прогрессивное улучшение</li></ol></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Ещё более многоуровневый</title>
  </head>
  <body>
    <h1>Невероятно многоуровневый список</h1>
    <ol>
      <li>Первый элемент</li>
      <li>Второй элемент</li>
    </ol>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Создайте четырёхуровневый упорядоченный список. Достаточно, чтобы на каждом уровне было по одному пункту.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson35":{
theory:`<div><h1>Ещё более многоуровневый</h1><p>Хорошо. Вы создали двухуровневый список. Теперь задание посложнее.</p><p>В этом задании вам нужно будет создать четырёхуровневый список, наподобие этого:</p><ol><li>
    Разметка
    <ol><li>
        Основы HTML
        <ol><li>
            HTML-теги
            <ol><li>парные</li><li>одиночные</li></ol></li></ol></li><li>
        Основы CSS
        <ol><li>
            Селекторы
            <ol><li>по типу</li><li>по классу</li><li>вложенные</li></ol></li></ol></li><li>Стиль кодирования</li></ol></li><li>Работа с фотошопом</li><li>Построение сеток</li><li>Декоративные элементы</li><li>Введение в JavaScript</li><li>Прогрессивное улучшение</li></ol></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Список определений</title>
  </head>
  <body>
    <h1>Расшифровка тегов списков</h1>
    <dl>
      <dt>dl</dt>
      <dd>Definition List, сам список определений</dd>

      <dt>dt</dt>
      <dd>Definition Term, термин</dd>

      <dt>dd</dt>
      <dd>Definition Definition, определение термина</dd>
    </dl>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"В существующий список определений добавьте: Четвёртый пункт с термином ul и определением Unordered List, неупорядоченный список",
  check:null},
  {message:"Пятый пункт с термином li и определением List Item, элемент списка",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson36":{
theory:`<div><h1>Важность. Теги strong и b</h1><p>Ещё раз отметим, что этот курс посвящён <strong>логической</strong> разметке текста, поэтому уделяется особое внимание смыслу элементов, их предназначению, а не визуальному форматированию.</p><p>В предыдущих заданиях вы познакомились с элементами, которые предназначены для разметки крупных блоков текста: заголовков, абзацев и списков. В этом и последующих заданиях мы познакомимся с элементами, предназначенными для разметки небольших фраз и отдельных слов.</p><p>Первые два тега предназначены, чтобы указать на важность слова или фразы.</p><p>Тег <code>&lt;strong&gt;</code> определяет <strong>важность</strong> отмеченного текста.</p><p>Тег <code>&lt;b&gt;</code> предназначен для выделения текста без придания ему особой важности.</p><p>Визуально оба тега одинаковы, они выделяют текст полужирным.</p><p>Лучше всего отличия этих тегов будут заметны людям, которые используют специальные настройки ОС, в частности, слепым и слабовидящим. Когда они включают функцию чтения текста, то «говорилка» будет интонацией выделять слова с тегом <code>&lt;strong&gt;</code>. То же самое касается и тегов <code>&lt;em&gt;</code> и <code>&lt;i&gt;</code>. Тег <code>&lt;em&gt;</code> «говорилка» будет выделять интонацией.</p><div>Отметим, что новый смысл тегу <code>&lt;b&gt;</code> придали в HTML5. Раньше это был тег, который просто делает текст полужирным. То есть он был предназначен только для визуального форматирования.</div></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Теги strong и b</title>
  </head>
  <body>
    <h1>Что не так с онлайн-курсами и как это исправить: опыт HTML Academy</h1>

    <p>Мы в HTML Academy постоянно работаем над повышением эффективности наших образовательных программ и курсов (ради этого мы ставим опыты на студентах и внедряем геймификацию).</p>

    <p>Подобные изыскания привели нас к пониманию того, что для подготовки профессионала, который мог бы работать в области веб-технологий (хотя бы на позиции начального уровня) недостаточно одних курсов, состоящих из видеолекций и последующих заданий. Освоить весь объём контента, необходимого для выхода на определённый уровень знаний, в подобном режиме просто невозможно.</p>

    <p>Именно поэтому мы решили создать курс, прохождение которого позволяло бы людям не просто получить базовые знания вёрстки, но стать настоящим ИТ-специалистом. В сегодняшнем материале мы расскажем о том, что в итоге из всего этого получилось.</p>

    <p>Прочитать <a href="https://habr.com/company/htmlacademy/blog/252843/" target="_blank" rel="nofollow noopener">статью целиком</a> вы можете на Хабре.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Выделите вводный абзац: заключите внутрь тега <b> весь текст внутри первого абзаца.",
  check:null},
  {message:"Выделите важные детали: заключите внутрь тега <strong> слово «профессионала» во втором абзаце",
  check:null},
  {message:"и фразу «настоящим ИТ-специалистом» в третьем абзаце.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson37":{
theory:`<div><h1>Акцентируем внимание. Теги em и i</h1><p>Следующие два тега предназначены для акцентирования внимания на слово или фразу.</p><p>Тег <code>&lt;em&gt;</code> определяет текст, на который сделан <em>особый акцент</em>, меняющий смысл предложения.</p><p>Например, если мы хотим подчеркнуть, что Кекс не любит <em>питаться</em> укропом (он больше за тунца), а любит только <em>гонять его по полу</em>, то разметим текст так:</p><pre><code>Инструктор Кекс любит &lt;em&gt;играть&lt;/em&gt; с укропом.</code></pre><p>Тег <code>&lt;i&gt;</code> обозначает текст, который отличается от окружающего текста, но не является более важным. Обычно так выделяют <i>названия</i>, <i>термины</i>, <i>иностранные слова</i>.</p><p>Например, если мы хотим указать, что <i>инспектор</i> — это какой-то специальный термин, то разметим текст так:</p><pre><code>Обычно Кекс пользовался &lt;i&gt;инспектором&lt;/i&gt; браузера для поиска ошибок.</code></pre><p>Визуально оба тега одинаковы, они выделяют текст курсивом.</p><div>Новый смысл тегу <code>&lt;i&gt;</code> придали в HTML5. Раньше это был просто тег для выделения текста курсивом.</div></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Теги em и i</title>
  </head>
  <body>
    <h1>Проблема: что не так с онлайн-курсами</h1>

    <p>Ученикам, которые хотели бы не просто разобраться с той или иной технологией, а ищут возможность получить новую профессию или стать более востребованным специалистом, нужно предоставить возможность каким-то образом подтвердить уровень своих знаний — без работы с наставниками и выполнения выпускных проектов с последующим получением сертификата этого не сделать.</p>

    <p>Все вышеперечисленное прекрасно существует в режиме офлайн, но можно ли перенести обучение такого формата в интернет?</p>

    <p>Прочитать <a href="https://habr.com/company/htmlacademy/blog/252843/" target="_blank" rel="nofollow noopener">статью целиком</a> вы можете на Хабре.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Расставьте акценты: заключите внутрь тега em слово «профессию» в первом абзаце",
  check:null},
  {message:"и слово «специалистом» в том же абзаце.",
  check:null},
  {message:"Выделите с помощью тега i термин «офлайн» во втором абзаце.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson38":{
theory:`<div><h1>Переносы и разделители. Теги br и hr</h1><p>Иногда возникает необходимость вставить в текст перенос строки, не создавая при этом абзац. Например, при разметке стихов или текстов песен.</p><p>Для этого в HTML предусмотрен одиночный тег <code>&lt;br&gt;</code>.</p><div class="info info--gray">Иногда этот тег используется для разбиения текста на «как бы абзацы», что является плохим подходом. Используйте для разметки абзацев тег <code>&lt;p&gt;</code>.</div><p>Одиночный тег <code>&lt;hr&gt;</code> используется для того, чтобы создать горизонтальную линию-разделитель. На внешний вид этой линии можно влиять с помощью атрибутов, но правильней делать это с помощью CSS (это будет изучаться в последующих курсах).</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Переносы и разделители</title>
  </head>
  <body>
    <h1>Чайф. С войны</h1>

    <p>
    В твоём парадном темно,
    Резкий запах привычно бьёт в нос.
    Твой дом был под самой крышей —
    В нём немного ближе до звёзд.
    </p>

    <p>
    Ты шёл не спеша, возвращаясь с войны
    Со сладким чувством победы,
    С горьким чувством вины.
    </p>

    <p>
    Вот твой дом, но в двери
    Уже новый замок.
    Здесь ждали тебя так долго,
    Но ты вернуться не мог.
    </p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"С помощью тега <br> добавьте три переноса строки в первый куплет,",
  check:null},
  {message:"два переноса во второй куплет,",
  check:null},
  {message:"три переноса в третий.",
  check:null},
  {message:"Добавьте разделители между абзацами куплетов с помощью тега <hr>",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson39":{
theory:`<div><h1>Цитаты</h1><p>В HTML существует несколько тегов для обозначения цитат:</p><ul><li><code>&lt;blockquote&gt;</code> предназначен для выделения длинных цитат, которые могут состоять из нескольких абзацев. Тег выделяет цитату как отдельный блок текста с отступами.</li><li><code>&lt;q&gt;</code> предназначен для выделения коротких цитат в предложениях. Текст внутри этого тега автоматически обрамляется кавычками.</li><li><code>&lt;cite&gt;</code> используется для того, чтобы выделить источник цитаты, название произведения или автора цитаты.</li></ul></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Цитаты</title>
  </head>
  <body>
    <h1>Цитаты великих</h1>

    <p>В книге Мастер и Маргарита есть такая цитата:</p>

    Никогда ничего не просите! Никогда и ничего, и в особенности у тех, кто сильнее вас. Сами предложат и сами всё дадут!

    <p>Известное выражение Hasta la vista, baby принадлежит Терминатору.</p>

    <p>Кекс предпочитает поговорку Без труда не выловишь и рыбку из пруда! и повторяет её постоянно.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Используйте подходящие теги цитат для: фразы «Мастер и Маргарита»,",
  check:null},
  {message:"фразы «Никогда ничего не просите … Сами предложат и сами всё дадут!»,",
  check:null},
  {message:"и фразы «Hasta la vista, baby».",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson40":{
theory:`<div><h1>Верхние и нижние индексы</h1><p>Следующие два тега обычно используются не для выделения слов, а для выделения отдельных символов. Их используют для указания единиц измерения или для написания простых формул.</p><p>Например: 20м<sup>2</sup>, H<sub>2</sub>O, X<sup>3</sup>+X<sup>2</sup>=1</p><p>Тег <code>&lt;sup&gt;</code> отображает текст в виде верхнего индекса.</p><p>Тег <code>&lt;sub&gt;</code> отображает текст в виде нижнего индекса.</p><p>Стоит отметить, что эти теги являются чисто презентационными и не имеют собственной семантики.</p><p>Эти теги можно использовать внутри друг друга для создания более сложных формул.</p><p>Если вам нужно вставить очень сложную формулу в HTML-документ, лучше воспользоваться специальным языком разметки <a href="https://ru.wikipedia.org/wiki/MathML" target="_blank" rel="nofollow noopener">MathML</a>.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Верхние и нижние индексы</title>
  </head>
  <body>
    <h1>Формулы</h1>
    <ul>
      <li>H2SO4</li>
      <li>sin2x+cos2x=1</li>
      <li>C2H5OH</li>
      <li>e-x2</li>
    </ul>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Приведите первую формулу к виду <code class='keyclass'>H<sub>2</sub>SO<sub>4</sub></code>",
  check:null},
  {message:"вторую формулу к виду <code class='keyvalue'>sin<sup>2</sup>x+cos<sup>2</sup>x=1</code>.",
  check:null},
  {message:"Третью формулу приведите к подходящему виду самостоятельно.",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson41":{
theory:`<div><h1>Помечаем изменения. Теги del и ins</h1><p>Любой документ на протяжении своей «жизни» может изменяться. С распространением динамических веб-приложений вносить изменения в HTML-документы стало проще простого.</p><p>Иногда возникает вопрос: а что же именно было изменено в документе, что было добавлено, а что удалено?</p><p>Как раз для описания изменений предназначены теги <code>&lt;del&gt;</code> и <code>&lt;ins&gt;</code>.</p><p><code>&lt;del&gt;</code> выделяет текст, который был удалён в новой версии документа.</p><p><code>&lt;ins&gt;</code> выделяет текст, который был добавлен в новой версии документа.</p><p>Оба тега имеют атрибут <code>datetime</code>, в котором можно указать дату и время, когда была внесена та или иная правка.</p><p>Простейшим примером применения этих тегов может служить список ошибок. Когда ошибка исправлена, её помечают тегом <code>&lt;del&gt;</code>, если найдена новая ошибка, то её добавляют в список и помечают тегом <code>&lt;ins&gt;</code>.</p><div>Атрибут <code>datetime</code> предназначен не для людей, а для компьютеров, поэтому дату и время там пишут в стандартизованном формате. При такой разметке программам легче разбирать документы и анализировать, когда произошли те или иные изменения.</div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Теги del и ins</title>
  </head>
  <body>
    <h1>Ошибки, 06.05.2015</h1>
    <ul>
      <li><del datetime="2015-05-07">Пункты меню слипаются.</del></li>
      <li>Неверный размер шрифта в заголовке.</li>
      <li>Логотип не обновлён.</li>
      <li><ins datetime="2015-05-08">Ошибки в текстах</ins>.</li>
      <li>Макет разваливается на минимальной ширине.</li>
    </ul>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Пометьте в списке ещё одну ошибку как исправленную с помощью <del>",
  check:null},
  {message:"и ещё одну как новую с помощью <ins>",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson42":{
theory:`<div><h1>Преформатированный текст</h1><p>Наверное, вы уже заметили, как отличается отображение кода в HTML-редакторе и в мини-браузере.</p><p>Вы можете ставить сколько угодно пробелов в HTML-коде, но браузер отобразит их как один. Вы также можете ставить сколько угодно переносов строки в HTML-коде, а в браузере переноса не будет, если только не использовать специальные теги, например <code>&lt;p&gt;</code> или <code>&lt;br&gt;</code>.</p><p>Изменить это поведение браузера можно с помощью тега <code>&lt;pre&gt;</code>, который обозначает «предварительно отформатированный текст». Браузер сохраняет и отображает все пробелы и переносы, которые есть внутри тега <code>&lt;pre&gt;</code>.</p><p>Наиболее часто этот тег используется при отображении примеров кода.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Преформатированный текст</title>
  </head>
  <body>

/\\ \\  __/\\ \\        /\\ \\
\\ \\ \\/\\ \\ \\ \\     __\\ \\ \\____
 \\ \\ \\ \\ \\ \\ \\  /\'__\`\\ \\ \'__\`\\
  \\ \\ \\_/ \\_\\ \\/\\  __/\\ \\ \\_\\ \\
   \\ \`\\___x___/\\ \\____\\ \\_,__/
    \\ /__//__/  \\/____/ \\/___/

  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Заключите в тег <pre> весь текст внутри тега <body>",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson43":{
theory:`<div><h1>Просто выделенный текст</h1><p>В HTML5 появился новый тег <code>&lt;mark&gt;</code>, который обозначает выделенный текст.</p><p>Иногда при работе с объёмными текстами мы используем маркер, чтобы выделять ключевые слова, идеи или что-то другое на что стоит обратить внимание. Такое же назначение и у тега <code>&lt;mark&gt;</code>.</p><p>В современных браузерах текст внутри <code>&lt;mark&gt;</code> подсвечивается жёлтым фоном.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
      <meta charset="utf-8">
      <title>Выделенный текст</title>
  </head>
  <body>
    <h1>Как это работает: онлайн-интенсивы</h1>

    <p>Минусы привычных онлайн-курсов понятны, но что если сделать этот инструмент лишь одной из ступеней обучения, дополнив программу занятиями с наставниками и разработкой проектов, приближенным к «боевым»? Мы решили пойти этим путём и создали учебную программу базовых интенсивов. Она включает пять основных элементов:</p>

    <ul>
      <li>Онлайн-курсы для знакомства с веб-технологиями и освоения базовых навыков работы с ними.</li>
      <li>Вебинары, на которых слушатели получают больше продвинутой теоретической информации, чем в ходе онлайн-курсов.</li>
      <li>Личное общение с наставником — опытные специалисты, сотрудничающие с HTML Academy, связываются с учениками по скайпу и в режиме 1 на 1 помогают им осваивать программу курса и проверяют домашние задания (индивидуальный подход гораздо эффективнее групповых занятий в офлайне).</li>
      <li>Сквозные проекты — в ходе обучения студенты работают над реальными проектами и шаг за шагом верстают настоящий сайт, который ничем не отличается от обычных корпоративных веб-ресурсов.</li>
      <li>Сертификация — как уже было сказано выше, люди хотят получить «плюсик в резюме», поэтому им нужно дать возможность защитить свой проект на соответствие ряду критериев и получить реальный сертификат о прохождении обучения.</li>
    </ul>

    <p>Прочитать <a href="https://habr.com/company/htmlacademy/blog/252843/" target="_blank" rel="nofollow noopener">статью целиком</a> вы можете на Хабре.</p>
  </body>
</html>
`,
css:``,
hidden:``,
js:``,
tasks:[
  {message:"Выделите три любых фрагмента текста с помощью тега <mark>",
  check:null},
],blocked:"6",editorOff:"6"},

"lesson44":{
theory:`<div><h1>Испытание: разметка статьи</h1><p>Чтобы пройти испытание, вам необходимо разметить текст в HTML-редакторе точно так же, как и в образце.</p><p>При создании образца были использованы только те HTML-теги, которые изучались в данном курсе. Стили не использовались, так что изменять код CSS-редактора нельзя.</p><p>Если отображение в мини-браузере сильно отличается от образца, то используйте вкладку «Различия», в которой отображается то, как наш сервер видит ваш HTML-код.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Язык разметки</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    Язык разметки
    Язык разметки в компьютерной терминологии — набор символов или последовательностей, вставляемых в текст для передачи информации о его выводе или строении. Принадлежит классу компьютерных языков.
    Структура языка
    Текстовый документ, написанный с использованием языка разметки, содержит не только сам текст но и дополнительную информацию:
    указание на заголовки
    выделения
    списки
    и т. д.
    В более сложных случаях язык разметки позволяет вставлять в документ интерактивные элементы и содержание других документов.
  </body>
</html>
`,
css:`body {
  width: 400px;
  margin: 0;
  padding: 0 10px;

  font-family: "Times New Roman", serif;
  font-size: 16px;
}
`,
hidden:``,
js:``,
tasks:[
  {message:"",
  check:null},
],blocked:"6",editorOff:"3"},

"lesson45":{
theory:`<div><h1>Испытание: рецепт</h1><p>Задача аналогична предыдущей. В этом испытании использованы другие теги из данного курса.</p></div>`,
html:`<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Рецепт каши</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    Пшенная каша с тыквой

    Пшено, 1 стакан
    Вода H2O или AquaLife®, 2 стакана
    Молоко, 1,5 стакана 2 стакана
    Масло сливочное, 3 ст.л.
    Тыква, около 300г
    Соль, по вкусу
    Сахар демерара, посыпать сверху

    Примечания:
    Пшено необходимо перебрать
    Тыкву нарезать кубиками 1×1 см
    Кашу перемешивать не надо
  </body>
</html>
`,
css:`body {
  width: 300px;
  margin: 0;
  padding: 0 10px;

  font-family: "Times New Roman", serif;
  font-size: 16px;
}

h1 {
  font-size: 18px;
}
`,
hidden:``,
js:``,
tasks:[
  {message:"",
  check:null},
],blocked:"6",editorOff:"3"},
};