keks={
ask:(text)=>{var g=~~(Math.random()*200);Academy.vars.log.push(g);setTimeout((()=>{printLog(text)}).bind(this),4);return g},
getNumber:()=>~~(Math.random()*100 + 1),
};
fH1={
a:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.indexOf(';');x=j.indexOf(';',x+1);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[100,15],[80,10],[60,12]];var r=[[30,30,45],[24,20,34],[18,24,30]];for(var i=0;i<d.length;i++){var f="function z(){"+a+";foodInGrams="+d[i][0]+";sleepInHours="+d[i][1]+";"+b+";return [jumps,pulls,runs]};z();";var t;l.push("Тест "+(i+1)+". Накануне я съел "+d[i][0]+" грамм корма и проспал "+d[i][1]+" часов.");l.push("Ожидаю "+r[i][0]+" прыжка, "+r[i][1]+" подтягиваний и "+r[i][2]+" круга по комнате.");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t[0]+" прыжков, "+t[1]+" подтягиваний, "+t[2]+" кругов по комнате.");for(var k=0;k<r[i].length;k++){if(t[k]==r[i][k])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
b:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) dollarAmount/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[74,63,500,2500],[50,30,250,500],[60,42,800,700],[80,50,1000,2000]];var r=[194500,27500,77400,180000];for(var i=0;i<d.length;i++){var f="function z(){"+a+";euroRate="+d[i][0]+";dollarRate="+d[i][1]+";euroAmount="+d[i][2]+";dollarAmount="+d[i][3]+";"+b+";return rublesAmount};z();";var t;l.push("Тест "+(i+1)+". Курс евро "+d[i][0]+", курс доллара "+d[i][1]+", необходимо евро "+d[i][2]+", долларов "+d[i][3]+".");l.push("Ожидаю результат: "+r[i]+" рублей.");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
c:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) balance/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[150000,100000],[100000,80000],[95000,35000],[140500,95000]];var r=[100000,40000,120000,91000];for(var i=0;i<d.length;i++){var f="function z(){"+a+";travelCost="+d[i][0]+";balance="+d[i][1]+";"+b+";return debtAmount};z();";var t;l.push("Тест "+(i+1)+". Нужно на поездку "+d[i][0]+", есть в наличии — "+d[i][1]+".");l.push("Ожидаю результат: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
d:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) averageSpeed/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[7260,600],[7260,800],[6500,500],[8000,670]];var r=[12,9,13,12];for(var i=0;i<d.length;i++){var f="function z(){"+a+";flightDistance="+d[i][0]+";averageSpeed="+d[i][1]+";"+b+";return flightTime};z();";var t;l.push("Тест "+(i+1)+". Расстояние полёта "+d[i][0]+", средняя скорость — "+d[i][1]+".");l.push("Ожидаю результат: "+r[i]+" часов.");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t+" часов.");if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
e:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) averageSpeed/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[78,80],[100,57],[110,80],[87,95]];var r=[2,3,2,1];for(var i=0;i<d.length;i++){var f="function z(){"+a+";routeDistance="+d[i][0]+";averageSpeed="+d[i][1]+";"+b+";return routeTime};z();";var t;l.push("Тест "+(i+1)+". Средняя скорость "+d[i][0]+", расстояние — "+d[i][1]+".");l.push("Ожидаю результат: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
f:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.indexOf(';');if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[77,87.8,107.6,95];var r=[25,31,42,35];for(var i=0;i<d.length;i++){var f="function z(){"+a+";farenheitTemperature="+d[i]+";"+b+";return celsiusTemperature};z();";var t;l.push("Тест "+(i+1)+". Температура по Фаренгейту — "+d[i]+"°F.");l.push("Ожидаю результат: "+r[i]+"°C.");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t+"°C.");if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
g:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) fatMass/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[.55,5,.8],[.45,4.5,.8],[.41,3.5,.2],[.52,4,.9]];var r=[[17,16],[22,18],[21,6],[15,23]];for(var i=0;i<d.length;i++){var f="function z(){"+a+";length="+d[i][0]+";weight="+d[i][1]+";fatMass="+d[i][2]+";"+b+";return [bodyMassIndex,fatPercent]};z();";var t;l.push("Тест "+(i+1)+". Длина кота "+d[i][0]+", масса кота "+d[i][1]+", масса жира кота "+d[i][2]+".");l.push("Ожидаю результат, индекс массы: "+r[i][0]+", процент жира: "+r[i][1]+".");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат, индекс массы: "+t[0]+", процент жира: "+t[1]+".");for(var k=0;k<r[i].length;k++){if(t[k]===r[i][k])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
h:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) secondLeg/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[300,700],[300,400],[700,650],[520,520]];var r=[[762,1762],[500,1200],[955,2305],[735,1775]];for(var i=0;i<d.length;i++){var f="function z(){"+a+";firstLeg="+d[i][0]+";secondLeg="+d[i][1]+";"+b+";return [hypotenuse,perimeter]};z();";var t;l.push("Тест "+(i+1)+". Первый катет — "+d[i][0]+", второй катет — "+d[i][1]+"°C.");l.push("Ожидаю результат, гипотенуза: "+r[i][0]+", периметр: "+r[i][1]+".");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат, гипотенуза: "+t[0]+", периметр: "+t[1]+".");for(var k=0;k<r[i].length;k++){if(t[k]===r[i][k])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
i:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) intensity/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[5,90,75],[30,60,75],[45,75,60],[50,72,40]];var r=[184,158,135,111];for(var i=0;i<d.length;i++){var f="function z(){"+a+";age="+d[i][0]+";pulseAtRest="+d[i][1]+";intensity="+d[i][2]+";"+b+";return pulseAtWorkout};z();";var t;l.push("Тест "+(i+1)+". Возраст "+d[i][0]+", пульс в покое — "+d[i][1]+", интенсивность — "+d[i][2]+".");l.push("Ожидаю результат, ЧСС для тренировки: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
j:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) activityRate/);x=j.indexOf(';',x);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[5,60,5,1.725],[60,171,25,1.5],[75,183,30,1.9],[85,155,50,1.3]];var r=[[716,286,179,251],[2356,942,589,825],[3422,1369,856,1198],[2193,877,548,768]];for(var i=0;i<d.length;i++){var f="function z(){"+a+";weight="+d[i][0]+";length="+d[i][1]+";age="+d[i][2]+";activityRate="+d[i][3]+";"+b+";return [calorieRate,proteins,fats,carbohydrates]};z();";var t;l.push("Тест "+(i+1)+". Вес — "+d[i][0]+", рост — "+d[i][1]+", возраст — "+d[i][2]+", активность — "+d[i][3]+".");l.push("Ожидаю результат, калории: "+r[i][0]+", белки: "+r[i][1]+", жиры: "+r[i][2]+", углеводы: "+r[i][3]+".");try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат, калории: "+t[0]+", белки: "+t[1]+", жиры: "+t[2]+", углеводы: "+t[3]+".");for(var k=0;k<r[i].length;k++){if(t[k]===r[i][k])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
};
LessonsData={
"lesson986":{theory:`<div><h1>Начало карьеры</h1><p>Поздравляем! Теперь вы программист-стажёр в команде Кекса. Как кот выбирает себе человека? Это неизвестно никому. Но если он выбрал вас, то надо стараться.</p><p>Не знакомы с программированием? Не волнуйтесь, всему научим!</p><p>Что нужно будет делать? Писать программы для своего усатого заказчика на языке JavaScript. Для начала будете писать простые программы для консоли, а потом начнёте оживлять интерфейсы сайтов.</p><p>Знакомимся с рабочим местом:</p><ul><li>Редактор кода у нас слева, там будете писать код.</li><li>Консоль справа, там будут выводиться результаты работы ваших программ.</li><li>По умолчанию программы запускаются автоматически, но вы можете поменять это в настройках.</li><li>Список задач на рабочий день — справа внизу. Правильно выполненные задачи подсвечиваются.</li></ul><p>Для работы всё готово, кружка чая налита. Поехали!</p><p><b>Первая задача</b>: написать программу, для расчёта калорийности 50 грамм молока (утренний перекус Кекса).</p><p>Решим её вместе. Каждая программа — это набор команд. В JavaScript команды разделяются точкой с запятой, <code>;</code>. Чтобы решить эту задачу введите в консоль одну команду:</p><pre>50 * (42 / 100);\n</pre><p>Вот и вся программа, всего одна команда. Но ведь работает!</p></div>`,html:``,css:``,hidden:``,js:``,tasks:[{message:`Напишите программу для расчёта калорийности завтрака Кекса: введите в редактор строчку <code class='keytext'>50 <code class='keyword'>*</code> (42 <code class='keyword'>/</code> 100)</code>; и посмотрите на результат в <code class='keyword'>консоли</code>. В <code class='keytext'>100</code> граммах молока <code class='keytext'>42</code> калории — вот откуда эти цифры.`,check:()=>{var l=Academy.vars.log;try{try{l[1]=eval(Academy.JS.getValue())}catch(e){l[1]=e};printLog('LOG:');return ~l.indexOf(21)}catch(e){return false;}}}],blocked:`4`,editorOff:`8`},
"lesson987":{theory:`<div><h1>Усложняем программу</h1><p>Всего 21 калория! Кекс доволен! И вашей первой программой, конечно, тоже.</p><p><b>Вторая задача</b>: написать программу для расчёта калорийности обеда и ужина. На обед Кекс любит поточить сухой корм, грамм так 80. На ужин частенько бывает аппетитный, ароматный, хрустящий сухой корм, но побольше, грамм 120, ведь нужно готовиться к ночным тренировкам. <i>Да, разнообразие в еде — это не про Кекса</i>.</p><p>Эту программу с помощью одной команды не написать, понадобится две команды. Не забудьте про <code>;</code>.</p><p>Кстати, в JavaScript можно использовать специальные команды-подсказки. Такие команды называются <i>комментариями</i>, и код внутри них не выполняется. Обычно в комментариях пишут поясняющие тексты для себя, или для других, или для себя в будущем. Комментарии бывают двух типов: однострочные и многострочные. Пример комментариев:</p><pre>// Эта строка кода не выполнится. Однострочный комментарий.\n\n/*\nВсе эти строки кода не выполнятся.\nТак как это многострочный комментарий.\n*/\n</pre></div>`,html:``,css:``,hidden:``,js:`// Напишите код программы ниже\n\n`,tasks:[{message:`Напишите программу, которая подсчитывает калорийность обеда и ужина Кекса. Для этого введите в редактор строчку <code class='keytext'>80 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>;`,check:(o)=>{var l=Academy.vars.log;try{try{l[1]=eval(Academy.JS.getValue())}catch(e){l[1]=e};printLog('LOG:');if(~l.indexOf(320))Academy.vars.hA=true;return o.hA}catch(e){return false;}}},{message:`А под ней ещё одну строчку <code class='keytext'>120 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>; и посмотрите на результат в <code class='keyword'>консоли</code>. Оказывается, в <code class='keytext'>100</code> граммах корма примерно <code class='keytext'>400</code> калорий.`,check:(o)=>{var l=Academy.vars.log;try{try{l[1]=eval(Academy.JS.getValue())}catch(e){l[1]=e};printLog('LOG:');return ~l.indexOf(480)}catch(e){return false;}}}],blocked:`4`,editorOff:`8`},
"lesson988":{theory:`<div><h1>Вывод в консоль</h1><p>В этот раз Кекс недоволен! И дело даже не в тех 480 калориях за ужин (хотя скорее всего именно в них).</p><p>Дело в том, что программа показывает только одно число, а заказчик хочет видеть два числа: и про обед, и про ужин. И желательно с текстовыми пояснениями.</p><p>Давайте дорабатывать наш код. Но сначала разберёмся, как работает текущая версия.</p><p>JavaScript выполняет программу последовательно, команда за командой, и выводит в консоль результат выполнения последней команды. В текущей версии программы последняя команда возвращает результат <code>480</code>. Именно его мы и видим в консоли.</p><p>Чтобы вывести дополнительную информацию в консоль, можно воспользоваться специальной командой:</p><pre>console.log(<i>данные для вывода в консоль</i>);</pre><p>Эту команду можно использовать в любом месте программы и выводить в консоль не только результаты выполнения операций, но и текстовые подсказки. Например:</p><pre>console.log(2 * 2);</pre><p>Текстовые подсказки, в отличие от результатов операций, нужно заключать в кавычки:</p><pre>console.log('Привет от Кекса!');</pre><p>За дело!</p></div>`,html:``,css:``,hidden:``,js:`80 * (400 / 100);\n120 * (400 / 100);\n`,tasks:[{message:`Улучшите программу для расчёта обеда и ужина. Добавьте команду <code>console.log(<code class='keytext'>'Калорийность обеда'</code>)</code>; перед командой <code class='keytext'>80 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>;`,check:()=>~getJ().search(/console\.log\(('|"|`)Калорийностьобеда\1\)\S*80\*\(400\/100\)/)},{message:`затем замените команду <code class='keytext'>80 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>; на команду <code>console.log(<code class='keytext'>80 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>)</code>;`,check:()=>~getJ().search(/console\.log\(('|"|`)Калорийностьобеда\1\)\S*console\.log\(80\*\(400\/100\)\)/)},{message:`Добавьте команду <code>console.log(<code class='keytext'>'Калорийность ужина'</code>)</code>; перед командой <code class='keytext'>120 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>;`,check:()=>~getJ().search(/console\.log\(('|"|`)Калорийностьужина\1\)\S*120\*\(400\/100\)/)},{message:`затем замените команду <code class='keytext'>120 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>; на команду <code>console.log(<code class='keytext'>120 <code class='keyword'>*</code> (400 <code class='keyword'>/</code> 100)</code>)</code>;`,check:()=>~getJ().search(/console\.log\(('|"|`)Калорийностьужина\1\)\S*console\.log\(120\*\(400\/100\)\)/)}],blocked:`4`,editorOff:`8`},
"lesson989":{theory:`<div><h1>Типы данных</h1><p>Теперь заказчик доволен! Конечно, калории никуда не делись, зато программа работает отлично: показывает все результаты и подсказки.</p><p>Перед выполнением следующего задания нам нужно прояснить несколько деталей. Вспомните результат работы программы, который выводится в консоль:</p><pre>LOG: "Калорийность обеда" (string)\nLOG: 320 (number)\nLOG: "Калорийность ужина" (string)\nLOG: 480 (number)\n&lt;= undefined\n</pre><p>Каждая строка, которая начинается с <code>LOG:</code>, — результат работы команды <code>console.log()</code>.</p><p>Последняя строка начинается с символа <code>&lt;=</code>. Она показывает значение, которое возвращает программа после выполнения. Что значит «возвращает»? Программа может выполнить код и <em>вернуть</em>, то есть отдать результат своей работы для дальнейшего использования.</p><p>Например, вы разговариваете с другом по телефону:</p><p>— Сколько будет два плюс два?, — спрашиваете вы.</p><p>— Четыре, — быстро отвечает вам друг.</p><p>— А теперь умножь это значение на два!, — продолжаете вы.</p><p>Своим ответом друг «вернул» вам значение «четыре». Вы получили ответ на свой вопрос и смогли что-то сделать с этим ответом (попросили увеличить результат в два раза). То же самое делает команда <code>2 + 2</code>. Она складывает два числа и возвращает значение <code>4</code> (здесь всё логично).</p><p>А вот если бы вы, во время телефонного разговора, попросили друга умножить два на два и написать результат на листочке, вы бы не услышали в ответ «четыре». Друг бы записал ответ на бумаге, но вы бы ничего не смогли сделать с этим результатом. Точно так же работает <code>console.log()</code>. Вы просите команду вывести сумму чисел <code>console.log(2 + 2)</code>, она выводит в консоль <code>4</code> и всё. Как ваш друг, который просто записывает ответ, ничего вам не говоря. Получается, что на самом деле <code>console.log()</code> ничего не возвращает или возвращает «ничего». Такое «отсутствие значения» в JavaScript обозначается ключевым словом <code>undefined</code>. Его вы и видите в последней строчке.</p><p>Команда <code>console.log()</code> выводит в нашу консоль и дополнительную информацию. Например, она показывает тип выводимых данных. С разными типами данных можно производить разные действия, поэтому программисту важно знать, с чем он работает. В нашей консоли тип данных выводится в скобочках, например <code>(string)</code> или <code>(number)</code>.</p><p>Давайте выведем в консоль разные данные и посмотрим на их тип.</p></div>`,html:``,css:``,hidden:``,js:``,tasks:[{message:`С помощью команды <code>console.log()</code> выведите в <code class='keyword'>консоль</code> перечисленные ниже значения и посмотрите, какой у них будет тип. Для каждого значения записывайте отдельный вывод в консоль с новой строки: <p><code class='keytext'>100</code></p>`,check:(o)=>{if(!o.hE){console.log=function(){for(var i=0;i<arguments.length;i++){Academy.tcl(arguments[i].toString() + ' (' + typeof arguments[i] + ')')}};Academy.vars.hE=true;}return o.log&&~o.log.indexOf('100 (number)')}},{message:`<code class='keytext'>1.5</code>`,check:(o)=>o.log&&~o.log.indexOf('1.5 (number)')},{message:`<code class='keytext'>'Привет от Кекса'</code>`,check:(o)=>o.log&&~o.log.indexOf('Привет от Кекса (string)')},{message:`<code class='keyword'>true</code>`,check:(o)=>o.log&&~o.log.indexOf('true (boolean)')}],blocked:`4`,editorOff:`8`},
"lesson990":{theory:`<div><h1>Сложные типы данных</h1><p>На прошлом шаге вы познакомились с тремя типами данных:</p><ul><li><code>number</code> — числа,</li><li><code>string</code> — строки,</li><li><code>boolean</code> — логические или булевы значения, «истина» или «ложь».</li></ul><p>На самом деле вы познакомились с четырьмя типами. Так как <code>undefined</code> — это особый тип данных, включающий одно значение — <code>undefined</code>.</p><p>Кстати, в JavaScript числовой тип включает и целые, и дробные числа. В некоторых других языках для хранения таких чисел служат разные типы данных.</p><p>Теперь познакомьтесь с парой более сложных, или составных, типов данных: массивом и объектом.</p><p>Составные типы содержат не одно, а несколько значений. Массив, <code>array</code>, хранит последовательность значений и порядок этих значений важен. Объект, <code>object</code>, состоит из множества пар «ключ-значение», порядок этих пар не важен. Записываются эти типы данных так:</p><pre>// Массив\n[1, 2, 3, 4, 5]\n\n// Объект\n{month: 'june', day: 15}\n\n// Вывод массива в консоль\nconsole.log([1, 2, 3, 4, 5]);\n\n// Вывод объекта в консоль\nconsole.log({month: 'june', day: 15});\n</pre><p>Каждый из этих типов данных мы разберём позже, в дальнейших курсах.</p></div>`,html:``,css:``,hidden:``,js:``,tasks:[{message:`С помощью команды <code>console.log()</code> выведите в <code class='keyword'>консоль</code> перечисленные ниже значения и посмотрите, какой у них будет тип. Для каждого значения записывайте команду с новой строки:<p><code class='keyvalue'>[<code class='keytext'>50, 320, 480</code>]</code>`,check:(o)=>{if(!o.hE){console.log=function(){for(var i=0;i<arguments.length;i++){Academy.tcl(arguments[i], '(' + typeof arguments[i] + ')')}};Academy.vars.hE=true;}return o.log&&~o.log.indexOf('[ 50, 320, 480, ]')}},{message:`<code class='keyvalue'>{meal: <code class='keytext'>'Завтрак'</code>, energy: <code class='keytext'>50</code>}</code>`,check:(o)=>o.log&&~o.log.indexOf('{ meal: Завтрак, energy: 50, }')}],blocked:`4`,editorOff:`8`},
"lesson991":{theory:`<div><h1>Неизвестные данные</h1><p>Рано или поздно это должно было произойти. Читайте новую задачу Кекса.</p><p><b>Третья задача</b>: «Напиши программу для расчёта калорийности завтрака. Завтракаю я молоком. Хочу вводить, сколько я выпил и увидеть калорийность».</p><p>И почему он сразу так не поставил задачу?! Простим Кекса, ведь по природе он ночной хищник-одиночка, ловкий и быстрый, но не такой сообразительный, как его коллеги еноты. Поэтому задачи он будет усложнять, не торопясь.</p><p>За раз эту задачу решить не получится, поэтому будем действовать постепенно.</p><p>Ранее мы писали программы, которые работают с известными данными. И эти данные находятся прямо в коде программы.</p><p>Но намного чаще вам придётся работать с данными, которые на момент запуска программы неизвестны. Например, собирать пользовательский ввод и обрабатывать его.</p><p>Для начала научимся получать данные от пользователя, то есть от босса, то есть от Кекса. Для этого нам придётся звонить ему на пейджер с помощью специальной команды:</p><pre>keks.ask('<i>вопрос для босса</i>');\n</pre><p>Эта команда существует только в нашей консоли. В JavaScript её не встраивают, потому что Кекс не даёт согласия разработчикам языка (а запросы поступают постоянно), ведь если команду встроить в язык, то пейджер босса взорвётся от запросов.</p><p>Вы тоже научитесь создавать свои команды в программах, давать им имена и обращаться к ним для выполнения каких-то операций. Мы разберём это в будущих курсах. А пока попробуйте собрать данные от Кекса. И не забудьте, что текст вопроса — это строка, поэтому заключается в кавычки: <code>'строка'</code>.</p></div>`,html:``,css:``,hidden:``,js:`console.log('Завтракомер v0.1 запущен');\n\n// Введите команду keks.ask на следующей строке\n`,tasks:[{message:`Введите в редактор команду <code>keks.ask</code> с вопросом «<code class='keytext'>Босс, сколько грамм молока вы отведали?</code>».`,check:()=>~getJ().search(/\/\/Введитекомандуkeks\.askнаследующейстроке\S*keks\.ask\(('|"|`)Босс,сколькограмммолокавыотведали\?\1\)/)}],blocked:`4`,editorOff:`8`},
"lesson992":{theory:`<div><h1>Переменные</h1><p>Программа получила данные, и теперь ей нужно где-то сохранить их для дальнейшего использования. Для этого надо разобраться с <em>обработкой</em> данных. Очевидно, что данные сохраняются в памяти компьютера. А память устроена сложно, она использует сложные адреса. Раньше с памятью работали примерно так:</p><pre>put 0xEC002...0xEC003 1 // сохранили число 1 в ячейку памяти\nget 0xEC002...0xEC003   // достали число 1 из ячейки памяти\n</pre><p>Неудобно постоянно работать с какими-то непонятными адресами, очень сложно запомнить, что и зачем ты туда сохранил. Поэтому ленивые программисты придумали простое решение — переменные.</p><pre>put my_number 1 // сохранили число 1 в переменную my_number\nget my_number   // достали число 1 из переменной my_number\n</pre><p>Переменная — просто название для данных, которое можно делать понятным для людей. И это название можно записать по-разному. Два самых популярных способа: camelCase (верблюжья нотация) и snake_case (змеиная нотация). В первом случае все слова в названии переменной пишутся слитно и каждое новое слово начинается с большой буквы (<code>myNumber</code>, <code>userName</code>). Во втором случае все слова разделяются нижним подчёркиванием (<code>my_number</code>, <code>my_name</code>). В курсах мы будем использовать camelCase и писать названия переменных именно так.</p><p>Переменные упрощают работу с памятью: они «приклеиваются» к ячейкам памяти, как наклейка с названием приклеивается к папке с документами. С помощью переменных можно легко не только сохранять и получать данные, но и изменять их.</p><p>В JavaScript переменные можно создавать командой <code>var</code>, за которой следует имя переменной:</p><pre>var <i>имяПеременной</i>;</pre><p>После создания переменной её можно использовать в других командах, например, выводить в консоль:</p><pre>// Обратите внимание, что кавычек нет!\nconsole.log(<i>имяПеременной</i>);</pre></div>`,html:``,css:``,hidden:``,js:``,tasks:[{message:`Создайте переменную с именем <code class='keyvalue'>milkInGrams</code>`,check:()=>~getJ().search(/(var|let)milkInGrams/)},{message:`Затем выведите эту переменную в <code class='keyword'>консоль</code>. Кстати, <code class='keyvalue'>milkInGrams</code> можно перевести как «молоко в граммах».`,check:()=>~getJ().search(/(var|let)milkInGrams\S*console\.log\(milkInGrams\)/)}],blocked:`4`,editorOff:`8`},
"lesson993":{theory:`<div><h1>Объявление и присваивание переменных</h1><p>Когда вы создаёте переменную таким образом:</p><pre>var someName;\n</pre><p>Программа просто запоминает новое имя переменной, <code>someName</code>, но никакие данные в неё не записывает. Если вывести эту переменную в консоль, то получится такой результат:</p><pre>LOG: undefined (undefined)\n</pre><p>Запомните, вы можете создать или <i>объявить</i> переменную и не сохранять в неё никакие данные. Иногда это делают, чтобы «застолбить» имя переменной на будущее.</p><p>Конечно, намного чаще вы будете создавать непустые переменные. Для этого нужно помимо объявления переменной <i>присвоить</i> ей какие-то данные.</p><p>Для операции присваивания используется знак равенства:</p><pre>var milkInGrams;              // Объявляем переменную\nconsole.log(milkInGrams);     // Выведет undefined\n\nmilkInGrams = 20;             // Присваиваем одно значение\nconsole.log(milkInGrams);     // Выведет 20\n\nmilkInGrams = 'сорок грамм';  // Присваиваем совершенно другое значение\nconsole.log(milkInGrams);     // Выведет строку "сорок грамм"\n</pre><p>Обратите внимание на две особенности.</p><p>Во-первых, команда <code>var</code> для создания каждой переменной используется всего один раз. Дальше вы обращаетесь к переменной по её имени, без <code>var</code>.</p><p>Во-вторых, если вы повторно задаёте значение переменной, как в примере выше, когда записали <code>milkInGrams = 'сорок грамм';</code>, вы меняете значение переменной. То есть в ней уже не находится число <code>20</code>, теперь в ней содержится строка <code>'сорок грамм'</code>. Это называется переопределением значения переменной.</p><p>Можно одновременно с объявлением переменной присваивать ей какое-то значение. Причём это значение может возвращаться из другой команды. Вот несколько примеров:</p><pre>var milkCalories = 42;\nvar dryFeedCalories = keks.ask('Сколько калорий в сухом корме?');\nvar dailyMealInGrams = 50 + 80 + 120;\n</pre><p>Теперь соберём неизвестные данные, сохраним их в переменную и выведем в консоль.</p></div>`,html:``,css:``,hidden:``,js:`console.log('Завтракомер v0.1 запущен');\n`,tasks:[{message:`На второй строке объявите переменную <code class='keyvalue'>milkInGrams</code>`,check:()=>~getJ().search(/(var|let)milkInGrams/)},{message:`На следующей строке присвойте этой <code class='keytext'>переменной</code> значение команды <code>keks.ask</code> с вопросом «<code class='keytext'>Босс, сколько грамм молока вы отведали?</code>»`,check:()=>~getJ().search(/(var|let)milkInGrams\S*milkInGrams=keks\.ask\(('|"|`)Босс,сколькограмммолокавыотведали\?\2\)/)},{message:`На следующей строке выведите в <code class='keyword'>консоль</code> текст-подсказку «<code class='keytext'>Завтракомер получил данные о молоке:</code>»`,check:()=>~getJ().search(/(var|let)milkInGrams\S*milkInGrams=keks\.ask\(('|"|`)Босс,сколькограмммолокавыотведали\?\2\)\S*console\.log\(('|"|`)Завтракомерполучилданныеомолоке:\3\)/)},{message:`И в последней строке выведите <code class='keyvalue'>переменную</code> в <code>консоль</code>.`,check:()=>~getJ().search(/(var|let)milkInGrams\S*milkInGrams=keks\.ask\(('|"|`)Босс,сколькограмммолокавыотведали\?\2\)\S*console\.log\(('|"|`)Завтракомерполучилданныеомолоке:\3\)\S*console\.log\(milkInGrams\)/)}],blocked:`4`,editorOff:`8`},
"lesson994":{theory:`<div><h1>Операции</h1><p>Чтобы писать универсальные программы, мы должны были научиться:</p><ol><li>получать неизвестные данные,</li><li>сохранять эти данные в переменные для дальнейшего использования,</li><li>обрабатывать данные или проводить над ними <i>операции</i>.</li></ol><p>С первыми двумя пунктами мы разобрались. Теперь перейдём к операциям. Посмотрите на такую команду:</p><pre>50 + 100;</pre><p>Это операция. Она состоит из знака операции, <code>+</code>, и двух <i>операндов</i>, <code>50</code> и <code>100</code>.</p><p>Знак определяет, что произойдёт с операндами. В команде выше мы используем плюс, а значит, это операция сложения, и операнды (или слагаемые) сложатся, и команда вернёт результат сложения, то есть <code>150</code>.</p><p>Операция сложения — <i>бинарная</i>, так как в ней два операнда. Бинарные операции самые распространённые. Но существуют и унарные операции, с одним операндом, и тернарные операции, с тремя операндами.</p><p>В качестве операндов мы можем использовать переменные:</p><pre>breakfastCalories + dinnerCalories;\nmilkInGrams * 0.5;\n50 + waterInGrams;\n</pre><p>Над разными типами операндов можно производить разные операции, поэтому важно понимать, данные какого типа хранятся в переменных. И здесь очень помогает команда <code>console.log()</code>.</p><p>Давайте попрактикуемся в операциях над числами. Вот некоторые из них:</p><table cellpadding="6"><tbody><tr><td width="120">Сложение</td><td>+</td></tr><tr><td>Вычитание</td><td>-</td></tr><tr><td>Умножение</td><td>*</td></tr><tr><td>Деление</td><td>/</td></tr></tbody></table></div>`,html:``,css:``,hidden:``,js:`var milkInGrams = 50;\nvar waterInGrams = 100;\n\n`,tasks:[{message:`Выведите в <code class='keyword'>консоль</code> результаты операций с переменными, значения самих переменных не меняйте. Каждый вывод в <code class='keytext'>консоль</code> делайте на новой строке.<p><code class='keytext'>Сложите</code> две переменные, чтобы получить общий объём выпитой жидкости.</p>`,check:(o)=>o.log&&~o.log.indexOf(150)},{message:`<code class='keytext'>Умножьте</code> <code class='keyvalue'>milkInGrams</code> на <code class='keytext'>0.03</code>, чтобы узнать количество белка.`,check:(o)=>o.log&&~o.log.indexOf(1.5)},{message:`<code class='keytext'>Разделите</code> <code class='keyvalue'>milkInGrams</code> на <code class='keytext'>20</code>, чтобы узнать количество углеводов.`,check:(o)=>o.log&&~o.log.indexOf(2.5)},{message:`<code class='keytext'>Вычтите</code> из <code class='keytext'>суммы переменных</code> число <code class='keytext'>150</code>, чтобы получить отклонение от дневной нормы выпитой жидкости.`,check:(o)=>o.log&&~o.log.indexOf(0)}],blocked:`4`,editorOff:`8`},
"lesson995":{theory:`<div><h1>Порядок операций</h1><p>Надеюсь, вы самостоятельно справились с последней задачей, где нужно было написать такой код:</p><pre>console.log(milkInGrams + waterInGrams - 150);</pre><p>В одной команде можно использовать сразу несколько операций. Порядок выполнения операций будет зависеть от их приоритетов.</p><p>Если в выражении есть только арифметические операции, то их приоритет такой же, как в школе: умножение и деление имеют высший приоритет, сложение и вычитание низший.</p><p>Изменять приоритет, а значит и порядок выполнения операций, можно с помощью круглых скобок. Например:</p><pre>100 + 50 / 2;   // результат 125\n(100 + 50) / 2; // результат 75\n</pre><p>Конечно, сложные выражения можно упростить, разбив их на несколько шагов. Например, мы могли бы сохранить результат операции в промежуточную переменную и использовать её на следующем шаге:</p><pre>// Этот код даст тот же результат\nvar totalWaterInGrams = milkInGrams + waterInGrams;\nconsole.log(totalWaterInGrams - 150);\n\n// что и этот\nconsole.log(milkInGrams + waterInGrams - 150);\n</pre><p>Разработчик сам решает, использовать ли сложные выражения из нескольких операций или разбивать решение на несколько шагов, состоящих из простых операций. Но есть золотое правило — чем проще код, тем лучше.</p><p>Давайте попрактикуемся использовать более сложные выражения.</p></div>`,html:``,css:``,hidden:``,js:`var milkInGrams = 50;\n\n`,tasks:[{message:`Посчитайте калорийность завтрака Кекса. Для этого сохраните в переменную <code class='keyvalue'>breakfastCalories</code> результат выражения <code class='keyvalue'>milkInGrams</code> <code class='keyword'>*</code> <code class='keytext'>(42 <code class='keyword'>/</code> 100)</code>`,check:(o)=>o.breakfastCalories===21},{message:`А затем выведите переменную <code class='keyvalue'>breakfastCalories</code> в <code class='keyword'>консоль</code>.`,check:(o)=>o.log&&~o.log.indexOf(21)},{message:`Узнайте, сколько грамм корма Кексу можно съесть на обед и ужин, если его дневная норма <code class='keytext'>500</code> калорий. Для этого сохраните в переменную <code class='keyvalue'>dryFeedInGrams</code> результат выражения <code class='keytext'>(500 <code class='keyword'>-</code> breakfastCalories) <code class='keyword'>/</code> 4</code> (в 1 грамме корма примерно 4 калории).`,check:(o)=>o.dryFeedInGrams===119.75},{message:`Выведите переменную <code class='keyvalue'>dryFeedInGrams</code> в <code class='keyword'>консоль</code>.`,check:(o)=>o.log&&~o.log.indexOf(119.75)}],blocked:`4`,editorOff:`8`},
"lesson996":{theory:`<div><h1>Ещё немного операций</h1><p>У каждого типа данных свои операции. Арифметические операции можно производить с числами, но не со строками.</p><p>Самая важная строковая операция — это «склеивание» строк или <i>конкатенация</i> строк. Например:</p><pre>var name = 'Кекс';\n\n'Инструктор' + 'Кекс';  // результат: 'ИнструкторКекс'\n'Инструктор ' + 'Кекс'; // результат: 'Инструктор Кекс'\n'Инструктор ' + name;   // результат: 'Инструктор Кекс'\n</pre><p>Для склеивания строк используется тот же знак, что и для сложения чисел, — плюс. Как JavaScript понимает, какую операцию применить, сложение или конкатенацию? Он смотрит на тип операндов: если это строки, то они склеиваются, если это числа, то они складываются.</p><p>И тут мы подобрались к сложной теме. Что будет, если операнды разного типа? Например:</p><pre>'Молоко, гр: ' + 50; // результат: 'Молоко, гр: 50'\n'2' * 50;            // результат: 100\n</pre><p>В этом случае JavaScript попытается привести операнды к одному типу и выполнить операцию. Подходящий тип будет выбираться в зависимости от операции.</p><p>Плюс может быть знаком сложения или конкатенации, но так как один из операндов — строка, то сложение не подходит. Поэтому число <code>50</code> приводится к строке <code>'50'</code> и склеивается со строкой <code>'Молоко, гр: '</code>.</p><p>Звёздочка — это знак умножения. Поэтому JavaScript пытается превратить строку <code>'2'</code> в число, и у него это получается. Затем числа <code>2</code> и <code>50</code> перемножаются, и получается <code>100</code>.</p><p>Из-за того, что JavaScript умеет изменять тип операндов на лету, он называется языком с <i>динамическим приведением типов</i>. Конечно, есть много тонкостей и проблем с приведением типов. Мы подробно разберём этот вопрос в дальнейших частях курса. А сейчас условимся, что в наших первых программах проблем с этим не будет, так как программы простые, а пользователи вводят данные аккуратно.</p><p>Вернёмся к конкатенации. Чем же она так хороша? Она позволяет делать сообщения программ более информативными и «человечными». Практикуемся.</p></div>`,html:``,css:``,hidden:``,js:`// Сегодня Кекс позавтракал чуть плотнее\nvar milkInGrams = 60;\n\nvar breakfastCalories = milkInGrams * (42 / 100);\nconsole.log(breakfastCalories);\n\nvar dryFeedInGrams = (500 - breakfastCalories) / 4;\nconsole.log(dryFeedInGrams);\n`,tasks:[{message:`Сделайте вывод в <code class='keyword'>консоль</code> более информативным, склеив переменные со строками-подсказками. Для этого: <p>Внутри первой команды <code>console.log</code> замените <code class='keyvalue'>breakfastCalories</code> на <code class='keytext'>'Босс, в завтраке было '</code> <code class='keyword'>+</code> <code class='keyvalue'>breakfastCalories</code> <code class='keyword'>+</code> <code class='keytext'>' калорий.'</code></p>`,check:(o)=>o.log&&~o.log.indexOf('Босс, в завтраке было 25.2 калорий.')},{message:`Внутри второй команды <code>console.log</code> замените <code class='keyvalue'>dryFeedInGrams</code> на <code class='keytext'>'Вы ещё можете съесть '</code> <code class='keyword'>+</code> <code class='keyvalue'>dryFeedInGrams</code> <code class='keyword'>+</code> <code class='keytext'>' грамм сухого корма.'</code>`,check:(o)=>o.log&&~o.log.indexOf('Вы ещё можете съесть 118.7 грамм сухого корма.')}],blocked:`4`,editorOff:`8`},
"lesson997":{theory:`<div><h1>Релиз Завтракомера v0.1</h1><p>Теперь точно всё! Вы готовы полностью решить третью задачу Кекса. И не просто решить, а сделать программу удобной и понятной. Напоминаем задание:</p><p><b>Третья задача</b>: «Напиши программу для расчёта калорийности завтрака. Завтракаю я молоком. Хочу вводить, сколько я выпил и увидеть калорийность».</p><p>Разложим ход решения по шагам:</p><ol><li>собираем данные о завтраке от Кекса,</li><li>сохраняем эти данные в переменную для дальнейшей обработки,</li><li>выводим сообщение о том, что данные получены, чтобы Кекс не волновался,</li><li>обрабатываем данные с помощью математических операций, в которых используем первую переменную,</li><li>результат обработки сохраняем во вторую переменную,</li><li>выводим сообщение с результатом работы программы.</li></ol><p>Сейчас разберёмся с первыми тремя шагами, а в следующем задании с остальными тремя.</p><p>Работаем вместе: мы придумываем названия переменных, тексты и формулы, вы пишете код.</p></div>`,html:``,css:``,hidden:``,js:`console.log('Завтракомер v0.1 запущен');\n\n`,tasks:[{message:`Объявите переменную <code class='keyvalue'>milkInGrams</code>`,check:()=>~getJ().search(/(var|let)milkInGrams/)},{message:`Сохраните в неё данные из команды <code>keks.ask</code> с вопросом «<code class='keytext'>Босс, сколько грамм молока вы отведали?</code>».`,check:()=>~getJ().search(/milkInGrams=keks\.ask\(('|"|`)Босс,сколькограмммолокавыотведали\?\1\)/)},{message:`Выведите в <code class='keyword'>консоль</code> сообщение, склеенное из трёх фрагментов строки: <code class='keytext'>'Завтракомер получил данные о молоке. Выпито '</code>, переменной <code class='keyvalue'>milkInGrams</code>, строки <code class='keytext'>' грамм.'</code>`,check:()=>~getJ().search(/milkInGrams=\S*console\.log\(('|"|`)Завтракомерполучилданныеомолоке\.Выпито\1\+milkInGrams\+('|"|`)грамм\.\2\)/)}],blocked:`4`,editorOff:`8`},
"lesson998":{theory:`<div><h1>Релиз Завтракомера v0.1, часть 2</h1><p>Хорошо. Осталось обработать данные и вывести результат заказчику.</p><p>Определимся с формулой для расчёта калорийности. Мы знаем, сколько грамм молока выпивает Кекс. Также мы выяснили, что теперь он пьёт более жирное молоко, в 100 граммах которого содержится 50 калорий.</p><p>Чтобы узнать общее количество калорий, нам нужно количество выпитых грамм умножить на количество калорий в одном грамме (а для этого делим 50 на 100). Вот итоговая формула:</p><pre><i>переменнаяСКоличествомГрамм</i> * 50 / 100\n</pre><p>Результат выражения сохраним во вторую переменную и выведем в консоль информативное сообщение. Задача решена, осталось только написать код!</p><p>Теперь вы готовы к написанию программы с нуля без посторонней помощи. Этим вы займётесь в следующем задании. Техническое задание выдаст сам Кекс (заодно вы узнаете, откуда у босса такая страсть к подсчёту калорий). Также он будет лично тестировать вашу программу. И не волнуйтесь, задача достаточно простая.</p><p>И напоследок. Когда вы будете писать код с нуля, вам могут понадобиться вспомогательные переменные. Запомните, что есть несколько правил именования переменных:</p><ul><li>Имена переменных в JavaScript чувствительны к регистру. <code>myname</code> и <code>myName</code> — это две разных переменных.</li><li>Имя переменной должно начинаться с латинской буквы и может содержать только латинские буквы и цифры.</li><li>В качестве имени переменной нельзя использовать специальные ключевые слова, такие как <code>var</code> или <code>if</code>. Вот <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Lexical_grammar#Ключевые_слова" target="_blank" rel="nofollow noopener">полный список</a> этих ключевых слов.</li></ul></div>`,html:``,css:``,hidden:``,js:`console.log('Завтракомер v0.1 запущен');\n\nvar milkInGrams = keks.ask('Босс, сколько грамм молока вы отведали?');\nconsole.log('Завтракомер получил данные о молоке. Выпито ' + milkInGrams + ' грамм.');\n`,tasks:[{message:`Объявите переменную <code class='keyvalue'>breakfastCalories</code>`,check:()=>~getJ().search(/(var|let)breakfastCalories/)},{message:`Сохраните в неё результат, рассчитанный по <code class='keytext'>формуле, описанной в теории</code>.`,check:()=>~getJ().search(/breakfastCalories=(milkInGrams\*50|50\*milkInGrams)\/100/)},{message:`Выведите в <code class='keyword'>консоль</code> сообщение, склеенное из трёх фрагментов: строки <code class='keytext'>'Калорийность завтрака: '</code>, переменной <code class='keyvalue'>breakfastCalories</code>, строки <code class='keytext'>' калорий, босс!'</code>`,check:()=>~getJ().search(/breakfastCalories=\S*console\.log\(('|"|`)Калорийностьзавтрака:\1\+breakfastCalories\+('|"|`)калорий,босс!\2\)/)}],blocked:`4`,editorOff:`8`},
"lesson999":{theory:`<section><h1>Конспект «Знакомство с JavaScript»</h1><h2>Команды</h2><p>Каждая программа – набор команд. В JavaScript команды разделяются точкой с запятой, <code>;</code></p><p>Программа выполняется последовательно, сверху вниз, команда за командой.</p><p>Код внутри комментариев не выполняется. Примеры комментариев:</p><pre>// Эта строка кода не выполнится. Однострочный комментарий.\n\n/*\nВсе эти строки кода не выполнятся.\nЭто многострочный комментарий.\n*/\n</pre><p></p><p>Команду <code>console.log()</code> можно использовать в любом месте программы. Она может выводить числа, строки (их надо заключать в кавычки), результаты каких-то операций.</p><h2>Переменные</h2><p>Переменная — название для данных, которое понятно для людей.</p><p>Переменную можно создать командой <code>var</code>, за которой следует имя переменной. Можно писать название в стиле <code>camelCase</code>:</p><pre>var myNumber;\nvar userName;\n</pre><p>или <code>snake_case</code>:</p><pre>var my_number;\nvar my_name;\n</pre><p></p><p>Имена переменных в JavaScript чувствительны к регистру: <code>myname</code> и <code>myName</code> — две разных переменных.</p><p>Имя переменной должно начинаться с латинской буквы и может содержать только латинские буквы и цифры.</p><p>В качестве имени переменной нельзя использовать специальные ключевые слова, такие как <code>var</code> или <code>if</code>. Вот <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Lexical_grammar#Ключевые_слова" target="_blank" rel="nofollow noopener">полный список</a> этих ключевых слов.</p><p>Команда <code>var</code> для создания каждой переменной используется всего один раз. Дальше обращаемся к переменной по её имени, без <code>var</code>.</p><p>Чтобы присвоить переменной значение, используется знак равенства <code>=</code>.</p><p>После создания переменной её можно использовать в других командах, например, выводить в консоль.</p><p>Если объявленной переменной со значением задать новое значение, оно перетрёт старое значение. Это называется переопределением значения переменной.</p><pre>var milkInGrams = 20;\nconsole.log(milkInGrams);\n// Выведет 20\n\nmilkInGrams = 100;\nconsole.log(milkInGrams);\n// Выведет 100\n</pre><h2>Операции</h2><p>Примеры операций: cложение (+), вычитание (-), умножение (*), деление (/).</p><p>Переменные могут быть частью операций:</p><pre>milkInGrams * 0.5;\n</pre><p>С помощью скобок можно изменять приоритет операций</p><pre>var firstNumber = 100 + 50 / 2;\nvar secondNumber = (100 + 50) / 2;\n</pre><p>Если в операции сложения участвует строка, результат будет приведён к строке:</p><pre>console.log('Молоко, гр: ' + 50);\n// Выведет 'Молоко, гр: 50'\n</pre><p>Сложение строк — конкатенация.</p><br></section>`,html:``,css:``,hidden:``,js:`var firstNumber = keks.getNumber();\nvar secondNumber = keks.getNumber();\n\nconsole.log('Первое число: ' + firstNumber, 'Второе число: ' + secondNumber);\n\nvar middleArifmethic;\n`,tasks:[{message:`Запишите в переменную <code class='keyvalue'>middleArifmethic</code> <code class='keytext'>среднее арифметическое</code> двух чисел - <code class='keyvalue'>firstNumber</code> и <code class='keyvalue'>secondNumber</code>! Результат округляйте с помощью функции <code>Math.round</code>.`,check:(o)=>{Academy.vars.tcl=console.log;console.log=()=>{};var j=Academy.JS.getValue();var x=j.indexOf('var middleArifmethic');f="function z(){"+j+";return [firstNumber, secondNumber, middleArifmethic]};z();";var t;try{t=eval(f);console.log=Academy.vars.tcl}catch(e){console.log=Academy.vars.tcl;return false};return t[2]===Math.round((t[0]+t[1])/2)}}],blocked:`4`,editorOff:`9`},
"lesson1000":{theory:`<div><h1>Первая программа: KeksoFit v0.1</h1><p>Ваша задача — написать фитнес-калькулятор для Кекса. Вот техническое задание, написанное от его лапы:</p><blockquote><p>Мяу! Мне нужно привести себя в форму к выставке CatFashionExpo2018. Для этого мне нужен свой особый фитнес-калькулятор.</p><p>Я ввожу сколько грамм корма я съел и сколько часов поспал накануне, а он строит программу тренировок из:</p><ul><li>прыжков на шкаф (силовая тренировка задних лап),</li><li>подтягиваний на висящей куртке хозяина (силовая тренировка передних лап),</li><li>кругов рысью по комнате (тренировка общей выносливости).</li></ul><p>Вот алгоритм работы калькулятора:</p><pre>Вес корма храним в переменной <i>foodInGrams</i>, а время сна в переменной <i>sleepInHours</i>.\nВ обе переменные будем записывать целые числа.\n\nЗа каждые 10 грамм корма, которые я съел, я получаю 3 прыжка.\nНапример: за 50 грамм корма я должен сделать 15 прыжков.\nПрыжки храним в переменной <i>jumps</i>.\n\nЗа каждый час сна — 2 подтягивания.\nНапример: я поспал 5 часов и должен подтянуться 10 раз.\nПодтягивания храним в переменной <i>pulls</i>.\n\nКаждый прыжок дополняется одним кругом пробежки, а каждое подтягивание — половиной круга.\nНапример: за 15 прыжков и 10 подтягиваний даётся 20 кругов по комнате.\nКруги храним в переменной <i>runs</i>.</pre><p>Значения переменных желательно выводить в консоль.</p></blockquote><p>Считаем количество кругов, если вес корма 300 грамм, а время сна 10 часов.</p><pre>// Сколько в корме частей по 10 грамм\n300 / 10 = 30;\n\n// Количество прыжков\n// За каждые 10 грамм добавляется 3 прыжка\n30 * 3 = 90\n\n// Количество подтягиваний\n// За каждый час сна добавляется 2 подтягивания\n10 * 2 = 20\n\n// Количество кругов за прыжки\n// За каждый прыжок — круг пробежки\n90 * 1 = 90\n\n// Количество кругов за подтягивания\n// За каждое подтягивание — половина круга\n20 / 2 = 10\n\n// Общее число кругов\n90 + 10 = 100\n</pre><p>Это необычное задание. В нём заказчик будет тестировать вашу программу, подставляя разные значения во входные переменные и проверяя рекомендации, которые выдаёт программа. Только когда все тесты пройдут успешно, задание будет выполнено.</p></div>`,html:``,css:``,hidden:``,js:`/**\n * KeksoFit v0.1\n * Author: @keksobot\n * License: CatoFree, NoDogs\n */\n\nvar foodInGrams = 100;\nvar sleepInHours = 15;\n\n`,tasks:[{message:`<button onclick="fH1.a()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p>Вес корма храним в переменной <code class='keyvalue'>foodInGrams</code>, а время сна в переменной <code class='keyvalue'>sleepInHours</code>.</p><p>В обе переменные будем записывать целые числа.</p><p>За каждые <code class='keytext'>10</code> грамм корма, которые я съел, я получаю <code class='keytext'>3</code> прыжка.</p><ul><li>Например: за <code class='keytext'>50</code> грамм корма я должен сделать <code class='keytext'>15</code> прыжков.</li><li>Прыжки храним в переменной <code class='keyvalue'>jumps</code>.</li></ul><p>За каждый час сна — <code class='keytext'>2</code> подтягивания.</p><ul><li>Например: я поспал <code class='keytext'>5</code> часов и должен подтянуться <code class='keytext'>10</code> раз.</li><li>Подтягивания храним в переменной <code class='keyvalue'>pulls</code>.</li></ul><p>Каждый прыжок дополняется <code class='keytext'>одним</code> кругом пробежки, а каждое подтягивание — <code class='keytext'>половиной</code> круга.</p><ul><li>Например: <code class='keytext'>20</code> кругов по комнате даётся за <code class='keytext'>15</code> прыжков и <code class='keytext'>10</code> подтягиваний.</li><li>Круги храним в переменной <code class='keyvalue'>runs</code>.</li></ul></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1001":{theory:`<div><h1>Конвертер валют</h1><p>Кекс готов ехать на CatFashionExpo Worldwide 2018, которая в этот раз проводится в Милуоки (штат Висконсин). Он изучил цены и понял, что для комфортной поездки нужно <code>500</code> евро (на всякий случай) и <code>2500</code> баксов. Но у Кекса есть только рубли.</p><blockquote><p>Напиши программу, которая посчитает сколько <b>всего</b> рублей мне понадобится на поездку.</p><p>Курсы валют указаны в переменных <code>euroRate</code> и <code>dollarRate</code>.</p><p>Переменные <code>euroAmount</code> и <code>dollarAmount</code> — необходимые суммы на поездку.</p><p>Создай переменную <code>rublesAmount</code> и записывай в неё результат вычислений.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var euroRate = 74;\nvar dollarRate = 63;\n\nvar euroAmount = 500;\nvar dollarAmount = 2500;\n\n`,tasks:[{message:`<button onclick="fH1.b()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p>Напиши программу, которая посчитает сколько всего рублей понадобится на поездку.</p><p>Курсы валют указаны в переменных <code class='keyvalue'>euroRate</code> и <code class='keyvalue'>dollarRate</code>.</p><p>Переменные <code class='keyvalue'>euroAmount</code> и <code class='keyvalue'>dollarAmount</code> — необходимые суммы на поездку.</p><p>Создай переменную <code class='keyvalue'>rublesAmount</code> и записывай в неё результат вычислений.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1002":{theory:`<div><h1>Считаем долги</h1><p>Кекс понял, сколько денег нужно, чтобы поехать на CatFashionExpo Worldwide 2018. Но столько денег у него нет. Зато у Кекса есть друг, который может дать денег на неограниченный срок (<i>друг же всё-таки</i>). Но вернуть надо будет в два раза больше денег (<i>дружба дружбой, а денежкам счёт</i>).</p><blockquote><p>Мяу! Напиши программу, которая посчитает, сколько в итоге денег я буду должен отдать после поездки.</p><p>Я могу занять необходимую сумму, но буду должен вернуть в <b>два раза</b> больше, чем взял.</p><p>В переменной <code>travelCost</code> хранится сумма необходимая на поездку.</p><p>В переменной <code>balance</code> находится сумма, которая есть у меня сейчас.</p><p>Узнай, сколько я буду должен отдать своему другу, и запиши результат в переменную <code>debtAmount</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var travelCost = 150000;\nvar balance = 100000;\n\n`,tasks:[{message:`<button onclick="fH1.c()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p>Напиши программу, которая посчитает, сколько в итоге денег я буду должен отдать после поездки.</p><p>Я могу занять необходимую сумму, но буду должен вернуть в <code class='keytext'>два</code> раза больше, чем взял.</p><p>В переменной <code class='keyvalue'>travelCost</code> сумма необходимая на поездку.</p><p>В переменной <code class='keyvalue'>balance</code> находится сумма, которая есть у меня сейчас.</p><p>Узнай, сколько я буду должен отдать своему другу, и запиши результат в переменную <code class='keyvalue'>debtAmount</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1003":{theory:`<div><h1>Быстрее всех</h1><p>Кекс готов лететь на CatFashionExpo Worldwide 2018, осталась одна задача — выбрать каким рейсом лететь. Кекс не любит летать на самолётах, поэтому, чем быстрее рейс прилетит, тем лучше.</p><blockquote><p>Мяу! Посчитай сколько времени займёт мой перелёт.</p><p>В переменную <code>flightDistance</code> записано расстояние полёта в километрах.</p><p>В переменной <code>averageSpeed</code> находится средняя скорость самолёта (километры в час).</p><p>Найди время полёта (в часах) и запиши его в переменную <code>flightTime</code>.</p><p>Округляй результат вычислений с помощью команды <code>Math.round</code>.</p></blockquote><p>Команда округления <code>Math.round</code> округляет дробное число к ближайшему целому числу. Записывается это так:</p><pre>Math.round(40.15); // Вернёт 40\nMath.round(12.75); // Вернёт 13\n\n// Можно использовать переменные\nvar number = 23.055555;\nMath.round(number); // Вернёт 23\n</pre><p>Всё как в математике. Если после точки число <i>меньше</i> <code>5</code>, то дробная часть отбрасывается и остаётся неизменная целая часть. А если число после точки <i>больше или равно</i> <code>5</code>, то дробная часть убирается, а целое число увеличивается на <code>1</code>.</p></div>`,html:``,css:``,hidden:``,js:`var flightDistance = 7260;\nvar averageSpeed = 600;\n\n`,tasks:[{message:`<button onclick="fH1.d()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Посчитай сколько времени займёт мой перелёт.</p><p>В переменную <code class='keyvalue'>flightDistance</code> записано расстояние полёта в километрах.</p><p>В переменной <code class='keyvalue'>averageSpeed</code> находится средняя скорость самолёта (километры в час).</p><p>Найди время полёта (в часах) и запиши его в переменную <code class='keyvalue'>flightTime</code>.</p><p>Округляй результат вычислений с помощью команды <code>Math.round</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1004":{theory:`<div><h1>Путешествие продолжается</h1><p>Кекс прилетел в Висконсин, но самолёт приземлился далеко не в Милуоки, куда нужно Кексу, а в Мадисоне. Теперь Кексу предстоит долгий трансфер до своей гостиницы в другой город. А тут ещё эти мили...</p><p>Можно было бы использовать программу для расчёта времени полёта, но она работала с расстоянием в километрах и считала время полёта в часах. В Штатах все расстояния в милях, поэтому нужно модифицировать программу, чтобы она переводила мили в километры и рассчитывала время дороги в часах.</p><blockquote><p>Мяу! Выручай! Мне нужно посчитать, каким способом я доберусь быстрее всего.</p><p>Средняя скорость транспорта находится в переменной <code>averageSpeed</code> и записана в километрах в час.</p><p>Расстояние записано в переменную <code>routeDistance</code> и указано в милях. Поэтому сначала нужно перевести его в километры.</p><p>В одной миле содержится <code>1.6</code> километров.</p><p>Посчитай сколько времени займёт поездка и запиши результат в переменную <code>routeTime</code>.</p><p>Округляй результат с помощью <code>Math.round</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var routeDistance = 78;\nvar averageSpeed = 80;\n\n`,tasks:[{message:`<button onclick="fH1.e()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Выручай! Мне нужно посчитать, каким способом я доберусь быстрее всего.</p><p>Средняя скорость транспорта находится в переменной <code class='keyvalue'>averageSpeed</code> и записана в километрах в час.</p><p>Расстояние записано в переменную <code class='keyvalue'>routeDistance</code> и указано в милях. Поэтому сначала нужно перевести его в километры.</p><p>В одной миле содержится <code class='keytext'>1.6</code> километров.</p><p>Посчитай сколько времени займёт поездка и запиши результат в переменную <code class='keyvalue'>routeTime</code>.</p><p>Округляй результат с помощью <code>Math.round</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1005":{theory:`<div><h1>Жара в Висконсине</h1><p>Кекс добрался до Милуоки и теперь у него есть ещё неделя до начала мероприятия, чтобы привести себя в надлежащую форму. Кекс тренируется с умом по особой программе, учитывая температуру воздуха. Есть одна проблема — на всех градусниках температура указана по Фаренгейту, а Кекс привык к температуре по Цельсию.</p><blockquote><p>Мяу! Напиши программу, которая будет переводить градусы Фаренгейта в температуру по Цельсию.</p><p>В переменной <code>farenheitTemperature</code> указаны градусы по Фаренгейту.</p><p>Формула расчёта выглядит так: <code>Tc = 5/9 * (Tf - 32)</code>.</p><p>Результат вычислений запиши в переменную <code>celsiusTemperature</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var farenheitTemperature = 77;\n\n`,tasks:[{message:`<button onclick="fH1.f()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Напиши программу, которая будет переводить градусы Фаренгейта в температуру по Цельсию.</p><p>В переменной <code class='keyvalue'>farenheitTemperature</code> указаны градусы по Фаренгейту.</p><p>Формула расчёта выглядит так: <code>Tc</code> <code class='keyword'>=</code> <code class='keytext'>5<code class='keyword'>/</code>9 <code class='keyword'>*</code> (Tf <code class='keyword'>-</code> 32)</code>.</p><p>Результат вычислений запиши в переменную <code class='keyvalue'>celsiusTemperature</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1006":{theory:`<div><h1>Контроль показателей — ключ к победе!</h1><p>Чтобы хорошо выступить на мероприятии, Кексу нужно держать под контролем индекс массы тела (ИМТ) и процент жира в организме. ИМТ легко найти по формуле, зная длину кота и рост. Эти показатели Кексу известны. А вот с процентом жира чуть сложнее — массу жира Кекс может узнать с помощью весов в номере, в них встроен биоимпендансометр. Но весы дешёвенькие, поэтому считать процент всё равно придётся самостоятельно.</p><blockquote><p>Мяу! Помоги мне посчитать ИМТ и процент жира в организме.</p><p>Моя длина записана в переменную <code>length</code> и указана в метрах.</p><p>Вес указан в килограммах и хранится в переменной <code>weight</code>.</p><p>Рассчитывай ИМТ по формуле: <code>i = масса / длина ^ 2</code> (вес делить на длину в квадрате). Результат округляй с помощью <code>Math.round</code> и записывай в переменную <code>bodyMassIndex</code>.</p><p>Масса жира записана в переменную <code>fatMass</code> и указана в килограммах.</p><p>Чтобы найти процент жира, дели массу жировой ткани на вес. Результат умножай на <code>100</code>, чтобы получить процент, округляй с помощью <code>Math.round</code> и записывай в переменную <code>fatPercent</code>.</p></blockquote><p>В формуле <code>i = масса / длина ^ 2</code> символ <code>^</code> обозначает возведение в степень. Такое обозначение используется в некоторых языках программирования и компьютерной алгебре. Этот символ <b>не используется</b> в JavaScript. Вы можете заменить его обычным умножением, как в математике.</p><pre>6 ^ 2 = 6 * 6 = 36;\n// 6 во второй степени\n\n2 ^ 3 = 2 * 2 * 2 = 8;\n// 2 в третьей степени\n</pre></div>`,html:``,css:``,hidden:``,js:`var length = 0.55;\nvar weight = 5;\nvar fatMass = 0.8;\n\n`,tasks:[{message:`<button onclick="fH1.g()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Помоги мне посчитать ИМТ и процент жира в организме.</p><p>Моя длина записана в переменную <code class='keyvalue'>length</code> и указана в метрах.</p><p>Вес указан в килограммах и хранится в переменной <code class='keyvalue'>weight</code>.</p><p>Рассчитывай ИМТ по формуле: <code>i</code> <code class='keyword'>=</code> <code class='keytext'>масса <code class='keyword'>/</code> длина <code class='keyword'>^</code> 2</code> (вес делить на длину в квадрате). Результат округляй с помощью <code>Math.round</code> и записывай в переменную <code class='keyvalue'>bodyMassIndex</code>.</p><p>Масса жира записана в переменную <code class='keyvalue'>fatMass</code> и указана в килограммах.</p><p>Чтобы найти процент жира, дели массу жировой ткани на вес. Результат умножай на <code class='keytext'>100</code>, чтобы получить процент, округляй с помощью <code>Math.round</code> и записывай в переменную <code class='keyvalue'>fatPercent</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1007":{theory:`<div><h1>Пробежки по треугольному парку</h1><p>Кекс начал бегать, чтобы лучше подготовиться к выставке. Для эффективной тренировки надо знать длину дорожки в парке. Оказалось, что она повторяет по форме прямоугольный треугольник. Кекс замерил длины катетов, а вот измерять гипотенузу ему стало лень. Да и зачем, если у Кекса есть помощник, который может написать программу расчёта длины дорожки. Надо только найти длину гипотенузы и посчитать периметр треугольника.</p><blockquote><p>Мяу! Напиши программу, которая находит периметр треугольника через катеты.</p><p>Длины катетов указаны в метрах и хранятся в переменных <code>firstLeg</code> и <code>secondLeg</code>.</p><p>Найди гипотенузу по формуле <code>a = sqrt(b^2 + c^2)</code> и запиши результат в переменную <code>hypotenuse</code>. Для того, чтобы найти квадратный корень числа, используй <code>Math.sqrt()</code>. Результат округляй с помощью <code>Math.round()</code>.</p><p>Найди периметр треугольника, сложив длины катетов и гипотенузы. Результат запиши в переменную <code>perimeter</code>.</p></blockquote><p>Команда <code>Math.sqrt()</code> возвращает квадратный корень числа. Это то же самое, что знакомый вам знак квадратного корня из математики — √:</p><pre>Math.sqrt(9);  // Вернёт 3\nMath.sqrt(64); // Вернёт 8\nMath.sqrt(1);  // Вернёт 1\n</pre></div>`,html:``,css:``,hidden:``,js:`var firstLeg = 300;\nvar secondLeg = 700;\n\n`,tasks:[{message:`<button onclick="fH1.h()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Напиши программу, которая находит периметр треугольника через катеты.</p><p>Длины катетов указаны в метрах и хранятся в переменных <code class='keyvalue'>firstLeg</code> и <code class='keyvalue'>secondLeg</code>.</p><p>Найди гипотенузу по формуле <code>a</code> =</code> <code>sqrt(<code class='keytext'>b<code class='keyword'>^</code>2 <code class='keyword'>+</code> c<code class='keyword'>^</code>2</code>)</code> и запиши результат в переменную <code class='keyvalue'>hypotenuse</code>. Для того, чтобы найти квадратный корень числа, используй <code>Math.sqrt()</code>. Результат округляй с помощью <code>Math.round()</code>.</p><p>Найди периметр треугольника, сложив длины катетов и гипотенузы. Результат запиши в переменную <code class='keyvalue'>perimeter</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1008":{theory:`<div><h1>Эффективная ЧСС</h1><p>Чтобы тренироваться эффективно, надо знать свою ЧСС (частота сердечных сокращений). Формул подсчёта очень много, одна из самых точных — формула Карвонена. Именно по ней Кекс хочет рассчитать свою ЧСС.</p><blockquote><p>Мяу! Мне нужна программа, которая вычислит мою ЧСС для тренировок. Формула такая: <code>ЧСС во время тренировки = (максимальная ЧСС — ЧСС в покое) * интенсивность + ЧСС в покое</code>.</p><p>Максимальная ЧСС рассчитывается так: <code>220 – возраст</code>. Возраст записан в переменную <code>age</code>.</p><p>ЧСС в покое хранится в переменной <code>pulseAtRest</code>, а интенсивность записана в процентах и хранится в переменной <code>intensity</code>.</p><p>Найди ЧСС для тренировки и запиши результат в переменную <code>pulseAtWorkout</code>. Результат округляй с помощью <code>Math.round()</code>. И не забудь перевести проценты интенсивности в дробное число.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var age = 5;\nvar pulseAtRest = 90;\nvar intensity = 75;\n\n`,tasks:[{message:`<button onclick="fH1.i()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Мне нужна программа, которая вычислит мою ЧСС для тренировок. Формула такая: <code class='keytext'>ЧСС во время тренировки <code class='keyword'>=</code> (максимальная ЧСС <code class='keyword'>-</code> ЧСС в покое) <code class='keyword'>*</code> интенсивность <code class='keyword'>+</code> ЧСС в покое</code>.</p><p>Максимальная ЧСС рассчитывается так: <code class='keytext'>220 <code class='keyword'>–</code> возраст</code>. Возраст записан в переменную <code class='keyvalue'>age</code>.</p><p>ЧСС в покое хранится в переменной <code class='keyvalue'>pulseAtRest</code>, а интенсивность записана в процентах и хранится в переменной <code class='keyvalue'>intensity</code>.</p><p>Найди ЧСС для тренировки и запиши результат в переменную <code class='keyvalue'>pulseAtWorkout</code>. Результат округляй с помощью <code>Math.round()</code>. И не забудь перевести проценты интенсивности в <code class='keytext'>дробное</code> число.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`},
"lesson1009":{theory:`<div><h1>Кубики куются на кухне</h1><p>Программа тренировок разработана, но надо подумать и о питании. Вы же знаете, что здоровье и стройность зависят не только от тренировок? Кекс это знает наверняка и хочет подсчитать норму КБЖУ (калории, белки, жиры, углеводы) для себя. Способов подсчёта очень много, но Кексу нравится формула Харриса-Бенедикта. Её и возьмём.</p><blockquote><p>Мяу! Мне нужно рассчитать КБЖУ. Для этого в первую очередь надо посчитать уровень метаболизма: <code>88.362 + (13.397 * вес в кг) + (4.799 * длина в см) — (5.677 * возраст в годах)</code>.</p><p>Мой вес в килограммах хранится в переменной <code>weight</code>, длина в сантиметрах записана в переменную <code>length</code>, возраст в годах находится в переменной <code>age</code>.</p><p>Норма калорий рассчитывается так: <code>уровень метаболизма * коэффициент двигательной активности</code>. Коэффициент записан в переменную <code>activityRate</code>. Посчитай норму калорий и запиши в переменную <code>calorieRate</code>.</p><p>Калорийность складывается из белков, жиров и углеводов. В моей диете белки должны составлять 40% от всей калорийности. Найди их и запиши в переменную <code>proteins</code>.</p><p>Жиры запиши в переменную <code>fats</code>, они должны составлять 25% от всех калорий.</p><p>А углеводы запиши в переменную <code>carbohydrates</code>, они составляют 35%.</p><p><b>Каждое</b> из значений (<b>калории</b>, <b>белки</b>, <b>жиры</b> и <b>углеводы</b>) округли с помощью <code>Math.round</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var weight = 5;\nvar length = 60;\nvar age = 5;\nvar activityRate = 1.725;\n\n`,tasks:[{message:`<button onclick="fH1.j()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Мне нужно рассчитать КБЖУ. Для этого в первую очередь надо посчитать уровень метаболизма: <code class='keytext'>88.362 <code class='keyword'>+</code> (13.397 <code class='keyword'>*</code> вес в кг) <code class='keyword'>+</code> (4.799 <code class='keyword'>*</code> длина в см) <code class='keyword'>-</code> (5.677 <code class='keyword'>*</code> возраст в годах)</code>.</p><p>Мой вес в килограммах хранится в переменной <code class='keyvalue'>weight</code>, длина в сантиметрах записана в переменную <code class='keyvalue'>length</code>, возраст в годах находится в переменной <code class='keyvalue'>age</code>.</p><p>Норма калорий рассчитывается так: <code class='keytext'>уровень метаболизма <code class='keyword'>*</code> коэффициент двигательной активности</code>. Коэффициент записан в переменную <code class='keyvalue'>activityRate</code>. Посчитай норму калорий и запиши результат в переменную <code class='keyvalue'>calorieRate</code>.</p><p>Калорийность складывается из белков, жиров и углеводов. В моей диете белки должны составлять <code class='keytext'>40</code>% от всей калорийности. Найди их и запиши в переменную <code class='keyvalue'>proteins</code>.</p><p>Жиры запиши в переменную <code class='keyvalue'>fats</code>, они должны составлять <code class='keytext'>25</code>% от всех калорий.</p><p>А углеводы запиши в переменную <code class='keyvalue'>carbohydrates</code>, они составляют <code class='keytext'>35</code>%.</p><p>Каждое из значений (калории, белки, жиры и углеводы) округли с помощью <code>Math.round</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:`4`,editorOff:`8`}};
hL();