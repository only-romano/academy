fH1=()=>{var a=document.querySelector('#view-after');if(!a)return getR();var e=a.getElementsByTagName('h1');if(!e||e.length!==1||e[0].textContent!=="Введение"||e[0].classList.contains('cite'))return getR();e=a.getElementsByTagName('h2');if(!e||e.length!==2||e[0].textContent!=="Глава 1"||e[0].classList.contains('cite')||e[1].textContent!=="Глава 2"||e[1].classList.contains('cite'))return getR();e=a.getElementsByTagName('p');if(!e||e.length!==4||e[0].textContent!=="В этом пособии изучается работа с HTML и CSS."||e[0].classList.contains('cite')||e[1].textContent!=="Работа с HTML, знакомство с тегами и атрибутами тегов."||e[1].classList.contains('cite')||e[2].textContent!=="Работа с CSS, знакомство с селекторами и свойствами."||e[2].classList.contains('cite')||e[3].textContent!=="Самое лучшее онлайн-пособие"||!e[3].classList.contains('cite'))return getR();getR(true);return};
LessonsData={
"lesson1":{theory:`<div><h1>Поехали!</h1><p>Наша академия посвящена изучению искусства по созданию веб-страниц. Веб-страницы (или HTML-страницы) — это простейшие кирпичики, из которых состоят все сайты, а значит, весь Интернет.</p><p>Для создания веб-страниц используются языки HTML и CSS. HTML отвечает за структуру и содержание страницы, CSS — за внешний вид.</p><p>Мы будем развивать ваши умения владения HTML и CSS. Начнём с простейших вещей, а затем доведём ваши навыки до совершенства с помощью сложнейших испытаний.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Поехали!</title>\n</head>\n<body>\n  <h1>Заголовок</h1>\n  <p>Язык HTML достаточно простой. Сначала может показаться, что в нём слишком много тегов. Но не волнуйтесь. Мы постепенно познакомимся с ними на практике. А на практике всё запоминается легко.</p>\n  <p>Посмотрите на нижнюю часть мини-браузера, там вы увидите окошко с задачами, которые нужно выполнить, чтобы пройти задание.</p>\n  <p>Измените строку <code>Заголовок</code> на <code>Поехали!</code> внутри <code>h1</code>. Если вы всё сделали правильно, то появится кнопка перехода к следующему заданию.</p>\n</body>\n</html>`,css:``,hidden:``,js:``,tasks:[{message:"Измените в <code class='keytext'>7</code> строке код <code class='keyword'>&lt;h1&gt;</code><code class='keytext'>Заголовок</code><code class='keyword'>&lt;/h1&gt;</code> на <code class='keyword'>&lt;h1&gt;</code><code class='keytext'>Поехали!</code><code class='keyword'>&lt;/h1&gt;</code>",check:()=>document.querySelector('#view-after h1').textContent==='Поехали!'}],blocked:"6",editorOff:"6"},
"lesson2":{theory:`<div><h1>CSS в действии</h1><p>Как уже говорилось, при создании веб-страниц используются два языка: HTML и CSS. HTML отвечает за структуру и содержание, а CSS — за оформление. Браузер объединяет HTML- и CSS-код и формирует внешний вид страницы.</p><p>В прошлом задании вы изменяли код в HTML-редакторе и убедились, что при этом меняется содержание страницы.</p><p>В этом задании вы поработаете с CSS-редактором и увидите, как с помощью нескольких строк кода можно изменить оформление страницы.</p><p>Сейчас мы не будем углубляться в значение каждого CSS-свойства. А просто посмотрим на CSS в действии! Чтобы включить CSS-код, нужно будет удалить символы комментариев, которые «выключают» его.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>CSS в действии</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>CSS</h1>\n  <p>CSS ещё проще, чем HTML. Он состоит из множества правил, примерно таких:</p>\n  <pre><code>  селектор {\n    свойство1: <em>значение1</em>;\n    свойство2: <em>значение2</em>;\n}</code></pre>\n  <p>Правила очень простые. Но есть одна проблема: свойств <em>очень</em> много.</p>\n  <p>Большая часть курса будет посвящена именно CSS.</p>\n  <p>А сейчас поработайте с нижним редактором.</p>\n</body>\n</html>\n`,css:`/*\nbody {\n    padding: 0 20px;\n\n    font-size: 16px;\n    font-family: "Arial", sans-serif;\n}\n\nh1 {\n    color: #618ad2;\n    text-shadow: 2px 2px 0 #cccccc;\n}\n\npre {\n    padding: 10px;\n\n    font-size: 14px;\n    line-height: 20px;\n\n    background-color: #f5f5f5;\n    border: 1px solid #cccccc;\n    border-radius: 3px;\n}\n\nem {\n    color: #618ad2;\n}\n`,hidden:``,js:``,tasks:[{message:"Удалите символы <code class='keytext'>/*</code> в первой строке <code class='keyclass'>CSS-редактора</code> и посмотрите, как преобразится текст страницы.",check:()=>{var c=Academy.CSS.getValue();return !~c.indexOf('/')&&!~c.indexOf('*')}}],blocked:"3",editorOff:"3"},
"lesson3":{theory:`<div><h1>Закрепление</h1><p>Первые задания были самыми простыми. Дальше придётся выполнять более сложные требования. Например, добавлять или удалять определённые теги или их атрибуты.</p><p>Чтобы выполнить это задание, нужно отредактировать подготовленный код. Попробуйте сами разобраться для чего предназначены теги и свойства в примере. Если не получится, то загляните в подсказку.</p><div class="theory-hint"><p><code>&lt;h1&gt;</code> обозначает заголовок первого уровня.</p><p><code>&lt;p&gt;</code> обозначает абзац.</p><p>Для увеличения шрифта заголовков нужно изменить только это правило в CSS:</p><pre>h1 {\n  font-size: 20px;\n}</pre></div></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Закрепление</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Структура HTML</h1>\n  <p>Язык HTML состоит из множества тегов. Каждый тег имеет определённый смысл и предназначение.</p>\n  <p>Каждый тег может иметь определённый набор атрибутов.</p>\n  <h1>Структура CSS</h1>\n  <p>CSS состоит из селекторов и свойств.</p>\n  <p>Селекторы описывают какие именно элементы или группы элементов будут обладать заданными свойствами.</p>\n</body>\n</html>\n`,css:`/* Это правило задаёт общий размер шрифта */\nbody {\n    font-size: 16px;\n}\n\n/* Это правило — размер для заголовков первого уровня */\nh1 {\n    font-size: 20px;\n}\n\n/* А это — тень для заголовков первого уровня */\nh1 {\n    text-shadow: 2px 2px 0 #cccccc;\n}\n`,hidden:``,js:``,tasks:[{message:"Потренируйтесь изменять код в редакторах. Смотрите, как при этом страница изменяется в браузере. В конец текста добавьте <code class='keytext'>заголовок первого уровня</code> с содержанием <code class='keytext'>Потренировался</code>",check:()=>{var h=document.querySelectorAll('#view-after h1');return h.length>=3&&h[2].textContent==='Потренировался'}},{message:"После него добавьте <code class='keytext'>абзац</code> с текстом <code class='keytext'>Пора двигаться дальше</code>",check:()=>{var p=document.querySelectorAll('#view-after p');return p.length>=5&&p[4].textContent==='Пора двигаться дальше'}},{message:"Увеличьте <code class='keytext'>размер шрифта</code> заголовков до <code class='keyvalue'>32px</code>",check:()=>getComputedStyle(document.querySelector('#view-after h1')).fontSize=="32px"}],blocked:"3",editorOff:"3"},
"lesson4":{theory:`<div><h1>Азы HTML</h1><p>В первых заданиях вы познакомились с обучающими инструментами, а теперь мы приступаем к знакомству с HTML.</p><p>Язык HTML состоит из тегов. Теги — это те самые кирпичики, из которых построена каждая веб-страница.</p><p>Каждый тег начинается с символа <code>&lt;</code> и заканчивается символом <code>&gt;</code>, например: <code>&lt;p&gt;</code>.</p><p>Все теги можно разделить на парные и одиночные. Каждый парный тег состоит из двух частей: открывающего тега и закрывающего. Внутри закрывающего тега используется символ <code>/</code>.</p><p>Вот пример парного тега:</p><pre><code>&lt;p&gt;Абзац&lt;/p&gt;</code></pre><p>Как вы видите, у тега <code>&lt;p&gt;</code> есть пара в виде закрывающего тега <code>&lt;/p&gt;</code>.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Азы HTML</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n\n  Типы тегов\n\n  Каждый HTML-тег имеет свой смысл и назначение.\n\n  Часть тегов служебные и их никогда не видно на странице.\n\n  Другие теги используются для форматирования текста и их влияние весьма заметно.\n\n  Например, если обернуть текст в тег h1, то он станет крупнее и вокруг него появятся отступы, так как h1 — это заголовок.\n\n</body>\n</html>\n`,css:`/* Так можно указывать шрифт для всего документа */\nbody {\n    font-family: "Georgia", serif;\n}\n`,hidden:``,js:``,tasks:[{message:"Потренируйтесь использовать <code class='keytext'>парные теги</code>. Размечайте с их помощью неотформатированный текст в редакторе и наблюдайте за изменениями в браузере. Оберните в <code class='keyword'>h1</code> заголовок <code class='keytext'>Типы тегов</code>",check:()=>{var h=document.querySelector('#view-after h1');return h&&h.textContent==='Типы тегов'}},{message:"Оберните в отдельный тег <code class='keyword'>p</code> каждое предложение после <code class='keytext'>заголовка</code>",check:()=>{var p=document.querySelectorAll('#view-after p');if(p.length===4){return p[0].innerText=='Каждый HTML-тег имеет свой смысл и назначение.'&&p[1].innerText=='Часть тегов служебные и их никогда не видно на странице.'&&p[2].innerText=='Другие теги используются для форматирования текста и их влияние весьма заметно.'&&p[3].innerText=='Например, если обернуть текст в тег h1, то он станет крупнее и вокруг него появятся отступы, так как h1 — это заголовок.'}}},{message:"Оберните одно любое слово в тег <code class='keyword'>em</code>",check:()=>document.querySelector('#view-after em')},{message:"Оберните одно любое слово в тег <code class='keyword'>strong</code>",check:()=>document.querySelector('#view-after strong')}],blocked:"3",editorOff:"3"},
"lesson5":{theory:`<div><h1>Одиночные HTML-теги</h1><p>С некоторыми парными тегами мы познакомились. А что же за одиночные теги?</p><p>Парные теги обычно нужны, чтобы оформить некоторый участок текста. Благодаря паре тегов вы можете указать начало и конец этого участка. Но ведь есть теги, которые не предназначены для оформления фрагментов текста.</p><p>Например, тег для вставки изображения или тег для вставки разделительной полосы. Такие теги добавляют на страницу одиночный объект, и им не нужно для этого заключать в себя какой-то текст. Поэтому их называют одиночными.</p><p>Примеры таких тегов: <code>&lt;br&gt;</code>, <code>&lt;hr&gt;</code>, <code>&lt;img&gt;</code>.</p><p>Кстати, в HTML-редакторе вы увидите такие фрагменты кода: <code>&lt;!-- текст --&gt;</code>. Они называются «комментарии», и браузер не отображает их на странице.</p>Раньше одиночные теги писались с закрывающим слешом перед закрывающей скобкой. Например: <code>&lt;br /&gt;</code>.<br>В стандарте HTML5 использование закрывающего слеша в одиночных тегах необязательно.</div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Одиночные HTML-теги</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Инструктор Кекс</h1>\n  <p>В последующих курсах вам будет часто помогать с освоением тонкостей HTML и CSS инструктор Кексик. Дадим же ему возможность представиться:</p>\n  <!-- Изображение -->\n  <!-- Разделитель -->\n  <blockquote>\n    <p>Привет! Меня зовут Кекс и я ваш будущий инструктор. Я веб-разработчик и живу в Санкт-Петербурге. Мои самые известные проекты:<!-- Перенос -->\n      блог Cat Energy,<!-- Перенос -->\n      курс про ссылки и изображения в HTML Academy,<!-- Перенос -->\n      курс про HTML5 там же.</p>\n    <p>До встречи в последующих курсах!</p>\n  </blockquote>\n</body>\n</html>\n`,css:`body {\n    font-family: "Georgia", serif;\n}\n\n/* Пример оформления цитаты */\nblockquote {\n    margin: 1.5em 0;\n    padding: 0.5em 15px;\n\n    line-height: 1.5;\n\n    background-color: #f9f9f9;\n    border-left: 2px solid #cccccc;\n}\n`,hidden:``,js:``,tasks:[{message:"Потренируйтесь использовать <code class='keytext'>одиночные теги</code>, чтобы оформить карточку инструктора. Вместо текста <code class='keytext'>&lt;!-- Изображение --></code> вставьте тег <code class='keyword'>&lt;img></code> (сама картинка появится в следующем задании)",check:()=>{var i=document.querySelector('#view-after img');if(!i||!i.tagName.toLowerCase()==='img')return false;var n=i.nextElementSibling;var p=i.previousElementSibling;return n&&(n.tagName.toLowerCase()==='blockquote'||n.tagName.toLowerCase()==='hr')&&p&&p.tagName.toLowerCase()==='p'}},{message:"Вместо <code class='keytext'>&lt;!-- Разделитель --></code> вставьте тег <code class='keyword'>&lt;hr></code>",check:()=>{var i=document.querySelector('#view-after hr');if(!i||!i.tagName.toLowerCase()==='hr')return false;var n=i.nextElementSibling;var p=i.previousElementSibling;return n&&n.tagName.toLowerCase()==='blockquote'&&p&&(p.tagName.toLowerCase()==='p'||p.tagName.toLowerCase()==='img')}},{message:"Вместо надписей <code class='keytext'>&lt;!-- Перенос --></code> вставьте теги <code class='keyword'>&lt;br></code>",check:()=>{var e=document.querySelector('#view-after  blockquote p');return e&&~e.innerHTML.search(/самые известные проекты:(.|\n)*<br\s?\/?>(.|\n)*Energy,(.|\n)*<br\s?\/?>(.|\n)*курс про ссылки(.|\n)*Academy,(.|\n)*<br\s?\/?>(.|\n)*курс про HTML5/)}}],blocked:"3",editorOff:"3"},
"lesson6":{theory:`<div><h1>Атрибуты HTML-тегов</h1><p>В предыдущем задании, как вы заметили, после вставки в код тега <code>&lt;img&gt;</code> ничего не произошло. Почему же так вышло?</p><p>Теги могут иметь атрибуты. Некоторые теги есть смысл использовать только с атрибутами. Наиболее яркий пример — тег <code>&lt;img&gt;</code>, обозначающий изображение. Для него обязательно нужно указывать атрибут <code>src</code>, который задаёт адрес картинки (иначе браузер не сможет загрузить её).</p><p>В общем случае тег записывается следующим образом:</p><pre><code>&lt;имя-тега атрибут1="значение1" атрибут2="значение2" …&gt;</code></pre><p>Атрибутов может быть несколько, вот примеры:</p><pre><code>&lt;p class="important"&gt;…&lt;/p&gt;\n&lt;a class="external" href="https://htmlacademy.ru"&gt;…&lt;/a&gt;\n&lt;img class="avatar" src="keks.png"&gt;</code></pre><p>В этом задании вы потренируетесь использовать атрибуты тегов.</p>Не забудьте пробелы между названием тега и атрибутом и между атрибутами.</div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Атрибуты HTML-тегов</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Инструктор Кекс</h1>\n  <p>В последующих курсах вам будет часто помогать с освоением тонкостей HTML и CSS инструктор Кексик. Дадим же ему возможность представиться:</p>\n  <img>\n  <hr>\n  <blockquote>\n    <p>Привет! Меня зовут Кекс и я ваш будущий инструктор. Я веб-разработчик и живу в Санкт-Петербурге. Мои самые известные проекты:<br>\n      блог Cat Energy,<br>\n      курс про ссылки и изображения в HTML Academy,<br>\n      курс про HTML5 там же.</p>\n    <p>До встречи в последующих курсах!</p>\n  </blockquote>\n</body>\n</html>\n`,css:`body {\n    font-family: "Georgia", serif;\n}\n\nblockquote {\n    margin: 1.5em 0;\n    padding: 0.5em 15px;\n\n    line-height: 1.5;\n\n    background-color: #f9f9f9;\n    border-left: 2px solid #cccccc;\n}\n\n/* Пример оформления фотографии */\n\n.photocard {\n    display: block;\n    width: 300px;\n    margin: 20px auto;\n\n    border-radius: 10px;\n    box-shadow: 0 0 5px #666666;\n}\n`,hidden:``,js:``,tasks:[{message:"К тегу <code class='keyword'>img</code> добавьте атрибут <code class='keyvalue'>src</code> со значением <code class='keyclass'>'images/courses/1/keks.jpg'</code>",check:()=>{var i=document.querySelector('#view-after img');if(!i)return false;var s=i.src;if(!s)return false;return ~s.indexOf('images/courses/1/keks.jpg')}},{message:"А затем ещё один атрибут <code class='keyvalue'>class</code> со значением <code class='keyclass'>photocard</code>",check:()=>{var i=document.querySelector('#view-after img');return i.classList&&i.classList.contains('photocard')}}],blocked:"6",editorOff:"3"},
"lesson7":{theory:`<div><h1>Ищем ошибки</h1><p>Познакомимся с некоторыми часто встречающимися ошибками, чтобы в дальнейшем их не допускать.</p><p>HTML позволяет вкладывать теги друг в друга, и одна из самых частых ошибок заключается в неправильной вложенности, например:</p><pre><code>&lt;p&gt;Текст &lt;strong&gt;выделен&lt;/p&gt; полужирным&lt;/strong&gt;</code></pre><p>В этом примере тег <code>&lt;p&gt;</code> закрывается раньше, чем тег <code>&lt;strong&gt;</code>, и это ошибка.</p><p>Другой тип ошибок случается из-за досадных опечаток и невнимательности, когда забывают пробелы между атрибутами тега или неправильно пишут их названия.</p><p>Вот и инструктор Кекс решил обновить своё резюме поздно ночью. Захотелось сделать его лаконичнее, поиграться с оформлением. Но невнимательность его подвела. Зато вы можете потренироваться отыскивать и исправлять ошибки.</p><p>Если совсем потеряетесь, то внизу есть подсказка. Только чур сразу не смотреть!</p><div class="theory-hint"><p>1. Обратите внимание на порядок закрытия тегов.</p><p>2. Хватает ли пробелов?</p><p>3. Проверьте правильность написания атрибутов. Их там немного.</p></div></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Ищем ошибки</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Инструктор Кекс [v.2]</h1>\n\n  <!-- В этом блоке затерялась первая ошибка -->\n  <div class="error1">\n    <p>\n      <em>В последующих курсах вам будет часто помогать с освоением тонкостей HTML и CSS</p> инструктор Кексик.</em>\n  </div>\n\n  <!-- Здесь спрятана вторая ошибка -->\n  <div class="error2">\n    <imgsrc="images/courses/1/keks-macho.jpg" class="photocard">\n  </div>\n\n  <!-- А здесь третья -->\n  <div class="error3">\n    <blockquote clas="nice-cite">\n      <p>Привет! Меня зовут Кекс и я ваш будущий инструктор. Я веб-разработчик и живу в Санкт-Петербурге.</p>\n      <p>До встречи в последующих курсах!</p>\n    </blockquote>\n  </div>\n</body>\n</html>\n`,css:`body {\n    font-family: "Georgia", serif;\n}\n\n.photocard {\n    display: block;\n    width: 300px;\n    margin: 20px auto;\n\n    box-shadow: 5px 5px 0 #e7471e;\n}\n\n.nice-cite {\n    margin: 1.5em 0;\n    padding: 0.5em 25px;\n    line-height: 1.5;\n\n    background-color: #f5f5f5;\n    border-left: 5px solid #e7471e;\n}\n`,hidden:``,js:``,tasks:[{message:"Помогите Кексу исправить ошибки в <code class='keyvalue'>HTML</code>-коде его нового резюме:<br>Первую ошибку с <code class='keytext'>лишней пустой строкой</code>.",check:()=>{var e=document.querySelector('#view-after .error1 p');return e&&~e.textContent.search(/^(\s|\n|\t)*В\sпоследующих(.|\n)*инструктор\sКексик\.(\s|\t|\n)*$/)}},{message:"Вторую ошибку с <code class='keytext'>отсутствием картинки</code>.",check:()=>{var i=document.querySelector('#view-after img');return i&&i.src&&~i.src.indexOf('images/courses/1/keks-macho.jpg')}},{message:"Третью ошибку с <code class='keytext'>пропавшим оформлением цитаты</code>.",check:()=>{var e=document.querySelector('#view-after blockquote');return e&&e.classList&&e.classList.contains('nice-cite')}}],blocked:"6",editorOff:"3"},
"lesson8":{theory:`<div><h1>Азы CSS</h1><p>CSS — это язык для управления внешним видом HTML-документа. С помощью CSS можно задавать параметры отображения любого тега: ширину и высоту, отступы, цвет и размер шрифта, фон и так далее.</p><p>CSS это аббревиатура «Cascading Style Sheets» или «Каскадные Таблицы Стилей». Обычно CSS называют просто «стили».</p><p>Самый простой способ применить стили к тегу заключается в использовании атрибута <code>style</code>. Например:</p><pre><code>&lt;p style="color: red;"&gt;…&lt;/p&gt;</code></pre><p>В этом примере абзацу задан красный цвет шрифта. Такой способ задания стилей называют «инлайновые стили» или «встроенные стили».</p><p>Синтаксис таких стилей очень простой: <code>свойство: значение;</code>. Причём свойств может быть несколько.</p><p>Теперь давайте составим мини-конспект курса и отметим зелёным цветом те темы, которые мы уже отработали на практике. Для стилизации используем инлайновые стили.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Азы CSS</title>\n</head>\n<body>\n  <h1>Конспект курса</h1>\n  <p style="color: green;">Парные теги.</p>\n  <p>Одиночные теги.</p>\n  <p>Атрибуты тегов.</p>\n  <p>Инлайновые (встроенные) стили.</p>\n  <p>Внешние стили.</p>\n  <p>Стилизация по классам.</p>\n</body>\n</html>\n`,css:``,hidden:``,js:``,tasks:[{message:"С помощью атрибута <code class='keyvalue'>style</code>:<br>Сделайте цвет текста <code class='keytext'>первых трёх абзацев</code> зелёным <code class='keyclass'>green</code>",check:()=>{var p=document.querySelectorAll('#view-after p');if(!p||p.length<6)return false;for(var i=0;i<3;i++){if(getComputedStyle(p[i]).color!=="rgb(0, 128, 0)")return false};return true}},{message:"А <code class='keytext'>последних трёх</code> — красным <code class='keyword'>red</code>",check:()=>{var p=document.querySelectorAll('#view-after p');if(!p||p.length<6)return false;for(var i=3;i<6;i++){if(getComputedStyle(p[i]).color!=="rgb(255, 0, 0)")return false};return true}}],blocked:"6",editorOff:"6"},
"lesson9":{theory:`<div><h1>Другие способы подключения CSS</h1><p>Задавать стили каждого тега с помощью атрибута <code>style</code> очень затратно и хлопотно. А ещё это приводит к засорению HTML-кода избыточными, повторяющимися кусками CSS.</p><p>К счастью, есть и другие способы подключения стилей. Первый — подключение внешнего файла с помощью тега <code>&lt;link&gt;</code>, а второй — использование специального тега <code>&lt;style&gt;</code>. Подробнее эти методы будут разобраны в последующих курсах.</p><p>А сейчас вы познакомитесь со вторым разделом редактора — вкладкой <code>style.css</code>. Код из CSS-редактора подставляется в HTML-документ так, как будто вы записали его в тег <code>&lt;style&gt;</code>.<p>Для начала мы почистим код в HTML-редакторе, а потом начнём пошагово стилизовать наш мини-конспект с помощью других возможностей CSS.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Другие способы подключения CSS</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Конспект курса</h1>\n  <p style="color: green;">Парные теги.</p>\n  <p style="color: green;">Одиночные теги.</p>\n  <p style="color: green;">Атрибуты тегов.</p>\n  <p style="color: green;">Инлайновые (встроенные) стили.</p>\n  <p style="color: red;">Внешние стили.</p>\n  <p style="color: red;">Стилизация по классам.</p>\n</body>\n</html>\n`,css:`/*\nbody {\n    font-family: "Tahoma", serif;\n}\n\np {\n    color: green;\n}\n`,hidden:``,js:``,tasks:[{message:"Удалите все атрибуты <code class='keyvalue'>style</code> у <code class='keytext'>абзацев</code>.",check:()=>!~getH().indexOf('style=')},{message:"Потом удалите символы <code class='keyword'>/*</code> в первой строке <code class='keyvalue'>CSS</code>-редактора.",check:()=>!~getC().search(/(\/|\*)/)}],blocked:"3",editorOff:"3"},
"lesson10":{theory:`<div><h1>Селекторы в CSS</h1><p>Поздравляем! Вы только что <a href="9">подключили внешние CSS-стили</a> к своей HTML-страничке.</p><p>Когда вы задаёте стили тега с помощью атрибута <code>style</code>, браузер сразу же понимает, к какому именно тегу применить эти стили. Но когда стили подключаются с помощью внешнего файла или через тег <code>&lt;style&gt;</code>, браузер ищет стилизуемые теги с помощью «селекторов».</p><p>С селекторами вы уже немного знакомы: в предыдущем задании вы использовали селектор <code>p</code>, который находился перед фигурными скобочками в CSS-коде. В общем случае синтаксис CSS-правил выглядит так:</p><pre><code>селектор {\n  свойство1: значение1;\n  свойство2: значение2;\n  …\n}</code></pre><p>Язык селекторов очень мощный и гибкий. Простейший тип селекторов — селекторы по имени тега: <code>p</code>, <code>h1</code> и так далее. Когда браузер видит такой селектор, он применяет стили из правила ко всем подходящим тегам. Например, ко всем абзацам или ко всем заголовкам первого уровня.</p><p>Но, Хьюстон, у нас проблемы с конспектом! Селектор <code>p</code> подсветил <em>все</em> абзацы зелёным. А они должны быть разного цвета. Как быть?</p><p>Давайте попробуем добавить внутрь абзацев разные теги для разных цветов. Тогда в CSS можно будет использовать разные селекторы.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Селекторы в CSS</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Конспект курса</h1>\n  <p><strong>Парные теги.</strong></p>\n  <p><strong>Одиночные теги.</strong></p>\n  <p><strong>Атрибуты тегов.</strong></p>\n  <p><strong>Инлайновые (встроенные) стили.</strong></p>\n  <p><em>Внешние стили.</em></p>\n  <p><em>Стилизация по классам.</em></p>\n</body>\n</html>\n`,css:`body {\n    font-family: "Tahoma", serif;\n}\n\n/* Небольшая помощь. Дальше сами.\nh1 {\n    color: #999999;\n}\n`,hidden:``,js:``,tasks:[{message:"Познакомьтесь с простейшими <code class='keytext'>селекторами</code>:<br>Для <code class='keyword'>h1</code> задайте <code class='keyvalue'>color: <code class='keytext'>#999999</code>;</code>",check:()=>{var e=document.querySelector('#view-after h1');return e&&getComputedStyle(e).color=="rgb(153, 153, 153)"}},{message:"Для <code class='keyword'>strong</code> задайте <code class='keyvalue'>color: <code class='keytext'>green</code>;</code>",check:()=>{var e=document.querySelectorAll('#view-after strong');if(!e||e.length!==4)return false;for(var i=0;i<4;i++){if(getComputedStyle(e[i]).color!='rgb(0, 128, 0)')return false};return true;}},{message:"Для <code class='keyword'>em</code> задайте <code class='keyvalue'>color: <code class='keytext'>red</code>;</code>",check:()=>{var e=document.querySelectorAll('#view-after em');if(!e||e.length!==2)return false;for(var i=0;i<2;i++){if(getComputedStyle(e[i]).color!='rgb(255, 0, 0)')return false};return true;}}],blocked:"5",editorOff:"3"},
"lesson11":{theory:`<div><h1>Классы в CSS</h1><p>Что ж, конспект мы снова раскрасили, но какой ценой. Давайте признаем, что добавлять внутрь абзацев дополнительные теги и раскрашивать текст с их помощью, не самое лучшее решение. Ну а какое решение хорошее?</p><p>Такое решение есть и оно называется «классы»!</p><p>Вспомните шаг, когда мы пытались стилизовать абзацы с помощью внешних стилей, но все они получились одинакового цвета.</p><p>Нужно было сделать следующее: добавить абзацам разные классы, а в CSS использовать селекторы не по тегу, а по классам.</p><p>Класс — это всего лишь один из атрибутов HTML-тегов, например:</p><pre><code>&lt;p class="important"&gt;…&lt;/p&gt;\n&lt;p class="help"&gt;…&lt;/p&gt;</code></pre><p>В CSS можно задавать стили только для элементов с определённым классом. Для этого используется селектор по классу, который пишется так <code>.имя-класса</code>, например:</p><pre><code>.important { color: red; } — выберет все теги с классом "important"\n.help { color: green; }    — выберет все теги с классом "help"</code></pre><p>Классы гибкие, их можно создавать много и называть понятными именами. Например, можно создать класс, который отмечает раздел курса, который сейчас изучается.</p>Имя класса может содержать в себе латинские символы, цифры, символ дефиса <code>-</code> и подчёркивания <code>_</code> и начинаться оно должно с латинского символа.</div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Классы в CSS</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Конспект курса</h1>\n  <p><strong>Парные теги.</strong></p>\n  <p><strong>Одиночные теги.</strong></p>\n  <p><strong>Атрибуты тегов.</strong></p>\n  <p><strong>Инлайновые (встроенные) стили.</strong></p>\n  <p><em>Внешние стили.</em></p>\n  <p><em>Стилизация по классам.</em></p>\n</body>\n</html>\n`,css:`body {\n    font-family: "Tahoma", serif;\n}\n\nh1 {\n    color: #999999;\n}\n\nstrong {\n    color: green;\n}\n\nem {\n    color: red;\n}\n\n.learned-ok {\n    color: green;\n}\n\n.learning-in-progress {\n    color: orange;\n}\n\n.not-learned {\n    color: red;\n}\n`,hidden:``,js:``,tasks:[{message:"Переделываем всё c нормальными классами:<br>Для начала удалите из <code class='keyvalue'>HTML</code>-кода все <code class='keytext'>strong</code> и <code class='keytext'>em</code>, чтобы внутри <code class='keyword'>p</code> остался только текст",check:()=>!document.querySelector('#view-after strong')&&!document.querySelector('#view-after em')},{message:"<code class='keytext'>Первым четырём абзацам</code> добавьте класс <code class='keyclass'>learned-ok</code>",check:()=>{var e=document.querySelectorAll('#view-after p');if(!e||e.length!==6)return false;for(var i=0;i<4;i++)if(!e[i].classList.contains('learned-ok'))return false;return true;}},{message:"<code class='keytext'>Пятому абзацу</code> добавьте класс <code class='keyclass'>learning-in-progress</code>",check:()=>{var e=document.querySelector('#view-after p:nth-of-type(5)');return e&&e.classList.contains('learning-in-progress')}},{message:"<code class='keytext'>Шестому абзацу</code> добавьте класс <code class='keyclass'>not-learned</code>",check:()=>{var e=document.querySelector('#view-after p:last-of-type');return e&&e.classList.contains('not-learned')}}],blocked:"6",editorOff:"3"},
"lesson12":{theory:`<div><h1>Свойства и значения CSS</h1><p>Итак, язык CSS состоит из селекторов и свойств. Селекторы указывают на то, к каким элементам применять стили, а свойства — на то, как именно отображать элементы.</p><p>Существует огромное количество CSS-свойств, которые влияют практически на все аспекты отображения элементов. Причём каждому свойству соответствует определённый набор значений.</p><p>Некоторые значения задаются с помощью текстовых констант, например <code>red</code>, <code>bold</code>, другие с помощью цифровых значений: <code>12px</code>, <code>120%</code> и так далее.</p><p>Мощь стилей заключается в том, что вы можете быстро и гибко менять внешний вид нужных элементов, особенно когда используете классы. Например, чтобы зачеркнуть текст всех изученных пунктов конспекта, нужно добавить всего лишь одну строчку в CSS:</p><pre><code>.learned-ok {\n  color: green;\n  <strong>text-decoration: line-through;</strong>\n}</code></pre><p>И все теги с классом <code>.learned-ok</code> будут отображаться с перечёркнутым текстом. Теперь представьте, как долго делать то же самое через инлайновые стили, когда в конспекте больше сотни пунктов.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Свойства и значения CSS</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Конспект курса</h1>\n  <p class="learned-ok">Парные теги.</p>\n  <p class="learned-ok">Одиночные теги.</p>\n  <p class="learned-ok">Атрибуты тегов.</p>\n  <p class="learned-ok">Инлайновые (встроенные) стили.</p>\n  <p class="learning-in-progress">Внешние стили.</p>\n  <p class="not-learned">Стилизация по классам.</p>\n</body>\n</html>\n`,css:`body {\n    font-family: "Tahoma", serif;\n}\n\nh1 {\n    color: #999999;\n}\n\n.learned-ok {\n    color: green;\n}\n\n.learning-in-progress {\n    color: orange;\n}\n\n.not-learned {\n    color: red;\n}\n`,hidden:``,js:``,tasks:[{message:"Добавьте в правило <code class='keyclass'>.learned-ok</code> свойство <code class='keyvalue'>text-decoration</code> со значением <code class='keytext'>line-through</code>",check:()=>~getC().search(/\.learned-ok\{\S*?text-decoration:line-through\S*?\}/)},{message:"В правило <code class='keyclass'>.learning-in-progress</code> свойство <code class=keyvalue>padding-left</code> со значением <code class='keytext'>15px</code>",check:()=>~getC().search(/\.learning-in-progress\{\S*?padding-left:15px\S*?\}/)},{message:"В правило <code class='keyclass'>.not-learned</code> свойство <code class='keyvalue'>background-color</code> со значением <code class='keytext'>#fff0f0</code>",check:()=>~getC().search(/\.not-learned\{\S*?background-color:#fff0f0\S*?\}/)},{message:"И напоследок отметьте <code class='keytext'>последние два</code> пункта конспекта как пройденные, заменив их класс на <code class='keyclass'>learned-ok</code>",check:()=>{var e=document.querySelectorAll('#view-after p');if(!e||e.length!==6)return false;for(var i=0;i<6;i++)if(!e[i].classList.contains('learned-ok'))return false;return true}}],blocked:"3",editorOff:"3"},
"lesson13":{theory:`<div><h1>Работа над ошибками</h1><p>Синтаксис CSS намного проще синтаксиса HTML, но это не мешает совершать досадные ошибки. С ошибками в HTML мы уже разобрались, теперь посмотрим на ошибки в CSS.</p><p>Конечно, одни из самых распространённых ошибок — это опечатки в названиях свойств или селекторах.</p><p>К другим частым ошибкам относится отсутствие <code>;</code> в списке CSS-свойств. Когда после пары «свойство-значение» забывают поставить точку с запятой, браузер не применяет ни это свойство, ни все последующие.</p><p>Когда вёрстка конспекта была почти завершена, к компьютеру шерстяной молнией подлетел инструктор Кекс и решил напоследок поиграться со стилями, чтобы сделать конспект «симпатичнее». Получилось неплохо, но в этот раз Кекс был спросонья и наделал досадных опечаток, которые сломали некоторые стили.</p><p>Ну и замечательно! Теперь есть возможность потренироваться в поиске ошибок в CSS!</p><div class="theory-hint"><p>1. Строчка 7.</p><p>2. Строчка 16.</p><p>3. Строчка 26.</p></div></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Работа над ошибками</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Конспект курса</h1>\n  <p class="learned-ok">Парные теги.</p>\n  <p class="learned-ok">Одиночные теги.</p>\n  <p class="learned-ok">Атрибуты тегов.</p>\n  <p class="learned-ok">Инлайновые (встроенные) стили.</p>\n  <p class="learning-in-progress">Внешние стили.</p>\n  <p class="not-learned">Стилизация по классам.</p>\n</body>\n</html>\n`,css:`body {\n    font-family: "Georgia", serif;\n}\n\np {\n    margin: 10px 0;\n    padding: 5px 10px\n    border: 1px solid #cccccc;\n    border-left-width: 10px;\n    color: white;\n}\n\n.learned-ok {\n    border-color: #27ae60;\n    background-color: #2ecc71;\n    text-decoration: linr-through;\n}\n\n.learning-in-progress {\n    border-color: #f39c12;\n    background-color: #f1c40f;\n}\n\n.not-learned {\n    border-color: #c0392b;\n    backround-color: #e74c3c;\n}\n`,hidden:``,js:``,tasks:[{message:"Помогите Кексу исправить ошибки в стилях конспекта:<br>Первую ошибку с <code class='keytext'>потерянными стилями для всех абзацев</code>.",check:()=>{var e=document.querySelector('#view-after p');return e&&getComputedStyle(e).color=="rgb(255, 255, 255)"&&~getC().search(/p\{\S*;\S*;\S*;\S*;\S*;\S*\}\.learned-ok/)}},{message:"Вторую ошибку с <code class='keytext'>отсутствием зачёркивания пройденных</code>.",check:()=>~getC().search(/\.learned-ok\{\S*text-decoration:line-through\W/)},{message:"Третью ошибку с <code class='keytext'>пропавшим фоном непройденных</code>.",check:()=>~getC().search(/\.not-learned\{\S*background-color:#e74c3c\W/)}],blocked:"5",editorOff:"5"},
"lesson14":{theory:`<div><h1>Первое испытание</h1><p>Испытания — это самые сложные задания курсов. Проходя испытание, вы доказываете, что хорошо усвоили материал.</p><p>Главная цель испытания — с помощью HTML и CSS получить в мини-браузере изображение, максимально похожее на образец (мини-браузер слева, под стрелочкой "Было"). Чтобы система сравнила ваш результат с образцом, нужно нажать кнопку <code>Проверить</code>.</p><p>Первое испытание достаточно простое. Вам необходимо разметить исходный HTML-код с помощью тегов и классов.</p><p>Подсказка: CSS менять не надо. Достаточно использовать правильные теги и классы.</p><p>Если не получится пройти испытание сегодня, то можете переходить к следующим курсам, а к испытанию вернуться завтра.</p></div>`,html:`<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>Первое испытание</title>\n    <link rel="stylesheet" href="style.css">\n  </head>\n  <body>\n    Введение\n    В этом пособии изучается работа с HTML и CSS.\n\n    Глава 1\n    Работа с HTML, знакомство с тегами и атрибутами тегов.\n\n    Глава 2\n    Работа с CSS, знакомство с селекторами и свойствами.\n\n    Самое лучшее онлайн-пособие\n  </body>\n</html>\n`,css:`/* Классы для оформления */\n.cite {\n    padding: 5px 10px;\n    font-style: italic;\n    background-color: #f5f5f5;\n    border-left: 2px solid #cccccc;\n}\n\n/* Служебные стили */\nbody {\n    font-size: 16px;\n    line-height: 1.4;\n    font-family: "Arial", sans-serif;\n    color: black;\n}\n\nh1 {\n    margin-top: 0.5em;\n    margin-bottom: 0.5em;\n    font-weight: bold;\n    font-size: 2.5em;\n}\n\nh2 {\n    margin-top: 0.5em;\n    margin-bottom: 0.5em;\n    font-weight: normal;\n    font-size: 1.5em;\n    color: #333333;\n}\n\np {\n    margin: 1em 0;\n    color: #666666;\n}\n`,hidden:``,js:``,tasks:[{message:`<button onclick="fH1()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Первое испытание достаточно простое.</p><p>Вам необходимо разметить исходный <code>HTML</code>-код с помощью <code class="keytext">тегов</code> и <code class='keytext'>классов</code>.</p><p><code class='keyvalue'>CSS</code> менять не надо. Достаточно использовать правильные <code class='keytext'>теги</code> и <code class='keytext'>классы</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{if(!o.hE){document.querySelector('#view-before .view-body').innerHTML=`<h1>Введение</h1><p>В этом пособии изучается работа с HTML и CSS.</p><h2>Глава 1</h2><p>Работа с HTML, знакомство с тегами и атрибутами тегов.</p><h2>Глава 2</h2><p>Работа с CSS, знакомство с селекторами и свойствами.</p><p class="cite">Самое лучшее онлайн-пособие</p>`;setT();Academy.switchCSSHTML();Academy.vars.hE=true};return o.hA}}],blocked:"3",editorOff:"3"}
};
hL();