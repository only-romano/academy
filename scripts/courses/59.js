fH1=function(){var c=0;var t=document.getElementById('lesson-tasks').classList;function f(e,n){if(e.contains('spoil')||e.contains('invert')||e.contains('stylize')||(n===4?!e.contains('burst'):e.contains('burst'))||(n===2?!e.contains('shadow'):e.contains('shadow'))||(n===3?!e.contains('colorize'):e.contains('colorize'))){e.add('failed-test-item');setTimeout(function(){e.remove('failed-test-item')}.bind(this),2500);c++}}f(document.querySelector('#view-after .portrait-1').classList);f(document.querySelector('#view-after .portrait-2').classList,2);f(document.querySelector('#view-after .portrait-3').classList,3);f(document.querySelector('#view-after .portrait-4').classList,4);if(c>0){}else{t.add('passed-test');Academy.vars.hA=true;setTimeout(function(){t.remove('passed-test')}.bind(this),3000)}};
fH2=function(){var m=document.querySelectorAll('#view-before li');var y=document.querySelectorAll('#view-after li');var t=document.getElementById('lesson-tasks').classList;var d=m.length;function f(e){Academy.vars.hA=false;t.add('failed-test');e.add('failed-test-item');setTimeout(function(){t.remove('failed-test');e.remove('failed-test-item')}.bind(this),2500)}if(d!==y.length)return f(y[y.length-1].classList);for(var i=0;i<d;i++){var n = m[i].dataset.number;if(!y[i].classList.contains('color-'+n)||y[i].innerHTML!=n)return f(y[i].classList);var s1=getComputedStyle(m[i]);var s2=getComputedStyle(y[i]);if(s1.borderTopColor!==s2.borderTopColor||s1.borderRightColor!==s2.borderRightColor||s1.borderBottomColor!==s2.borderBottomColor||s1.borderLeftColor!==s2.borderLeftColor)return f(y[i].classList);}Academy.vars.hA=true;t.add('passed-test');setTimeout(function(){t.remove('passed-test')}.bind(this),3000)};
fH3=()=>{Academy.vars.s1=document.querySelector('#view-before .separator');Academy.vars.s2=document.querySelector('#view-after .separator');Academy.vars.f1=false;Academy.vars.f2=false;Academy.vars.s1.addEventListener('mousedown',function(e){e.preventDefault();Academy.vars.f1=true;Academy.vars.hA=true},false);Academy.vars.s2.addEventListener('mousedown',function(e){e.preventDefault();Academy.vars.f2=true;},false);document.addEventListener('mouseup',()=>{Academy.vars.f1=false;Academy.vars.f2=false},false);document.querySelector('#view-before .photos').addEventListener('mousemove',function(e){var r=e.pageX-this.offsetLeft;if(Academy.vars.f1&&(r>0)&&(r<document.querySelector('#view-before .photo').offsetWidth)){Academy.vars.s1.style.left=r+'px';document.querySelector('#view-before .photo-original').style.width=r+'px'}},false);document.querySelector('#view-after .photos').addEventListener('mousemove',function(e){var r=e.pageX-this.offsetLeft;if(Academy.vars.f2&&(r>0)&&(r<document.querySelector('#view-after .photo').offsetWidth)){Academy.vars.s2.style.left=r+'px';document.querySelector('#view-after .photo-original').style.width=r+'px'}},false)};
th1=`body{margin:0;padding:10px;min-width:550px;background:url("images/courses/59/sativa.png") repeat;}.photos{position:relative;margin:0 auto;margin-bottom:10px;width:320px;height:320px;border:10px solid #ffffff;box-shadow:0 0 5px rgba(0,0,0,0.4);}.photo{position:absolute;width:100%;height:100%;background-size:cover;}.toggle-controls{box-sizing:border-box;margin-bottom:0;padding:20px 0 0 20px;min-height:269px;width:100%;background:#333333;}.toggle-controls li {position:relative;display:inline-block;box-sizing:border-box;margin-right:28px;padding:60px 0 0;width:80px;height:80px;background-image:-webkit-linear-gradient(transparent,rgba(0,0,0,0.1) 65%,rgba(0,0,0,0.7)),url("images/courses/59/toggle-pic.jpg");background-image:linear-gradient(transparent,rgba(0,0,0,0.1) 65%,rgba(0,0,0,0.7)),url("images/courses/59/toggle-pic.jpg");background-position:40%;background-size:cover;color:#ffffff;vertical-align:top;text-align:center;text-transform:uppercase;font-size:14px;font-family:Arial;cursor:pointer;}.toggle-controls li:last-child{margin-right:0;}.toggle-controls .active{box-shadow:0 0 0 3px #ffffff;}`;
th2=`.separator{position:absolute;z-index:2;width:30px;height:30px;border:2px solid #ffffff;border-radius:50%;background-color:rgba(0,0,0,0.3);color:#ffffff;text-align:center;font-size:20px;line-height:32px;cursor:pointer;}.separator::before,.separator::after{position:absolute;left:14px;z-index:3;width:2px;height:145px;background-color:#ffffff;content:"";}.separator::before{bottom:30px;}.separator::after{top:30px;}`;
tb1=`</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden">walden</li>\n    <li class="toaster">toaster</li>\n    <li class="kelvin">kelvin</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`;
tb2=`</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden" data-filter="walden"></li>\n    <li class="toaster" data-filter="toaster"></li>\n    <li class="kelvin" data-filter="kelvin"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`;
tc1=`.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}\n\n.toaster {\n    filter: saturate(2.5) hue-rotate(-30deg) contrast(0.67) sepia(0.4);\n}\n\n.kelvin {\n    filter: contrast(1.1) brightness(1.3) saturate(2.4) sepia(0.4);\n}`;
tc2=`\n\n.photos {\n    position: relative;\n}\n\n.photo,\n.photo-original {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n}\n\n.photo {\n    z-index: 10;\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.photo-original {\n    z-index: 20;\n    width: 50%;\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.separator {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    z-index: 30;\n    width: 30px;\n    height: 30px;\n    border: 2px solid #ffffff;\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n}`
tj1=`var controls = document.querySelectorAll('.toggle-controls li');\nvar photo = document.querySelector('.photo');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.filter;\n    clickControl(controls[i]);\n}\n\nfunction toggleFilter(control) {\n    for (var i = 0; i < controls.length; i++) {\n        controls[i].classList.remove('active');\n        photo.classList.remove(controls[i].dataset.filter);\n    }\n\n    control.classList.add('active');\n\n    if (photo) {\n        photo.classList.add(control.dataset.filter);\n    }\n}\n\nfunction clickControl(control) {\n    control.addEventListener('click', function() {\n        toggleFilter(control);\n    });\n}\n\nvar defaultFilter = document.querySelector('li.toaster');\ntoggleFilter(defaultFilter);`;

LessonsData={
"lesson1214":{theory:`<div><h1>Кекстаграм: разметка</h1><p>Теперь вы знаете о фильтрах достаточно, чтобы помочь Кексу в одном маленьком деле. На досуге он ведёт <a href="https://instagram.com/htmlacademy/" target="_blank">аккаунт HTML Academy в Instagram</a>. И вот однажды ему захотелось как настоящему программисту написать свой аналог. Назвать его он решил Кекстаграм.</p><p>В этой серии заданий мы будем помогать Кексу с его проектом, применяя полученные знания на практике. В итоге вместе мы построим свой Кекстаграм с помощью HTML, CSS и JavaScript.</p><p>В процессе мы создадим несколько фильтров, которые будут применяться к фотографии в блоке <code>.photo</code>. Переключатели фильтров мы разместим в блоке <code>.toggle-controls</code>, а само переключение будет работать на JavaScript.</p><p>Cначала подготовим разметку для нашего будущего фотоприложения. Ну и, конечно же, подключим пока пустой файл <code>script.js</code>.</p><p>Подробно фильтры CSS рассматриваются в предыдущем курсе «Кекстаграм: Начало. CSS-фильтры».</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: разметка</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li></li>\n  </ul>\n</body>\n</html>`,css:`.photo {\n\tbackground-image: url("images/courses/59/spb-4.jpg");\n}`,hidden:th1,js:``,tasks:[{message:"Блоку <code class='keyclass'>.photo</code> добавьте второй класс <code class='keyvalue'>walden</code>.",check: function(){var p=document.querySelector('#view-after .photo');return p&&p.classList&&p.classList.contains('walden')}},{message:`Первому элементу списка <code class='keyclass'>.toggle-controls</code> добавьте классы <code class='keyvalue'>walden</code> и <code class='keyvalue'>active</code>.`,check:function(){var t=document.querySelector('#view-after .toggle-controls li:first-of-type');return t&&t.classList&&t.classList.contains('walden')&&t.classList.contains('active')}},{message:"А внутрь него добавьте текст <code class='keytext'>walden</code>.",check:function(){var t=document.querySelector('#view-after .toggle-controls li:first-of-type');return t&&t.textContent==="walden"}},{message:"Перед закрывающим тегом body подключите скрипт <code class='keyword'>script.js</code>.",check:function(){var s=document.querySelector('#view-after .view-body script');return s&&s.getAttribute('src')==='script.js'}}],blocked:"6",editorOff:"3"},
"lesson1215":{theory:`<div><h1>Кекстаграм: первый фильтр</h1><p>Теперь давайте создадим первый набор фильтров для класса <code>.walden</code>. Набор фильтров применится к большому фото и к переключателю.</p><p>Итоговый фильтр сымитирует у фотографии цвета фотоплёнки: немного сдвинет их по цветовому кругу, сделает фото чуть ярче и насыщеннее, а также немного уменьшит контрастность.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n\t<meta charset="utf-8">\n\t<title>Кекстаграм: первый фильтр</title>\n\t<link href="style.css" rel="stylesheet">\n</head>\n<body>\n\t<div class="photos">\n\t\t<div class="photo walden"></div>\n\t</div>\n\t<ul class="toggle-controls">\n\t\t<li class="walden active">walden</li>\n\t</ul>\n\t<script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n\tbackground-image: url("images/courses/59/spb-4.jpg");\n}\n\n.walden {\n}`,hidden:th1,js:``,tasks:[{message:`Для класса <code class='keyclass'>.walden</code> задайте фильтр со значением <code class='keyvalue'>contrast(0.9) brightness(1.2)</code>.`,check:function(o){if(!o.hA)if(getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.9) brightness(1.2)")Academy.vars.hA=1;return o.hA}},{message:"Затем добавьте в фильтр значение <code class='keyvalue'>hue-rotate(-20deg)</code>.",check:function(o){if(o.hA===1)if(getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.9) brightness(1.2) hue-rotate(-20deg)")Academy.vars.hA++;return o.hA>1}},{message:"После него значение <code class='keyvalue'>saturate(1.7)</code>.",check:function(o){if(o.hA===2)if(getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7)")Academy.vars.hA=3;return o.hA>2}},{message:"И <code class='keyvalue'>sepia(0.4)</code>.",check:function(o){return o.hA===3&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4)"}}],blocked:"5",editorOff:"3"},
"lesson1216":{theory:`<div><h1>Кекстаграм: репетируем переключение</h1><p>Отлично, у нас есть первый фильтр и первый переключатель.</p><p>Давайте добавим заготовку для ещё одного переключателя. Класс для второго фильтра будет называться <code>toaster</code>.</p><p>Затем «отрепетируем» переключение фильтра без использования JavaScript. Для этого пока будем менять HTML-код вручную. При переключении фильтра происходят два события:</p><p><em>Первое</em>. В переключателе класс <code>active</code> перемещается на текущий фильтр:</p><pre>Было:\n&lt;ul class="toggle-controls"&gt;\n    &lt;li class="filter1 <strong>active</strong>"&gt;&lt;/li&gt;\n    &lt;li class="filter2"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\nСтало:\n&lt;ul class="toggle-controls"&gt;\n    &lt;li class="filter1"&gt;&lt;/li&gt;\n    &lt;li class="filter2 <strong>active</strong>"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre><p><em>Второе</em>. У блока с большим фото меняется класс текущего фильтра:</p><pre>Было:  &lt;div class="photo <strong>filter1</strong>"&gt;&lt;/div&gt;\nСтало: &lt;div class="photo <strong>filter2</strong>"&gt;&lt;/div&gt;\n</pre><hr></div>`,html: `<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: репетируем переключение</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo walden"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden active">walden</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n    background-image: url("images/courses/59/spb-4.jpg");\n}\n\n.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}`,hidden:th1,js:``,tasks:[{message:`В список <code class='keyclass'>.toggle-controls</code> добавьте второй пункт с текстом <code class='keytext'>toaster</code> и с классом <code class='keyvalue'>toaster</code>.`,check:function(){var u=document.querySelector('#view-after .toggle-controls');if(u&&u.children&&u.children.length>1){var e=u.children[1];if(e.classList&&e.classList.contains('toaster')&&e.textContent==="toaster")return true}return false}},{message: "Затем удалите класс <code class='keyvalue'>active</code> у <code class='keytext'>первого</code> пункта в списке и добавьте его <code class='keytext'>второму</code>.",check:function(){var u=document.querySelector('#view-after .toggle-controls');if(u){u=u.children;if(u&&u.length>1){var o=u[0];var e=u[1];if(o&&e){o=o.classList;e=e.classList;if(o&&e&&!o.contains('active')&&e.contains('active'))return true}}}return false}},{message:"У большой фотографии замените класс <code class='keyvalue'>walden</code> на <code class='keyvalue'>toaster</code>.",check:function(){var p = document.querySelector('#view-after .photo');if(p){p=p.classList;if(p&&!p.contains('walden')&&p.contains('toaster'))return true}return false}}],blocked:"6",editorOff:"6"},
"lesson1217":{theory:`<div><h1>Кекстаграм: второй фильтр</h1><p>Мы «переключили» текущий фильтр, а чтобы увидеть его эффект, зададим его стили.</p><p>Этот фильтр будет делать фото ещё винтажнее, чем <code>walden</code>: сделает его малоконтрастным, с яркими цветами, небольшим поворотом по цветовому кругу и эффектом сепии.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: второй фильтр</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo toaster"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden">walden</li>\n    <li class="toaster active">toaster</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}\n\n.toaster {\n}`,hidden:th1,js:``,tasks:[{message:"Для класса <code class='keyclass'>.toaster</code> задайте фильтр со значением <code class='keyvalue'>contrast(0.67)</code>.",check:function(o){if(!o.hA&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.67)")Academy.vars.hA=1;return o.hA>0}},{message:"Затем добавьте в фильтр значение <code class='keyvalue'>saturate(2.5)</code>.",check:function(o){if(o.hA===1&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.67) saturate(2.5)")Academy.vars.hA++;return Academy.vars.hA>1}},{message:"После него значение <code class='keyvalue'>hue-rotate(-30deg)</code>.",check:function(o){if(o.hA===2&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.67) saturate(2.5) hue-rotate(-30deg)")Academy.vars.hA++;return o.hA>2}},{message:"И <code class='keyvalue'>sepia(0.4)</code>.",check:function(o){return o.hA===3&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(0.67) saturate(2.5) hue-rotate(-30deg) sepia(0.4)"}}],blocked:"5",editorOff:"5"},
"lesson1218":{theory:`<div><h1>Кекстаграм: наконец-то JavaScript</h1><p>Всё готово для «оживления» интерфейса с помощью JavaScript. HTML-код Кекстаграма приведён в исходное состояние: фильтр ещё не выбран и к фото не применён.</p><p>Сначала включим фильтр <code>toaster</code> и применим его к фотографии. Для этого:</p><p>1. Найдём элемент списка с классом <code>toaster</code> и сохраним его в переменную <code>control</code>.</p><pre>var control = document.querySelector('li.toaster');</pre><p>2. Найдём элемент с классом <code>photo</code> и сохраним его в переменную <code>photo</code>.</p><pre>var photo = document.querySelector('.photo');</pre><p>3. Теперь к элементу списка, хранящемуся в переменной <code>control</code>, добавим класс <code>active</code>:</p><pre>control.classList.add('active');</pre><p>4. А к блоку большой фотографии, она уже в переменной <code>photo</code>, добавим класс <code>toaster</code>:</p><pre>photo.classList.add('toaster');</pre><p>Теперь попробуйте повторить это сами. Обратите внимание, что при добавлении класса с помощью <code>classList.add</code> точка в начале строки <em>не пишется</em>.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: наконец-то JavaScript</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden">walden</li>\n    <li class="toaster">toaster</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}\n\n.toaster {\n    filter: saturate(2.5) hue-rotate(-30deg) contrast(0.67) sepia(0.4);\n}`,hidden:th1,js:`var control = document.querySelector('selector');\nif (control) {\n    control.classList.add('class');\n}\n\nvar photo = document.querySelector('selector');\nif (photo) {\n    photo.classList.add('class');\n}`,tasks:[{message:"Найдите и сохраните в переменную <code>control</code> элемент списка с классом <code class='keyclass'>.toaster</code> и добавьте ему класс <code class='keytext'>active</code>.",check:function(o){return o&&o.control&&o.control==document.querySelector('#view-after li.toaster')&&o.control.classList.contains('active')}},{message:"Затем найдите и сохраните в переменную <code>photo</code> блок <code class='keyclass'>.photo</code> и добавьте ему класс <code class='keytext'>toaster</code>.",check:function(o){return o&&o.photo&&o.photo==document.querySelector('#view-after .photo')&&o.photo.classList.contains('toaster')}}],blocked:"4",editorOff:"2"},
"lesson1219":{theory:`<div><h1>Кекстаграм: играем с классами</h1><p>На предыдущем шаге мы «включили» фильтр <code>toaster</code> из исходного состояния, а сейчас переключим его на <code>walden</code>. Для этого:</p><p>1. Снова найдём элемент списка с классом <code>toaster</code>, сохраним его в переменную <code>toasterControl</code> и удалим у него класс <code>active</code>, добавленный ранее:</p><pre>var toasterControl = document.querySelector('li.toaster');\ntoasterControl.classList.remove('active');\n</pre><p>2. Найдём элемент списка с классом <code>walden</code>, сохраним его в переменную <code>waldenControl</code> и добавим ему класс <code>active</code>:</p><pre>var waldenControl = document.querySelector('li.walden');\nwaldenControl.classList.add('active');\n</pre><p>3. Найдём элемент с классом <code>photo</code> и сохраним его в переменную <code>photo</code>.</p><pre>var photo = document.querySelector('.photo');\n</pre><p>4. Удалим у фото класс <code>toaster</code> и добавим класс <code>walden</code>:</p><pre>photo.classList.remove('toaster');\nphoto.classList.add('walden');\n</pre><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: играем с классами</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo toaster"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden">walden</li>\n    <li class="toaster active">toaster</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}\n\n.toaster {\n    filter: saturate(2.5) hue-rotate(-30deg) contrast(0.67) sepia(0.4);\n}`,hidden:th1,js:`var toasterControl = document.querySelector('selector');\nif (toasterControl) {\n    toasterControl.classList.remove('class');\n}\n\nvar waldenControl = document.querySelector('selector');\nif (waldenControl) {\n    waldenControl.classList.add('class');\n}\n\nvar photo = document.querySelector('selector');\nif (photo) {\n    photo.classList.remove('class');\n    photo.classList.add('class');\n}`,tasks:[{message:"Найдите и сохраните в переменную <code>toasterControl</code> переключатель <code class='keyclass'>li.toaster</code> и затем удалите у него класс <code class='keytext'>active</code>.",check:function(o){return o&&o.toasterControl&&o.toasterControl==document.querySelector('#view-after li.toaster')&&!o.toasterControl.classList.contains('active')}},{message:"Затем сохраните в переменную <code>waldenControl</code> переключатель <code class='keyclass'>.walden</code> и добавьте ему класс <code class='keytext'>active</code>.",check:function(o){return o&&o.waldenControl&&o.waldenControl==document.querySelector('#view-after li.walden')&&o.waldenControl.classList.contains('active')}},{message:"Сохраните в переменную <code>photo</code> фотографию <code class='keyclass'>.photo</code>, удалите у неё класс <code class='keytext'>toaster</code> и добавьте класс <code class='keytext'>walden</code>.",check:function(o){return o&&o.photo&&o.photo==document.querySelector('#view-after .photo')&&!o.photo.classList.contains('toaster')&&o.photo.classList.contains('walden')}}],blocked:"4",editorOff:"2"},
"lesson1220":{theory:`<div><h1>Кекстаграм: расшифровка кода</h1><p>Разберёмся подробнее в том коде, который мы написали. Вот один из фрагментов:</p><pre>var toasterControl = document.querySelector('li.toaster');\nif (toasterControl) {\n    toasterControl.classList.remove('active');\n}</pre><p><code>var toasterControl</code> обозначает, что мы создаём переменную с именем <code>toasterControl</code>.</p><p><code>document</code> – это специальная переменная, в которой хранится корневой элемент HTML-документа, будем называть его просто «документ». В нём хранятся все остальные теги.</p><p><code>querySelector</code> – это <i>метод</i> документа, который по указанному селектору ищет и возвращает первый найденный элемент, подходящий под селектор. В этом методе можно использовать любые CSS-селекторы, уже знакомые вам.</p><p>Метод <code>querySelector</code> не всегда может найти элемент и тогда переменная остаётся пустой. Чтобы проверить, что в переменной есть элемент и с ним можно работать, используется условный оператор <code>if</code>.</p><p>У элементов, которые мы находим с помощью <code>querySelector</code>, есть свойство <code>classList</code>, в котором хранится список классов элемента.</p><p>Список классов можно изменять, удаляя или добавляя в него классы с помощью методов <code>add</code> и <code>remove</code> свойства <code>classList</code>.</p><p>Теперь немного отдохнём от JavaScript и создадим ещё один фильтр.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: расшифровка кода</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden">walden</li>\n    <li class="toaster">toaster</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n    background-image: url("images/courses/59/spb-3.jpg");\n}\n\n.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}\n\n.toaster {\n    filter: saturate(2.5) hue-rotate(-30deg) contrast(0.67) sepia(0.4);\n}`,hidden:th1,js:``,tasks:[{message: "В список <code class='keyclass'>.toggle-controls</code> добавьте третий пункт с текстом <code class='keytext'>kelvin</code> и классом <code class='keyvalue'>kelvin</code>.",check:function(){var u=document.querySelector('#view-after .toggle-controls');if(u&&u.children&&u.children.length>2){var e=u.children[2];return e&&e.classList&&e.classList.contains('kelvin')&&e.textContent==='kelvin'}}},{message:"Затем добавьте новому пункту класс <code class='keyvalue'>active</code>.",check:function(){var u=document.querySelector('#view-after .toggle-controls');if(u&&u.children&&u.children.length>2){var e=u.children[2];return e&&e.classList&&e.classList.contains('active')}}},{message:"А большой фотографии добавьте класс <code class='keyvalue'>kelvin</code>.",check:function(){var p=document.querySelector('#view-after .photo');return p&&p.classList&&!p.classList.contains('toaster')&&p.classList.contains('kelvin')}}],blocked:"6",editorOff:"6"},
"lesson1221":{theory:`<div><h1>Кекстаграм: третий фильтр</h1><p>Теперь для класса <code>.kelvin</code> создадим набор фильтров. Эти фильтры будут делать фотографию более контрастной, яркой, насыщенной, а также добавят ей небольшой оттенок сепии.</p><p>Такой фильтр оживит любую блёклую фотографию, а сепия добавит эффект фотоплёнки.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: третий фильтр</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo kelvin"></div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden">walden</li>\n    <li class="toaster">toaster</li>\n    <li class="kelvin active">kelvin</li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photo {\n    background-image: url("images/courses/59/spb-3.jpg");\n}\n\n.walden {\n    filter: contrast(0.9) brightness(1.2) hue-rotate(-20deg) saturate(1.7) sepia(0.4);\n}\n\n.toaster {\n    filter: saturate(2.5) hue-rotate(-30deg) contrast(0.67) sepia(0.4);\n}\n\n.kelvin {\n}`,hidden:th1,js:``,tasks:[{message:"Для класса <code class='keyclass'>.kelvin</code> задайте фильтр со значением <code class='keyvalue'>contrast(1.1)</code>.",check:function(o){if(!o.hA&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(1.1)")Academy.vars.hA=1;return o.hA>0}},{message:"Затем добавьте в фильтр значение <code>brightness(1.3)</code>.",check:function(o){if(o.hA===1&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(1.1) brightness(1.3)")Academy.vars.hA++;return o.hA>1}},{message:"После него значение <code class='keyvalue'>saturate(2.4)</code>.",check:function(o){if(o.hA===2&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(1.1) brightness(1.3) saturate(2.4)")Academy.vars.hA++;return o.hA>2}},{message: "И <code class='keyvalue'>sepia(0.4)</code>.",check:function(o){return o.hA===3&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(1.1) brightness(1.3) saturate(2.4) sepia(0.4)"}}],blocked:"5",editorOff:"5"},
"lesson1222":{theory:`<div><h1>Испытание: испорченные портреты</h1><p>Давний недруг Кексика Рудольф опять взялся за старое. Он снова нанял хакеров, чтобы испортить сайт Кекса.</p><p>Хакеры внедрили в код страницы зловредные классы с фильтрами, которые испортили на странице о Кексе его портрет. И, что самое ужасное, заблокировали HTML и CSS.</p><p>Теперь остаётся только один выход — с помощью JavaScript удалить лишние или добавить подходящие классы HTML-элементам.</p><p>Удача вам пригодится!</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Испытание: испорченные портреты</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="portraits">\n    <div class="portrait-1 stylize"></div>\n    <div class="portrait-2"></div>\n    <div class="portrait-3 invert"></div>\n    <div class="portrait-4 spoil"></div>\n  </div>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.burst {\n    filter: contrast(2);\n}\n\n.colorize {\n    filter: saturate(2.5) sepia(0.25) hue-rotate(-15deg);\n}\n\n.stylize {\n    filter: contrast(0.7) brightness(2);\n}\n\n.shadow {\n    filter: drop-shadow(10px 10px 5px gray);\n}\n\n.spoil {\n    filter: hue-rotate(270deg);\n}\n\n.invert {\n    filter: invert(0.75);\n}`,hidden:`body{margin:0;padding:10px 0 0;min-width:550px;background:url("images/courses/59/pattern.png");background-size:cover;}body,.exam-table{margin:0;padding:0;width:100%;height:100%;}.portraits{margin:0 auto;width:450px;}.portrait-1,.portrait-2,.portrait-3,.portrait-4{position:relative;top:5px;display:inline-block;box-sizing:border-box;margin:10px;width:200px;height:130px;background-color:#ffffff;background-position:center;background-clip:padding-box;background-size:cover;background-repeat:no-repeat;}.portrait-1 {background-image:url("images/courses/59/keks-2.jpg");}.portrait-2{background-image:url("images/courses/59/keks-4.jpg");}.portrait-3{background-image:url("images/courses/59/keks-3.jpg");}.portrait-4{background-image:url("images/courses/59/keks.jpg");}`,js:`// var portrait1 = document.querySelector('.portrait-1');`,tasks:[{message:`<button onclick="fH1()">Проверить!</button><h3 class="test-header">Техническое задание</h3><div class="test-container"><p>Дав&shy;ний не&shy;друг Кек&shy;си&shy;ка Ру&shy;дольф о&shy;пять взял&shy;ся за ста&shy;рое. Он сно&shy;ва на&shy;нял ха&shy;ке&shy;ров, что&shy;бы ис&shy;пор&shy;тить сайт Кек&shy;са.</p><p>Ха&shy;ке&shy;ры внед&shy;ри&shy;ли в код стра&shy;ни&shy;цы зло&shy;вред&shy;ные <code class='keytext'>клас&shy;сы</code> с <code class='keytext'>фильт&shy;ра&shy;ми</code>, ко&shy;то&shy;рые ис&shy;пор&shy;ти&shy;ли на стра&shy;ни&shy;це о Кек&shy;се его порт&shy;рет. И, что са&shy;мое ужас&shy;ное, за&shy;бло&shy;ки&shy;ро&shy;ва&shy;ли <code class='keyword'>HTML</code> и <code class='keyword'>CSS</code>.</p><p>Те&shy;перь ос&shy;та&shy;ёт&shy;ся толь&shy;ко один вы&shy;ход — с по&shy;мощью <code class="keyvalue">JavaScript</code> уда&shy;лить лиш&shy;ние или до&shy;ба&shy;вить под&shy;хо&shy;дя&shy;щие <code class='keyclass'>клас&shy;сы</code> <code class='keytext'>HTML-эле&shy;мен&shy;там</code>.</p><p>Удача вам пригодится!</p></div><p class="task-press-button">Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы запустить проверку.</p>`,check:function(o){if(!o.hE){Academy.vars.hE = true;document.querySelector('#view-before .portrait-1').classList.remove('stylize');document.querySelector('#view-before .portrait-2').classList.add('shadow');document.querySelector('#lesson-tasks > ul').classList.add('test-list');var p3=document.querySelector('#view-before .portrait-3').classList;var p4=document.querySelector('#view-before .portrait-4').classList;p3.remove('invert');p3.add('colorize');p4.remove('spoil');p4.add('burst');var i=document.querySelectorAll('#lesson-tasks > img');i[0].click();i[1].click();}return o.hA}}],blocked:"4",editorOff:"",},
"lesson1223":{theory:`<div><h1>Кекстаграм: строки и переменные</h1><p>Вернёмся к JavaScript и немного улучшим наш код. Посмотрите эти строчки:</p><pre>var control = document.querySelector('li.toaster');\nphoto.classList.add('toaster');</pre><p>Название фильтра <code>toaster</code> в коде повторяется <em>два раза, Карл</em>. Чтобы «переключить» фильтр, придётся поменять код в двух местах. А это лишняя работа!</p><p>Избавимся от дублирования. В начале кода создадим переменную с названием фильтра:</p><pre>var filterName = 'toaster';</pre><p>В метод поиска элементов мы передаём строку <code>li.toaster</code>. Чтобы получить такую же строку из переменной, воспользуемся операцией «склеивания» строк:</p><pre>'li.' + filterName // результат: 'li.toaster'</pre><p>В коде для поиска переключателя заменим строку на выражение с переменной:</p><pre><i>Было:</i>  var control = document.querySelector('li.toaster');\n<i>Стало:</i> var control = document.querySelector('li.' + filterName);</pre><p>Внутри <code>photo.classList.add</code> находится такое же значение, как и в переменной, поэтому просто заменяем строку на переменную:</p><pre><i>Было:</i>  photo.classList.add('toaster');\n<i>Стало:</i> photo.classList.add(filterName);</pre><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: строки и переменные`+tb1,css:`.photo {\n    background-image: url("images/courses/59/spb-3.jpg");\n}\n\n`+tc1,hidden:th1,js:`var filterName = 'filterName';\n\nvar control = document.querySelector('selector');\nif (control) {\n    control.classList.add('active');\n}\n\nvar photo = document.querySelector('.photo');\nif (photo) {\n    photo.classList.add('class');\n}`,tasks:[{message:"Измените значение переменной <code>filterName</code> на <code class='keyclass'>'kelvin'</code>",check:function(o){return o&&o.filterName==='kelvin'}},{message:"Замените значение <code class='keytext'>'selector'</code> в методе поиска активного переключателя на <code class='keyclass'>'li.' + filterName</code>.",check:function(){if(Academy.JS){var j=getJ();if(!~j.indexOf(`document.querySelector('selector')`))return ~j.search(/document\.querySelector\(('|"|`)li\.\1\+filterName\)/)}}},{message: "Затем замените значение <code class='keytext'>'class'</code> в методе добавления класса для большого фото на переменную <code>filterName</code>.",check:function(){if(Academy.JS){var j=getJ();return !~j.indexOf(`photo.classList.add('class')`)&&~j.indexOf(`photo.classList.add(filterName)`)}}}],blocked:"4",editorOff:"4"},
"lesson1224":{theory:`<div><h1>Кекстаграм: используем функцию</h1><p>Продолжим улучшать наш JavaScript. Теперь упакуем весь код, отвечающий за переключение фильтров, в функцию. Это позволит проще его использовать и изменять.</p><p>Функция создаётся выражением, начинающимся с ключевого слова <code>function</code>. Например, в этом коде мы создаём функцию для суммирования чисел c именем <code>sum</code>:</p><pre>// Определение функции\nfunction sum(a, b) {\n    return a + b;\n}\n\nsum(1, 5); // Вызов функции. Результат выполнения: 6.</pre><p>У функции есть набор параметров, в нашем случае это переменные <code>a</code> и <code>b</code>, и тело, которое выполняется при вызове функции. Тело функции заключается в фигурные скобки. Количество параметров может быть любым, их может и не быть вовсе.</p><p>Обернём наш код для переключения фильтров в функцию <code>toggleFilter</code>, у которой будет один параметр — <code>filterName</code>. А затем вызовем функцию с разными названиями фильтра в качестве параметра.</p><p>Кстати, переменная <code>filterName</code> нам больше не нужна, так как название фильтра передаётся в функцию в параметре с таким же именем, поэтому в коде создание переменной закомментировано.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: используем функцию`+tb1,css:`.photo {\n    background-image: url("images/courses/59/spb-3.jpg");\n}\n\n`+tc1,hidden:th1,js:`// var filterName = 'kelvin';\n\nfunction toggleFilter(filterName) {\n    var control = document.querySelector('li.' + filterName);\n    if (control) {\n        control.classList.add('active');\n    }\n\n    var photo = document.querySelector('.photo');\n    if (photo) {\n        photo.classList.add(filterName);\n    }\n}`,tasks:[{message:"После определения функции <code class='keyvalue'>toggleFilter</code> вызовите её строкой <code>toggleFilter(<code class='keytext'>'kelvin'</code>);</code>.",check:function(o){if(o.hA)return true;if(Academy.JS){var j=getJ();var i=j.indexOf('functiontoggleFilter(filterName){');if(!~i)return false;var e=j.indexOf(`toggleFilter('kelvin')`,i);if(!~e)e=j.indexOf(`toggleFilter("kelvin")`,i);if(!~e)e=j.indexOf("toggleFilter(`kelvin`)",i);if(~e){Academy.vars.hA=true;return true}}}},{message:"А затем замените в вызове функции параметр <code class='keytext'>'kelvin'</code> на <code class='keytext'>'toaster'</code>.",check:function(){if(Academy.JS){var j=getJ();var i=j.indexOf('functiontoggleFilter(filterName){');if(!~i)return false;var e=j.indexOf(`toggleFilter('kelvin')`,i);if(~e)return false;e=j.indexOf(`toggleFilter("kelvin")`,i);if(~e)return false;e=j.indexOf("toggleFilter(`kelvin`)",i);if(~e)return false;e=j.indexOf(`toggleFilter('toaster')`,i);if(!~e)e=j.indexOf(`toggleFilter("toaster")`,i);if(!~e)e=j.indexOf("toggleFilter(`toaster`)",i);if(~e)return true}}}],blocked:"4",editorOff:"4"},
"lesson1225":{theory:`<div><h1>Кекстаграм: экспериментируем с вызовом функции</h1><p>Мы создали функцию, но она ещё требует серьёзной доработки. Сейчас мы в этом убедимся.</p><p>На первый взгляд функция работает правильно. Но только при одном переключении фильтра, когда мы запускаем функцию только один раз. Ведь при каждом обновлении кода страница в мини-браузере обновляется целиком. Поэтому при первом запуске мы имеем дело с «чистым» исходным состоянием.</p><p>Если же вызвать созданную функцию несколько раз подряд с разными параметрами:</p><pre>toggleFilter('toaster');\ntoggleFilter('kelvin');</pre><p>То активными станут сразу несколько переключателей, а к фотографии применятся несколько фильтров одновременно.</p><p>Давайте поэкспериментируем.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: экспериментируем с вызовом функции`+tb1,css:`.photo {\n    background-image: url("images/courses/59/spb-3.jpg");\n}\n\n`+tc1,hidden:th1,js:`function toggleFilter(filterName) {\n    var control = document.querySelector('li.' + filterName);\n    if (control) {\n        control.classList.add('active');\n    }\n\n    var photo = document.querySelector('.photo');\n    if (photo) {\n        photo.classList.add(filterName);\n    }\n}\n\ntoggleFilter('toaster');`,tasks:[{message:"Добавьте второй вызов функции <code>toggleFilter</code> с параметром <code class='keytext'>'kelvin'</code>.",check:function(){if(Academy.JS){var j=getJ();var i=j.indexOf('functiontoggleFilter(filterName){');if(!~i)return false;var e=j.indexOf(`toggleFilter('kelvin')`,i);if(!~e)e=j.indexOf(`toggleFilter("kelvin")`,i);if(!~e)e=j.indexOf("toggleFilter(`kelvin`)",i);if(!~e)return false;e=j.indexOf(`toggleFilter('toaster')`,i);if(!~e)e=j.indexOf(`toggleFilter("toaster")`,i);if(!~e)e=j.indexOf("toggleFilter(`toaster`)",i);if(~e){Academy.vars.hA=true;return true;}}}},{message:"А затем третий с параметром <code class='keytext'>'walden'</code>.",check:function(o){if(Academy.JS&&o.hA){var j=getJ();var i=j.indexOf('functiontoggleFilter(filterName){');if(!~i)return false;var e=j.indexOf(`toggleFilter('walden')`,i);if(!~e)e=j.indexOf(`toggleFilter("walden")`,i);if(!~e)e=j.indexOf("toggleFilter(`walden`)",i);if(~e)return true}}}],blocked:"4",editorOff:"4"},
"lesson1226":{theory:`<div><h1>Кекстаграм: добавляем data-атрибуты</h1><p>У HTML-элементов есть возможность создавать специальные атрибуты, в которых можно хранить вспомогательную информацию и легко передавать её в JavaScript. Такие атрибуты начинаются с префикса <code>data-</code>.</p><p>При этом data-атрибуты валидны и никак не влияют на отображение элементов в браузере.</p><p>Давайте добавим переключателям data-атрибуты <code>data-filter</code>, в которых будем хранить название каждого фильтра.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: добавляем data-атрибуты`+tb1,css:`.photo {\n    background-image: url("images/courses/59/spb-5.jpg");\n}\n\n`+tc1,hidden:th1,js:``,tasks:[{message:"Удалите текст внутри переключателей и добавьте к каждому из них атрибут <code class='keyvalue'>data-filter</code> со значением <code class='keytext'>walden</code> у первого переключателя.",check:function(){var l=document.querySelector('#view-after li:first-of-type');if(!l.textContent&&l.dataset.filter==='walden')return true}},{message:"Cо значением <code class='keytext'>toaster</code> у второго.",check:function(){var l=document.querySelector('#view-after li:nth-of-type(2)');if(!l.textContent&&l.dataset.filter==='toaster')return true}},{message:"Cо значением <code class='keytext'>kelvin</code> третьего.",check:function(){var l=document.querySelector('#view-after li:last-of-type');if(!l.textContent&&l.dataset.filter==='kelvin')return true}}],blocked:"6",editorOff:"6"},
"lesson1227":{theory:`<div><h1>Кекстаграм: используем data-атрибуты</h1><p>Чтобы с помощью JavaScript считать значение data-атрибутов, нужно использовать свойство <code>dataset</code>. Пример:</p><pre><i>HTML:</i>\n&lt;div class="control" data-filtername="walden"&gt;&lt;/div&gt;\n\n<i>JavaScript:</i>\nvar control = document.querySelector('.control');\nvar filter = control.dataset.filtername;\n// в переменной filter теперь строка «walden»\n</pre><p>В свойстве <code>dataset</code> HTML-элемента хранятся все значения его data-атрибутов. Обратиться к ним можно по названию data-атрибута, удалив из названия приставку <code>data-</code>.</p><p>Добавлять содержимое в HTML-элемент через JavaScript можно с помощью свойства <code>innerHTML</code>:</p><pre>var control = document.querySelector('.control');\ncontrol.innerHTML = 'walden';\n</pre><p>Присвоенная свойству <code>innerHTML</code> строка заменяет всё содержимое HTML-элемента. В этой строке можно использовать любой HTML-код.</p><p>Давайте попробуем получить значение data-атрибута из JavaScript и записать полученную строку в переключатель.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: используем data-атрибуты`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-5.jpg");\n}\n\n`+tc1,hidden:th1,js:`var walden = document.querySelector('selector');\n\nif (walden) {\n    walden.innerHTML = walden.dataset.attribute;\n}`,tasks:[{message:"Найдите и сохраните в переменную <code>walden</code> переключатель <code class='keyclass'>li.walden</code>.",check:function(o){return o&&o.walden&&o.walden===document.querySelector('#view-after li.walden')}},{message:"A затем замените у <code class='keyclass'>walden.dataset</code> свойство <code class='keytext'>attribute</code> на <code class='keyvalue'>filter</code>, чтобы внутри переключателя появилось его название.",check:function(){if(Academy.JS){var j=getJ();if(~j.indexOf(`walden.innerHTML=walden.dataset.filter`)&&!~j.indexOf(`walden.innerHTML=walden.dataset.attribute`))return true}}}],blocked:"4",editorOff:"4"},
"lesson1228":{theory:`<div><h1>Кекстаграм: знакомимся с циклом</h1><p>Если нужно совершить несколько однотипных действий, то можно использовать цикл <code>for</code>. Вот его синтаксис:</p><pre>for (var num = 0; num &lt;= 5; num++) {\n    console.log(num);\n}\n// Выведет в «консоль» числа 0, 1, 2, 3, 4 и 5\n</pre><p>Ранее мы использовали метод <code>querySelector</code>, который возвращает только один элемент: первый элемент, соответствующий селектору.</p><p>Другой метод <code>querySelectorAll</code> возвращает все элементы, соответствующие селектору.</p><p>С помощью <code>for</code> удобно перебирать найденные элементы:</p><pre>var controls = document.querySelectorAll('.toggle-controls li');\nfor (var i = 0; i &lt; controls.length; i++) {\n    controls[i].innerHTML = 'переключатель';\n}\n// Во все элементы списка переключателей запишется строка «переключатель».\n</pre><p>В Кекстаграме может быть много фильтров, количество и названия которых мы можем не знать. Поэтому нельзя искать каждый переключатель по его классу и задавать его название.</p><p>Лучше найти все переключатели внутри списка и перебрать их с помощью цикла. И внутри цикла задавать название каждому переключателю.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: знакомимся с циклом`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-5.jpg");\n}\n\n`+tc1,hidden:th1,js:`var controls = document.querySelectorAll('selector');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.attribute;\n}`,tasks: [{message:"Найдите и сохраните все переключатели <code class='keyclass'>.toggle-controls li</code> в переменную <code>controls</code>.",check:function(){if(Academy.JS){var j=getJ();var e=j.indexOf(`varcontrols=document.querySelectorAll('.toggle-controlsli')`);if(!~e)e=j.indexOf(`varcontrols=document.querySelectorAll(".toggle-controlsli")`);if(!~e)e=j.indexOf('varcontrols=document.querySelectorAll(`.toggle-controlsli`)');if(~e)return true;}}},{message:"A затем замените у объекта <code class='keyclass'>dataset</code> свойство <code class='keytext'>attribute</code> на <code class='keyvalue'>filter</code>.",check:function(){return ~getJ().indexOf(`controls[i].innerHTML=controls[i].dataset.filter`)}}],blocked:"4",editorOff:"4"},
"lesson1229":{theory:`<div><h1>Кекстаграм: используем цикл</h1><p>Начнём исправлять ошибки в функции переключения фильтров, которые возникают, когда она запускается несколько раз.</p><p>Первая ошибка заключается в том, что все переключатели подсвечиваются как активные. Причина в том, что внутри функции класс <code>active</code> добавляется текущему переключателю, но не удаляется у ставших неактивными.</p><p>Простейшим решением проблемы будет сначала удалять класс <code>active</code> у всех переключателей, а затем добавлять его текущему.</p><p>На предыдущем шаге мы уже находили все переключатели и сохраняли их в переменную <code>controls</code>:</p><pre>var controls = document.querySelectorAll('.toggle-controls li');</pre><p>Теперь мы можем использовать эту переменную внутри функции — добавить в начало функции ещё один цикл, который пройдётся по всем переключателям и удалит у них класс.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: используем цикл`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-5.jpg");\n}\n\n`+tc1,hidden:th1,js:`var controls = document.querySelectorAll('.toggle-controls li');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.filter;\n}\n\nfunction toggleFilter(filterName) {\n    for (var i = 0; i < controls.length; i++) {\n        controls[i].classList.remove('selector');\n    }\n\n    var control = document.querySelector('li.' + filterName);\n    if (control) {\n        control.classList.add('active');\n    }\n\n    var photo = document.querySelector('.photo');\n    if (photo) {\n        photo.classList.add(filterName);\n    }\n}\n\ntoggleFilter('walden');\ntoggleFilter('kelvin');\ntoggleFilter('toaster');`,tasks:[{message:"В цикле внутри функции удалите класс <code class='keyclass'>active</code> у всех переключателей.",check:function(object){if(Academy.JS){var j=getJ();var e=j.indexOf(`controls[i].classList.remove('active')`);if(!~e)e=j.indexOf(`controls[i].classList.remove("active")`);if(!~e)e=j.indexOf('controls[i].classList.remove(`active`)');if(~e)return true}}},{message:"Затем переместите вызов <code>toggleFilter(<code class='keytext'>'walden'</code>);</code> в конец кода.",check:function(o){if(o.hA)return true;if(Academy.JS){var j=getJ();var e=j.indexOf(`toggleFilter('walden')`);if(!~e)e=j.indexOf(`toggleFilter("walden")`);if(!~e)e=j.indexOf('toggleFilter(`walden`)');var i=j.indexOf(`toggleFilter('kelvin')`);if(!~i)i=j.indexOf(`toggleFilter("kelvin")`);if(!~i)i=j.indexOf('toggleFilter(`kelvin`)');var l=j.indexOf(`toggleFilter('toaster')`);if(!~l)l=j.indexOf(`toggleFilter("toaster")`);if(!~l)l=j.indexOf('toggleFilter(`toaster`)');if(~e&&~i&&~l&&e>i&&e>l){Academy.vars.hA=true;return true}}}},{message:"Потом перенесите <code>toggleFilter(<code class='keytext'>'kelvin'</code>);</code> в конец кода.",check:function(){if(Academy.JS){var j=getJ();var e=j.indexOf(`toggleFilter('walden')`);if(!~e)e=j.indexOf(`toggleFilter("walden")`);if(!~e)e=j.indexOf('toggleFilter(`walden`)');var i=j.indexOf(`toggleFilter('kelvin')`,e);if(!~i)i=j.indexOf(`toggleFilter("kelvin")`,e);if(!~i)i=j.indexOf('toggleFilter(`kelvin`)',e);var l=j.indexOf(`toggleFilter('toaster')`);if(!~l)l=j.indexOf(`toggleFilter("toaster")`);if(!~l)l=j.indexOf('toggleFilter(`toaster`)');if(~e&&~i&&~l&&i>l) return true}}}],blocked:"4",editorOff:"4"},
"lesson1230":{theory:`<div><h1>Кекстаграм: завершаем функцию переключения</h1><p>Ошибку с выделением активного переключателя исправили. Осталась вторая ошибка: фильтр на большой фотографии применяется неправильно. Причина — лишние классы фильтров у большой фотографии. Вот что происходит с HTML, когда функция переключения вызывается несколько раз:</p><pre>&lt;div class="photo walden toaster kelvin"&gt;&lt;/div&gt;</pre><p>Чтобы исправить ошибку, надо удалять классы фильтров у блока фотографии при каждом переключении. Но класс <code>photo</code> удалять нельзя. Классы фильтров мы знаем, ведь они хранятся в data-атрибутах переключателей.</p><p>Поэтому в том же цикле, где сбрасывается класс <code>active</code>, можно у каждого переключателя брать название фильтра и удалять этот класс у большого фото:</p><pre>for (var i = 0; i &lt; controls.length; i++) {\n    ...\n    photo.classList.remove(<i>имя фильтра из dataset-атрибута переключателя</i>);\n}\n</pre><p>И ещё одна важная деталь. Переменная <code>photo</code> теперь используется в самом начале функции, поэтому мы вынесем строчку поиска переменной из функции в самый верх кода:</p><pre>var controls = document.querySelectorAll('.toggle-controls li');\nvar photo = document.querySelector('.photo');\n</pre><p>А внутри функции переменную <code>photo</code> надо удалить. Заодно мы ускорим работу скрипта, избавившись от ненужного поиска элемента <code>.photo</code>, который происходил при каждом переключении фильтра.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: завершаем функцию переключения`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-5.jpg");\n}\n\n`+tc1,hidden:th1,js:`var controls = document.querySelectorAll('.toggle-controls li');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.filter;\n}\n\nfunction toggleFilter(filterName) {\n    for (var i = 0; i < controls.length; i++) {\n        controls[i].classList.remove('active');\n        photo.classList.remove(controls[i].dataset.attribute);\n    }\n\n    var control = document.querySelector('li.' + filterName);\n    if (control) {\n        control.classList.add('active');\n    }\n\n    var photo = document.querySelector('.photo');\n    if (photo) {\n        photo.classList.add(filterName);\n    }\n}\n\ntoggleFilter('walden');\ntoggleFilter('kelvin');\ntoggleFilter('toaster');`,tasks:[{message:"Перенесите переменную <code>photo</code> из функции на <code class='keytext'>2</code> строку кода.",check:function(o){if(Academy.JS&&o&&o.photo){let j=getJ();var e=j.indexOf('photo=document.querySelector(');if(~e&&~j.indexOf('functiontoggleFilter',e)&&o.photo===document.querySelector('#view-after .photo'))return true}}},{message:"Затем в цикле внутри функции замените <code class='keytext'>dataset.attribute</code> на <code class='keyclass'>dataset.filter</code>.",check:function(){if(Academy.JS){var j=getJ();var i=j.indexOf('functiontoggleFilter');if(~i&&~j.indexOf('photo.classList.remove(controls[i].dataset.filter)',i))return true}}},{message:"Поместите <code>toggleFilter(<code class='keytext'>'walden'</code>);</code> в конец кода.",check:function(o){if(o.hA)return true;if(Academy.JS){var js=getJ();var e=js.indexOf(`toggleFilter('walden')`);if(!~e)e=js.indexOf(`toggleFilter("walden")`);if(!~e)e=js.indexOf('toggleFilter(`walden`)');var i=js.indexOf(`toggleFilter('kelvin')`);if(!~i)i=js.indexOf(`toggleFilter("kelvin")`);if(!~i)i=js.indexOf('toggleFilter(`kelvin`)');var l=js.indexOf(`toggleFilter('toaster')`);if(!~l)l=js.indexOf(`toggleFilter("toaster")`);if(!~l)l=js.indexOf('toggleFilter(`toaster`)');if(~e&&~i&&~l&&e>i&&e>l){Academy.vars.hA=true;return true}}}},{message:"Поместите <code>toggleFilter(<code class='keytext'>'kelvin'</code>);</code> в конец кода.",check:function(){if(Academy.JS){var j=getJ();var e=j.indexOf(`toggleFilter('walden')`);if(!~e)e=j.indexOf(`toggleFilter("walden")`);if(!~e)e=j.indexOf('toggleFilter(`walden`)');var i=j.indexOf(`toggleFilter('kelvin')`,e);if(!~i)i=j.indexOf(`toggleFilter("kelvin")`,e);if(!~i)i=j.indexOf('toggleFilter(`kelvin`)',e);var l=j.indexOf(`toggleFilter('toaster')`);if(!~l)l=j.indexOf(`toggleFilter("toaster")`);if(!~l)l=j.indexOf('toggleFilter(`toaster`)');if(~e&&~i&&~l&&i>l)return true}}}],blocked:"4",editorOff:"4"},
"lesson1231":{theory:`<div><h1>Кекстаграм: программируем переключатели, часть 1</h1><p>В предыдущих шагах мы подготовили функцию для переключения фильтров и запускали её из JavaScript-кода. Сейчас мы сделаем так, чтобы пользователь сам мог менять фильтры, щёлкая по переключателям мышкой.</p><p>Для этого нам нужно научиться отслеживать и обрабатывать события, которые происходят на веб-странице. Для этого в JavaScript, существует метод <code>addEventListener</code>:</p><pre>var toaster = document.querySelector('li.toaster');\ntoaster.addEventListener('click', function() {\n    toggleFilter(toaster.dataset.filter);\n});\n</pre><p>В этом фрагменте кода мы сделали следующее:</p><ol><li>Нашли элемент списка и у него вызвали метод <code>addEventListener</code>.</li><li>Указали отслеживать событие <code>click</code> или «щелчок мыши».</li><li>Для щелчков указали функцию-обработчик без названия, внутри которой вызвали функцию переключения фильтров.</li></ol><p>Метод <code>addEventListener</code> был вызван у одного элемента, поэтому будут обрабатываться  события только этого элемента. Первый параметр задаёт тип события, второй — функцию-обработчик.</p><p>Потренируемся. Сделаем так, чтобы при щелчке на первый переключатель включался первый фильтр.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: программируем переключатели, часть 1`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-5.jpg");\n}\n\n`+tc1,hidden:th1,js:`var controls = document.querySelectorAll('.toggle-controls li');\nvar photo = document.querySelector('.photo');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.filter;\n}\n\nfunction toggleFilter(filterName) {\n    for (var i = 0; i < controls.length; i++) {\n        controls[i].classList.remove('active');\n        photo.classList.remove(controls[i].dataset.filter);\n    }\n\n    var control = document.querySelector('li.' + filterName);\n    if (control) {\n        control.classList.add('active');\n    }\n\n    if (photo) {\n        photo.classList.add(filterName);\n    }\n}\n\nvar walden = document.querySelector('selector');\nif (walden) {\n    walden.addEventListener('click', function() {\n        toggleFilter(walden.dataset.attribute);\n    });\n}`,tasks:[{message:"Найдите и сохраните переключатель <code class='keyclass'>li.walden</code> в переменную <code>walden</code>.",check:(o)=>o&&o.walden&&o.walden===document.querySelector('#view-after li.walden')},{message:"A в обработчике щелчка на переключатель <code>walden</code> свойство <code class='keytext'>attribute</code> у <code class='keyvalue'>dataset</code> замените на <code class='keyclass'>filter</code>.",check:(o)=>{if(o&&o.walden){var j=getJ();var i=j.indexOf('walden.addEventListener(');if(~i&&~j.indexOf('toggleFilter(walden.dataset.filter)',i)){o.walden.addEventListener('click',()=>Academy.vars.hA=true);return true}}}},{message:"Нажмите на переключатель <code>walden</code> для проверки работы.",check:(o)=>o.hA}],blocked:"4",editorOff:"4"},
"lesson1232":{theory:`<div><h1>Кекстаграм: программируем переключатели, часть 2</h1><p>Мы добавили обработку щелчка для одного переключателя. Не забываем, что переключателей может быть много, их количество и названия наперёд мы знать не можем.</p><p>Поэтому, чтобы обрабатывать щелчки по всем переключателям, лучше воспользоваться циклом. Тем более, что цикл по всем переключателям у нас уже есть.</p><p>А чтобы сократить код в цикле, создадим новую функцию:</p><pre>function clickControl(control) {\n  control.addEventListener('click', function() {\n      toggleFilter(control.dataset.filter);\n  });\n};\n</pre><p>Функция <code>clickControl</code> принимает найденный элемент и добавляет ему обработчик щелчков мыши, в котором вызывается функция переключения фильтра. Название фильтра для функции переключения берётся из data-атрибута самого элемента.</p><p>Благодаря <code>clickControl</code> нам нужно добавить только одну строчку в цикл, чтобы все переключатели заработали:</p><pre>for (var i = 0; i &lt; controls.length; i++) {\n    ... \n    clickControl(controls[i]);\n}\n</pre><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: программируем переключатели, часть 2`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n`+tc1,hidden:th1,js:`var controls = document.querySelectorAll('.toggle-controls li');\nvar photo = document.querySelector('.photo');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.filter;\n    // вызов функции clickControl добавить здесь\n}\n\nfunction toggleFilter(filterName) {\n    for (var i = 0; i < controls.length; i++) {\n        controls[i].classList.remove('active');\n        photo.classList.remove(controls[i].dataset.filter);\n    }\n\n    var control = document.querySelector('li.' + filterName);\n    if (control) {\n        control.classList.add('active');\n    }\n\n    if (photo) {\n        photo.classList.add(filterName);\n    }\n}\n\nfunction clickControl(control) {\n    control.addEventListener('click', function() {\n        toggleFilter(control.dataset.filter);\n    });\n};`,tasks:[{message:"В цикл по элементам <code class='keyclass'>controls</code>, который находится вне функции <code>toggleFilter</code>, добавьте вызов функции <code>clickControl(<code class='keytext'>controls[i]</code>)</code>.",check:(o)=>{var j=getJ();var i=j.indexOf('i=0;i<controls.length;i++){');var e=j.indexOf('clickControl(controls[i])',i);if(~i&&~e&&~j.indexOf('functiontoggleFilter(filterName)',e)){if(!o.hA){Academy.vars.hA=1;Academy.vars.hL=()=>{Academy.vars.hA++}};var c=document.querySelectorAll('#view-after li');for(i=0;i<c.length;i++){c[i].removeEventListener('click',Academy.vars.hL);c[i].addEventListener('click',Academy.vars.hL)};return true}}},{message:"Нажимайте на переключатели для проверки работы.",check:(o)=>o.hA>3}],blocked:"4",editorOff:"4"},
"lesson1233":{theory:`<div><h1>Кекстаграм: завершаем переключатели</h1><p>И снова улучшим код. В функции переключения есть проблема: в качестве параметра используются названия фильтра, по которому каждый раз происходит поиск переключателя. Но ведь можно передавать в функцию сами переключатели. Для этого.</p><p>1. Изменим обработчик внутри <code>clickControl</code>:</p><pre><em>Было:</em>  toggleFilter(control.dataset.filter);\n<em>Стало:</em> toggleFilter(control);\n</pre><p>2. Изменим параметр у <code>toggleFilter</code>, теперь это не строка, а элемент:</p><pre><em>Было:</em>  function toggleFilter(filterName)\n<em>Стало:</em> function toggleFilter(control)\n</pre><p>3. В <code>toggleFilter</code> передаётся переключатель и искать его уже не надо, удаляем лишний код: </p><pre><span style="text-decoration:line-through;">var control = document.querySelector('li.' + filterName);</span>\n<span style="text-decoration:line-through;">if (control) {</span>\n    control.classList.add('active');\n<span style="text-decoration:line-through;">}</span>\n</pre><p>4. Название фильтра для фото теперь берём из data-атрибута переключателя:</p><pre><em>Было:</em>  photo.classList.add(filterName);\n<em>Стало:</em> photo.classList.add(control.dataset.filter);\n</pre><p>А теперь вы самостятельно сделаете последний штрих! При загрузке страницы должен быть выбран фильтр по умолчанию. Для этого нужно в конце кода добавить новую переменную, сохранить в неё нужный переключатель и с этой переменной вызвать функцию переключения.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: завершаем переключатели`+tb2,css:`.photo {\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n`+tc1,hidden:th1,js:`var controls = document.querySelectorAll('.toggle-controls li');\nvar photo = document.querySelector('.photo');\n\nfor (var i = 0; i < controls.length; i++) {\n    controls[i].innerHTML = controls[i].dataset.filter;\n    clickControl(controls[i]);\n}\n\nfunction toggleFilter(control) {\n    for (var i = 0; i < controls.length; i++) {\n        controls[i].classList.remove('active');\n        photo.classList.remove(controls[i].dataset.filter);\n    }\n\n    control.classList.add('active');\n\n    if (photo) {\n        photo.classList.add(control.dataset.filter);\n    }\n}\n\nfunction clickControl(control) {\n    control.addEventListener('click', function() {\n        toggleFilter(control);\n    });\n}\n\nvar defaultFilter = document.querySelector('selector');`,tasks:[{message:"Добавьте выбор фильтра по умолчанию: В конце кода в переменную <code>defaultFilter</code> сохраните переключатель <code class='keyclass'>li.toaster</code>.",check:(o)=>o&&o.defaultFilter&&o.defaultFilter===document.querySelector('#view-after li.toaster')},{message: "A следующей строкой добавьте вызов функции <code>toggleFilter(<code class='keytext'>defaultFilter</code>);</code>.",check:()=>{var j=getJ();var i=j.indexOf('defaultFilter=document.');return ~i&&~j.indexOf('toggleFilter(defaultFilter)',i)}}],blocked:"4",editorOff:"4"},
"lesson1234":{theory:`<div><h1>Кекстаграм: сравнение фото</h1><p>Итак, приложение работает! По нажатию на переключатели меняются фильтры.</p><p>В последней серии заданий мы добавим возможность сравнивать изображения с фильтром и без фильтра.</p><p>Сначала добавим блок с оригинальной фотографией. У этого блока будут такие же размеры, координаты и фотография на фоне, что и у блока с фильтром. Но оригинал будет расположен над «фильтрованным» фото.</p><p>Доработаем разметку и стили.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: сравнение фото`+tb2,css:`.photos {\n    position: relative;\n}\n\n.photo,\n.photo-original {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n}\n\n.photo {\n    z-index: 10;\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.photo-original {\n    z-index: 20;\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n`+tc1,hidden:th1,js:``+tj1,tasks:[{message:"В блок <code class='keyclass'>.photos</code> после блока <code class='keytext'>.photo</code> добавьте див с классом <code class='keyvalue'>photo-original</code>.",check:()=>{var e=document.querySelector('#view-after .photos .photo-original');return e&&e.previousElementSibling&&e.previousElementSibling.classList.contains('photo')&&e.tagName&&e.tagName.toLowerCase()==='div'}},{message:"Затем в <code class='keyword'>CSS</code> для <code class='keyclass'>.photo-original</code> задайте ширину <code class='keytext'>50%</code>.",check:()=>{var e=document.querySelector('#view-after .photo-original');return e&&getComputedStyle(e).width=="160px"}},{message:"И фоновое изображение <code class='keytext'>url('images/courses/59/spb-1.jpg')</code>.",check:()=>{var e=document.querySelector('#view-after .photo-original');return e&&~getComputedStyle(e).backgroundImage.indexOf('images/courses/59/spb-1.jpg')}}],blocked:"3",editorOff:"3"},
"lesson1235":{theory:`<div><h1>Кекстаграм: ползунок-разделитель</h1><p>Теперь нам нужен специальный ползунок-разделитель на границе двух фотографий.</p><p>С помощью этого ползунка мы будем изменять ширину фотографии-оригинала, чтобы сравнивать разные части изображений.</p><p>Ползунок мы разместим в том же блоке, что и фотографии, спозиционируем его абсолютно и зададим координаты таким образом, чтобы с помощью JavaScript было удобно его перемещать.</p><p>По умолчанию ползунок будет находиться в центре блока с фото. Для центровки мы применим приём с трансформацией перемещения, рассмотренный в курсе <a target="_blank" href="/courses/71/run/18">«Двумерные трансформации»</a>.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: ползунок-разделитель</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n    <div class="photo-original"></div>\n    <!--\n    Скопируйте эту стрелку\n    ↔\n    внутрь разделителя, когда добавите его в код.\n    -->\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden" data-filter="walden"></li>\n    <li class="toaster" data-filter="toaster"></li>\n    <li class="kelvin" data-filter="kelvin"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.photos {\n    position: relative;\n}\n\n.photo,\n.photo-original {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n}\n\n.photo {\n    z-index: 10;\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.photo-original {\n    z-index: 20;\n    width: 50%;\n    background-image: url("images/courses/59/spb-1.jpg");\n}\n\n.separator {\n    position: absolute;\n    z-index: 30;\n    width: 30px;\n    height: 30px;\n    border: 2px solid #ffffff;\n    border-radius: 50%;\n}\n\n`+tc1,hidden:th1+th2,js:``+tj1,tasks:[{message:"В блок <code class='keyclass'>.photos</code> добавьте див с классом <code class='keyvalue'>separator</code>.",check:()=>{var e=document.querySelector('#view-after .photos .separator');return e&&e.tagName&&e.tagName.toLowerCase()==='div'&&e.textContent.replace(/ |\n|\t/gi,'')==='↔'}},{message:"Задайте для него координаты <code class='keyvalue'>top</code> и <code class='keyvalue'>left</code> равные <code class='keytext'>50%</code>.",check:()=>{var e=document.querySelector('#view-after .photos .separator');if(!e)return;var s=getComputedStyle(e);return s.left=="160px"&&s.top=="160px"}},{message:"A затем трансформацию <code class='keyvalue'>translate(-50%, -50%)</code>.",check:()=>{var d=document.querySelector('#view-after .photos .separator');var c=Academy.CSS.getValue().replace(/ |\t|\n/gi,'');var i=c.indexOf('.separator{');var e=c.indexOf('transform:translate(-50%,-50%);',i);var l=c.indexOf('}',i);return (d&&~getComputedStyle(d).transform.replace(/ /gi,'').indexOf("matrix(1,0,0,1,-17,-17"))||(~i&&~e&&~l&&e<l)}}],blocked:"3",editorOff:"3"},
"lesson1236":{theory:`<div><h1>Кекстаграм: двигаем ползунок</h1><p>Разберём механику «перемещения» разделителя с помощью JavaScript. Чтобы получить этот эффект, нужно изменять стили двух элементов:</p><ol><li>Менять левую координату ползунка-разделителя, чтобы он двигался вправо или влево.</li><li>Менять ширину блока с изображением-оригиналом так, чтобы граница фотографий оставалась под ползунком.</li></ol><p>К счастью, мы подготовили очень удобную вёрстку, в которой начало координат у обоих блоков совпадает. Поэтому достаточно задавать одинаковые значения для левой координаты разделителя и ширины блока с оригиналом фото.</p><p>Чтобы изменить CSS-свойство элемента в скрипте, нужно обратиться к свойству <code>style</code> элемента. Например:</p><pre>var element = document.querySelector('.photo-original');\nelement.style.width = '10px';</pre><p>В этом коде элементу задаётся ширина <code>10px</code>.</p><p>С помощью <code>element.style</code> можно и получать, и изменять значения свойств.</p><p>Но названия свойств в JavaScript не всегда совпадают с их названиями в CSS. Например, CSS-свойство <code>left</code> совпадает с <code>style.left</code>, но CSS-свойство <code>baсkground-color</code> уже отличается: <code>style.backgroundColor</code>.</p><p>Давайте подвигаем ползунок.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: двигаем ползунок</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n    <div class="photo-original"></div>\n    <div class="separator">↔</div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden" data-filter="walden"></li>\n    <li class="toaster" data-filter="toaster"></li>\n    <li class="kelvin" data-filter="kelvin"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:tc1+tc2,hidden:th1+th2,js:`var original = document.querySelector('selector');\nvar separator = document.querySelector('selector');\n\nif (original && separator) {\n    original.style.width = '50%';\n    separator.style.left = '50%';\n}\n\n`+tj1,tasks:[{message:"Cохраните элемент <code class='keyclass'>.photo-original</code> в переменную <code>original</code>, элемент <code class='keyclass'>.separator</code> в переменную <code>separator</code>.",check:(o)=>o&&o.original===document.querySelector('#view-after .photo-original')&&o.separator===document.querySelector('#view-after .separator')},{message:"Задайте значение <code class='keytext'>25%</code> для ширины <code>original</code> и для левой координаты <code>separator</code>,",check:(o)=>{if(o.hA)return true;var j=getJ();var e=j.indexOf('original.style.width="25%"');if(!~e)e=j.indexOf("original.style.width='25%'");if(!~e)e=j.indexOf("original.style.width=`25%`");if(!~e)return false;e=j.indexOf('separator.style.left="25%"');if(!~e)e=j.indexOf("separator.style.left='25%'");if(!~e)e=j.indexOf("separator.style.left=`25%`");if(!~e)return false;Academy.vars.hA=true;return true;}},{message:"A затем поменяйте оба значения на <code class='keyvalue'>75%</code>.",check:()=>{var j=getJ();var e=j.indexOf('original.style.width="75%"');if(!~e)e=j.indexOf("original.style.width='75%'");if(!~e)e=j.indexOf("original.style.width=`75%`");if(!~e)return false;e=j.indexOf('separator.style.left="75%"');if(!~e)e=j.indexOf("separator.style.left='75%'");if(!~e)e=j.indexOf("separator.style.left=`75%`");return ~e;}}],blocked:"4",editorOff:"4"},
"lesson1237":{theory:`<div><h1>Кекстаграм: четвёртый фильтр</h1><p>Давайте создадим ещё один набор фильтров для большой фотографии. Он будет называться <code>oldie</code>.</p><p>Сначала создадим необходимую разметку.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: четвёртый фильтр</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n    <div class="photo-original"></div>\n    <div class="separator">↔</div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden" data-filter="walden"></li>\n    <li class="toaster" data-filter="toaster"></li>\n    <li class="kelvin" data-filter="kelvin"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:tc1+tc2,hidden:th1+th2,js:`var original = document.querySelector('selector');\nvar separator = document.querySelector('selector');\n\nif (original && separator) {\n    original.style.width = '50%';\n    separator.style.left = '50%';\n}\n\n`+tj1,tasks:[{message:"В список <code class='keyclass'>.toggle-controls</code> добавьте четвёртый элемент с классом <code class='keyvalue'>oldie</code>.",check:()=>{var u=document.querySelector('#view-after .toggle-controls');if(u&&u.children.length>3){var e=u.children[3];return e&&e.classList&&e.classList.contains('oldie')}}},{message:"И атрибутом <code>data-filter</code> со значением <code class='keytext'>oldie</code>.",check:()=>{var u=document.querySelector('#view-after .toggle-controls');if(u&&u.children.length>3){var e=u.children[3];return e&&e.dataset&&e.dataset.filter==="oldie"}}},{message:"В скрипте замените фильтр по умолчанию на <code class='keyvalue'>oldie</code>.",check:(o)=>o&&o.defaultFilter===document.querySelector('#view-after li.oldie')}],blocked:"2",editorOff:"2"},
"lesson1238":{theory:`<div><h1>Кекстаграм: четвёртый фильтр, завершение</small></h1><p>Теперь для класса <code>.oldie</code> создадим набор фильтров.</p><p>Эти фильтры сделают фотографию слегка «сумасшедшей».</p><p>Не будем их описывать, лучше просто увидеть.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: четвёртый фильтр, завершение</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n    <div class="photo-original"></div>\n    <div class="separator">↔</div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden" data-filter="walden"></li>\n    <li class="toaster" data-filter="toaster"></li>\n    <li class="kelvin" data-filter="kelvin"></li>\n    <li class="oldie" data-filter="oldie"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:tc1+`\n\n.oldie {\n}`+tc2,hidden:th1+th2,js:`var original = document.querySelector('selector');\nvar separator = document.querySelector('selector');\n\nif (original && separator) {\n    original.style.width = '50%';\n    separator.style.left = '50%';\n}\n\n`+tj1+`\ntoggleFilter(document.querySelector('li.oldie'));`,tasks:[{message:"Для класса <code class='keyclass'>.oldie</code> задайте фильтр со значением <code class='keyvalue'>contrast(2)</code>.",check:(o)=>{if(!o.hA)if(getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(2)")Academy.vars.hA=1;return o.hA>0}},{message:"Затем добавьте в фильтр значение <code class='keyvalue'>saturate(5)</code>.",check:(o)=>{if(o.hA===1)if(getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(2) saturate(5)")Academy.vars.hA=2;return o.hA>1}},{message:"После него значение <code class='keyvalue'>hue-rotate(-180deg)</code>.",check:(o)=>{if(o.hA===2&&getComputedStyle(document.querySelector('#view-after .photo')).filter=="contrast(2) saturate(5) hue-rotate(-180deg)")Academy.vars.hA=3;return o&&o.hA===3}}],blocked:"5",editorOff:"5"},
"lesson1239":{theory:`<div><h1>Кекстаграм: финал</h1><p>Чтобы пользователь мог самостоятельно перемещать разделитель с помощью мыши, нужно добавить обработку событий перетягивания. Это достаточно сложная задача, которую мы будем рассматривать в одном из последующих курсов.</p><p>А сейчас мы подготовили скрипт, в котором перетягивание уже реализовано, вам осталось только подключить его к странице.</p><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Кекстаграм: финал</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <div class="photos">\n    <div class="photo"></div>\n    <div class="photo-original"></div>\n    <div class="separator">↔</div>\n  </div>\n  <ul class="toggle-controls">\n    <li class="walden" data-filter="walden"></li>\n    <li class="toaster" data-filter="toaster"></li>\n    <li class="kelvin" data-filter="kelvin"></li>\n    <li class="oldie" data-filter="oldie"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:tc1+`\n\n.oldie {\n    filter: contrast(2) saturate(5) hue-rotate(-180deg);\n}\n\n.willow {\n    filter: saturate(0.02) contrast(0.85) brightness(1.2) sepia(0.02);\n}`+tc2,hidden:th1+th2,js:`var original = document.querySelector('.photo-original');\nvar separator = document.querySelector('.separator');\n\nif (original && separator) {\n    original.style.width = '50%';\n    separator.style.left = '50%';\n}\n\n`+tj1+`\ntoggleFilter(document.querySelector('li.oldie'));`,tasks:[{message:"Добавьте перед закрывающим тегом <code class='keyword'>&#60;/body></code> скрипт <code class='keytext'>separator.js</code>",check:(o)=>{if(o.hH)return true;if(!o.hE){Academy.vars.hE=true;document.querySelector('#view-before .photo-original').style.width='50%';document.querySelector('#view-before .separator').style.left='50%';Academy.vars.cc=(c)=>{c.addEventListener('click',function(){Academy.vars.tF(c)})};Academy.vars.tF=(c)=>{var a=document.querySelectorAll('#view-before .toggle-controls li');var p=document.querySelector('#view-before .photo');for(var i=0;i<a.length;i++){a[i].classList.remove('active');p.classList.remove(a[i].dataset.filter);};c.classList.add('active');if(p)p.classList.add(c.dataset.filter)};var a=document.querySelectorAll('#view-before .toggle-controls li');for(var i=0;i<a.length;i++){a[i].innerHTML=a[i].dataset.filter;Academy.vars.cc(a[i]);}Academy.vars.tF(document.querySelector('#view-before li.oldie'));var m=document.querySelectorAll('#lesson-tasks img');Academy.switchCSSHTML();m[0].click();m[1].click();}var s=document.querySelector('#view-after .view-body script:last-of-type');if(s&&~s.getAttribute('src').indexOf('separator.js')){Academy.vars.hH=true;fH3();return true}}},{message:"Попробуйте перетаскивать разделитель на фотографии в окне <code class='keyword'>\"Было\"</code>(над панелью задач).",check:(o)=>o.hA}],blocked:"6",editorOff:"3"},
"lesson1240":{theory:`<div><h1>Испытание: игровые фишки</h1><p>В последнем испытании вам предстоит с помощью JavaScript пронумеровать игровые фишки, а также задать им нужные цвета.</p><p>Подсказки:</p><ul><li>в коде есть функции, которые нужно вызывать и передавать в них элементы;</li><li>порядок вызова функций важен;</li><li>небольшой участок JS-кода вам нужно написать самостоятельно;</li><li>номер игровой фишки можно получить из атрибута <code>data-number</code>.</li></ul><hr></div>`,html:`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Испытание: игровые фишки</title>\n  <link href="style.css" rel="stylesheet">\n</head>\n<body>\n  <ul class="chips">\n    <li data-number="1"></li>\n    <li data-number="2"></li>\n    <li data-number="3"></li>\n    <li data-number="4"></li>\n    <li data-number="9"></li>\n    <li data-number="10"></li>\n    <li data-number="11"></li>\n    <li data-number="12"></li>\n    <li data-number="5"></li>\n    <li data-number="6"></li>\n    <li data-number="7"></li>\n    <li data-number="8"></li>\n    <li data-number="13"></li>\n    <li data-number="14"></li>\n    <li data-number="15"></li>\n    <li data-number="16"></li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`li.color-1 {\n    border-color: #001f3f;\n}\n\nli.color-2 {\n    border-color: #0074d9;\n}\n\nli.color-3 {\n    border-color: #7fdbff;\n}\n\nli.color-4 {\n    border-color: #39cccc;\n}\n\nli.color-5 {\n    border-color: #3d9970;\n}\n\nli.color-6 {\n    border-color: #2ecc40;\n}\n\nli.color-7 {\n    border-color: #01ff70;\n}\n\nli.color-8 {\n    border-color: #ffdc00;\n}\n\nli.color-9 {\n    border-color: #ff851B;\n}\n\nli.color-10 {\n    border-color: #ff4136;\n}\n\nli.color-11 {\n    border-color: #85144b;\n}\n\nli.color-12 {\n    border-color: #f012Be;\n}\n\nli.color-13 {\n    border-color: #b10dc9;\n}\n\nli.color-14 {\n    border-color: #111111;\n}\n\nli.color-15 {\n    border-color: #aaaaaa;\n}\n\nli.color-16 {\n    border-color: #ffffff;\n}`,hidden:`body{margin:0;padding:10px 0 0;min-width:550px;margin:0;padding:0;width:100%;height:100%;background:url("images/courses/59/cover.jpg");}.chips{position:relative;top:5px;margin:0 auto;padding:0;width:340px;list-style:none;}.chips li{float:left;margin:5px 10px;width:35px;height:35px;border:15px solid;border-radius:50%;background-color:#ffffff;box-shadow:0 2px 1px 0 rgba(0,0,0,0.5);text-align:center;font-size:20px;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;line-height:35px;}`,js:`// Добавление класса элементу, переданному в качестве параметра. Название класса составляется с помощью data-атрибута этого элемента\nfunction setNumber(element) {\n    element.classList.add('color-' + element.dataset.number);\n}\n\n// Добавление элементу четырёхцветного фона\nfunction reColor(element) {\n    var baseColor = getComputedStyle(element).borderTopColor;\n    var color = baseColor.slice(4, baseColor.length-1).split(",");\n    element.style.borderTopColor = colorShift(color, 40);\n    element.style.borderRightColor = colorShift(color, 60);\n    element.style.borderBottomColor = colorShift(color, 80);\n    element.style.borderLeftColor = colorShift(color, 20);\n}\n\n// Смещение цветового тона\nfunction colorShift(color, shift) {\n    var rgb = '#';\n    for (var i = 0; i < 3; i++) {\n        var part = parseInt(color[i]) - shift;\n        part = Math.round(Math.min(Math.max(0, part), 255));\n        part = part.toString(16);\n        rgb += ('00' + part).substr(part.length);\n    }\n    return rgb;\n}\n`,tasks:[{message:`<button onclick="fH2()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p>В последнем испытании вам предстоит с помощью <code class='keytext'>JavaScript</code> пронумеровать игровые фишки, а также задать им нужные цвета.</p><p>Подсказки:</p><ul><li>В коде есть функции, которые нужно вызывать и передавать в них элементы;</li><li>Порядок вызова функций важен;</li><li>Небольшой участок <code class='keytext'>JS</code>-кода вам нужно написать самостоятельно;</li><li>Номер игровой фишки можно получить из атрибута <code class='keyvalue'>data-number</code>.</li></ul></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:()=>{if(!Academy.vars.hE){document.querySelector('#lesson-tasks ul').classList.add('test-list');var m=document.querySelectorAll('#lesson-tasks img');m[0].click();m[1].click();Academy.vars.hE = true;function sN(e){e.classList.add('color-'+e.dataset.number);};function rC(e){var c=getComputedStyle(e).borderTopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);e.style.borderTopColor=cS(c,40);e.style.borderRightColor=cS(c,60);e.style.borderBottomColor=cS(c,80);e.style.borderLeftColor=cS(c,20);};function cS(c,s){var rgb='#';for(var i=1;i<=3;i++){var p=parseInt(c[i])-s;p=Math.round(Math.min(Math.max(0,p),255));p=p.toString(16);rgb+=('00'+p).substr(p.length);};return rgb;};var b=document.querySelectorAll('#view-before li');for(var i=0;i<b.length;i++){var e=b[i];sN(e);rC(e);e.innerHTML=e.dataset.number;}};return Academy.vars.hA}}],blocked:"4",editorOff:"2"}
};
hL();