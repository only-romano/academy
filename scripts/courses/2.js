tc1=`h1 {\n    font-size: 28px;\n    font-family: "Monaco", "Courier", monospace;\n    color: #618ad2;\n}\n`;
LessonsData={
"lesson15":{theory:`<div><h1>С чего начинается HTML</h1><p>Каждый HTML-документ должен начинаться с декларации типа документа или «доктайпа». Тип документа нужен, чтобы браузер мог определить версию HTML и правильно отобразить страницу.</p><p>Например, для старой версии HTML 4.01 доктайп выглядит так:</p><pre><code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</code></pre><p>А для последней версии HTML уже намного проще:</p><pre><code>&lt;!DOCTYPE html&gt;</code></pre><p>Последнюю версию HTML ещё называют <code>HTML 5</code>. Но так как эта версия уже принята как стандарт и распространена почти везде, мы будем называть её просто HTML.</p></div>`,html:`<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">\n<html>\n<head>\n  <title>Доктайп</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n</body>\n</html>\n`,css:`body {\n    min-height: 500px;\n\n    background-color: #2f358f;\n    background-image: url("images/logo.png");\n    background-position: 50% 50%;\n    background-size: 200px;\n    background-repeat: no-repeat;\n}\n`,hidden:``,js:``,tasks:[{message:"Измените доктайп <code class='keyvalue'>HTML</code> на современный.",check:()=>{var h=getH();return ~h.search(/<!doctypehtml>/i)&&!~h.search(/<!doctypehtmlpublic/i)}}],blocked:"6",editorOff:"3"},
"lesson16":{theory:`<div><h1>Простейшая HTML-страница</h1><p>Простейшая HTML-страница состоит как минимум из трёх тегов.</p><p>Тег <code>&lt;html&gt;</code> — это контейнер, в котором находится всё содержимое страницы, включая теги <code>&lt;head&gt;</code> и <code>&lt;body&gt;</code>. Как правило, тег <code>&lt;html&gt;</code> идёт в документе вторым после доктайпа.</p><p> Тег <code>&lt;head&gt;</code> предназначен для хранения других элементов, цель которых — помочь браузеру в работе с данными. Содержимое этого тега не отображается напрямую.</p><p>Тег <code>&lt;body&gt;</code> предназначен для хранения содержания веб-страницы (контента), отображаемого в окне браузера.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Содержание страницы</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <!-- Содержание страницы -->\n</body>\n</html>\n`,css:`body {\n    font-size: 52px;\n    font-family: "Monaco", "Courier", monospace;\n}\n`,hidden:``,js:``,tasks:[{message:"Добавьте текст внутрь тега <code class='keyword'>&lt;body&gt;</code>. Как минимум <code class='keytext'>10</code> символов.",check:()=>document.querySelector('#view-after .view-body').textContent.length > 10}],blocked:"6",editorOff:"3"},
"lesson17":{theory:`<div><h1>Заголовок HTML-страницы</h1><p>Заголовок страницы это тот текст, который отображается в левом верхнем углу браузера, а также во вкладках.</p><p>Чтобы задать заголовок страницы, нужно использовать тег <code>&lt;title&gt;</code> внутри тега <code>&lt;head&gt;</code>. Например, вот так:</p><pre><code>&lt;head&gt;\n  &lt;title&gt;Курсы — HTML Academy&lt;/title&gt;\n&lt;/head&gt;</code></pre></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <title>Просто Кексик</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Тег &lt;title&gt;</h1>\n  <img src="images/courses/2/keks.jpg" alt="">\n  <p>Этот тег обозначает заголовок страницы.</p>\n  <p>Он позволяет очень удобно ориентироваться между множеством открытых вкладок.</p>\n  <p>Инструктор Кекс рекомендует использовать понятные заголовки.</p>\n</body>\n</html>\n`,css:tc1+`\nimg {\n    float: right;\n    width: 150px;\n    margin: 0 10px;\n\n    border-radius: 50px;\n}\n`,hidden:``,js:``,tasks:[{message:"Измените заголовок страницы с <code class='keytext'>Просто Кексик</code> на <code class='keyclass'>Инструктор Кекс</code>",check:()=>{var h=getH();return ~h.indexOf("<title>ИнструкторКекс</title>")&&!~h.indexOf("<title>ПростоКексик</title>")}}],blocked:"6",editorOff:"3"},
"lesson18":{theory:`<div><h1>Кодировка HTML-страницы</h1><p>Кодировку HTML-страницы нужно указывать для того, чтобы веб-браузер мог правильно отображать текст на странице. Если браузер неправильно угадает кодировку, то вместо текста будут отображаться иероглифы.</p><p>Чтобы сообщить браузеру кодировку HTML-страницы, необходимо внутри тега <code>&lt;head&gt;</code> использовать тег:</p><pre><code>&lt;meta charset="имя кодировки"&gt;</code></pre><p>Самая распространённая современная кодировка — <code>utf-8</code>. Используйте её во всех своих проектах.</p><p>Для кириллицы в Windows <code>charset</code> часто задавали как <code>windows-1251</code>. Но сейчас это считается плохой практикой.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="windows-1251">\n  <title>Кодировка HTML-страницы</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Кодировка</h1>\n  <p>Когда кодировка документа задана неверно, некоторые символы отображаются как «иероглифы», а некоторые нет.</p>\n</body>\n</html>\n`,css:tc1,hidden:``,js:``,tasks:[{message:"Сейчас кодировка задана неверно, поэтому текст в мини-браузере отображается неправильно.<br>Установите правильную кодировку: <code>utf-8</code>",check:()=>{var h=getH();var p=document.querySelector('#view-after p');if(!~h.search(/<metacharset=("|'|`)utf-8\1>/))p.textContent="Uuuuu, nichego neponyatno vsyo v strashnoi kodirovke... uuuuu.";else{p.textContent="Когда кодировка документа задана неверно, некоторые символы отображаются как «иероглифы», а некоторые нет.";return true}}}],blocked:"6",editorOff:"3"},
"lesson19":{theory:`<div><h1>Ключевые слова</h1><p>Есть целое семейство тегов <code>&lt;meta&gt;</code>, называемых мета-тегами. Их можно использовать внутри тега <code>&lt;head&gt;</code>.</p><p>Мета-теги различаются набором атрибутов и их значений, вот некоторые из атрибутов: <code>content</code>, <code>http-equiv</code>, <code>name</code> и <code>scheme</code>.</p><p>Мета-теги хранят полезную для браузеров и поисковых систем информацию. Один из таких тегов — это описание ключевых слов страницы. Задаётся он так:</p><pre><code>&lt;meta name="keywords" content="разные, ключевые, слова"&gt;</code></pre><p>В атрибуте <code>content</code> через запятую перечисляются самые важные слова из содержания страницы. Раньше этот тег был очень важен для поисковиков. Каково положение дел сейчас — большой секрет Яндекса и Гугла.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Ключевые слова</title>\n  <meta name="keywords" content="классы, стили, свойства">\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>&lt;meta name="keywords"&gt;</h1>\n  <p>Задаёт ключевые слова.</p>\n  <p>Этот мета-тег поисковые системы используют для того, чтобы определить релевантность ссылки. При формировании тега необходимо использовать только те слова, которые содержатся в самом документе.</p>\n</body>\n</html>\n`,css:tc1,hidden:``,js:``,tasks:[{message:"Измените ключевые слова <code class='keytext'>классы, стили, свойства</code> на более подходящие: <code class='keyvalue'>мета-теги, поисковые системы, ключевые слова</code>",check:()=>~getH().search(/<meta\S*content=("|'|`)мета-теги,поисковыесистемы,ключевыеслова\1\S*>\S*<\/head>/)}],blocked:"6",editorOff:"3"},
"lesson20":{theory:`<div><h1>Описание содержания страницы</h1><p>Ещё один полезный для поисковых систем мета-тег — краткое описание страницы. Оно задаётся так:</p><pre><code>&lt;meta name="description" content="краткое описание"&gt;</code></pre><p>В атрибуте <code>content</code> должно быть краткое содержание или аннотация страницы. Оно часто используется поисковиками при отображении результатов поиска.</p><p>Пойманный нами инженер из Яндекса не признался, важен ли этот тег для ранжирования, но дал ссылку на <a href="https://help.yandex.ru/webmaster/recommendations/using-meta-desc.xml" target="_blank" rel="nofollow noopener">рекомендации по составлению описаний</a>. Инженера из Гугла мы ещё только выслеживаем, так что следите за новостями.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Описание содержания страницы</title>\n  <meta name="keywords" content="мета-теги, поисковые системы, ключевые слова">\n  <meta name="description" content="Не пересказать">\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>&lt;meta name="description"&gt;</h1>\n  <p>Этот тег используется при создании краткого описания страницы, которое используется поисковыми системами во время индексации. Потом вы можете увидеть его в поисковой выдаче.</p>\n  <p>При отсутствии тега поисковые системы выдают в аннотации первую строку документа или отрывок, содержащий ключевые слова.</p>\n</body>\n</html>\n`,css:tc1,hidden:``,js:``,tasks:[{message:"Измените мета-описание страницы с <code class='keytext'>Не пересказать</code> на более полезное и ёмкое: <code class='keyvalue'>Как поисковые системы используют мета-описание страницы</code>",check:()=>~getH().search(/<metaname=("|'|`)description\1content=('|"|`)Какпоисковыесистемыиспользуютмета-описаниестраницы\2\S*>\S*<\/head>/)}],blocked:"6",editorOff:"3"},
"lesson21":{theory:`<div><h1>HTML-комментарии</h1><p>Комментарий в HTML-коде задаётся так:</p><pre><code>&lt;!-- любой текст --&gt;</code></pre><p>Текст внутри комментария не отображается браузером на странице. Комментарии обычно используются в следующих случаях:</p><ul><li>Для комментирования кода. Всегда полезно оставить подсказку.</li><li>Для временного отключения кода. Удалять код неудобно, так как его надо будет восстанавливать, а закомментировать и потом раскомментировать — самое лучшее решение.</li></ul><p>Комментарии можно использовать в любом месте страницы, кроме тега <code>&lt;title&gt;</code> — внутри него они не работают. Внутри тега <code>&lt;style&gt;</code> HTML-комментарии тоже не работают, так как в CSS код комментируется другим способом, о котором вы узнаете в курсе <a href="/courses/41">«Знакомство с CSS»</a>.</p><p></p>Чтобы быстро закомментировать или раскомментировать строку кода в HTML или CSS редакторе, можете использовать сочетание клавиш <kbd>ctrl + /</kbd> или <kbd>cmd + /</kbd>.</div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>HTML-комментарии</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <div id="section-1">\n    <h1>Комментарии для пояснений</h1>\n    <!--<p>Бывает, что в HTML-коде есть сложные участки, назначение которых не совсем понятно.</p>-->\n    <!--<p>В этом случае можно использовать комментарии, чтобы пояснить другому разработчику некоторые тонкости.</p>-->\n  </div>\n  <div id="section-2">\n    <h1>Или когда удалять жалко</h1>\n    <p>Иногда какой-то код очень жалко или страшно удалять.</p>\n    <p>Поэтому его могут временно закомментировать.</p>\n  </div>\n</body>\n</html>\n`,css:tc1,hidden:``,js:``,tasks:[{message:"Сначала раскомментируйте оба тега <code class='keyword'>&lt;p&gt;</code> в разделе <code class='keytext'>Комментарии для пояснений</code>",check:()=>document.querySelectorAll('#view-after [data-id="section-1"] p').length===2},{message:"Затем закомментируйте любой <code class='keyword'>&lt;p&gt;</code> в разделе <code class='keytext'>Или когда удалять жалко</code>",check:()=>document.querySelectorAll('#view-after [data-id="section-2"] p').length===1}],blocked:"6",editorOff:"3"},
"lesson22":{theory:`<div><h1>Подключение стилей</h1><p>Стили можно писать внутри HTML-кода страницы или подключать их как внешний файл.</p><p>В первом случае стили называются «встроенными» или «инлайновыми», а писать их нужно внутри тега <code>&lt;style&gt;</code>. Этот тег обычно размещают внутри <code>&lt;head&gt;</code>. Например:</p><pre><code>&lt;head&gt;\n  &lt;style&gt;\n    CSS-код\n  &lt;/style&gt;\n&lt;/head&gt;</code></pre><p>Внутри <code>&lt;style&gt;</code> пишут обычный CSS-код.</p><p>Инлайновые стили используют не так часто, например, для оптимизации скорости загрузки страницы. Чаще используют внешние стили, c которыми мы познакомимся позже.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Подключение стилей</title>\n  <!--<style>\n    h1 {\n      font-size: 28px;\n      font-family: "Monaco", "Courier", monospace;\n      color: #618ad2;\n    }\n  </style>-->\n</head>\n<body>\n  <h1>Подключение стилей</h1>\n  <p>Подключение стилей можно выполнять разными способами.</p>\n  <p>Один из них — описывать стили внутри HTML-страницы. Для этого используется тег &lt;style&gt;.</p>\n</body>\n</html>\n`,css:``,hidden:``,js:``,tasks:[{message:"Раскомментируйте тег <code class='keyword'>&lt;style&gt;</code>",check:()=>{var h=getH();if(~h.search(/title><style>\S*<\/style><\/head>/)){var css="";var rules=h.slice(h.indexOf('<style>')+7,h.indexOf('</style>'));if(!rules)return;var style=document.getElementsByTagName('head')[0].getElementsByTagName('style')[1];if(rules.indexOf('}'))rules=rules.split('}');for(var i=0;i<rules.length;i++){rules[i]=rules[i].replace(/\n/gi,"").replace(/body/gi,".view-body");if(~rules[i].indexOf('{')&&~rules[i].indexOf(':')){var selector=Academy.replaceID(rules[i].slice(0,rules[i].indexOf('{')));if(selector.replace(/ /gi,'').indexOf('@')==0)css+=selector+rules[i].slice(index)+"} ";else{selector=selector.replace(/,/gi,', #view-after ');css+="#view-after "+selector+rules[i].slice(rules[i].indexOf('{'))+"} "}}};if(style.styleSheet)style.styleSheet.cssText=css;else style.innerHTML=css;return true}}}],blocked:"6",editorOff:"3"},
"lesson23":{theory:`<div><h1>Подключение внешних стилей</h1><p>Чаще всего стили подключают из внешнего файла с расширением <code>.css</code>. Для этого используется тег <code>&lt;link&gt;</code>. Например:</p><pre><code>&lt;head&gt;\n  &lt;link href="external.css" rel="stylesheet"&gt;\n&lt;/head&gt;</code></pre><p>В атрибуте <code>href</code> задают адрес файла, а атрибут <code>rel="stylesheet"</code> говорит браузеру, что мы подключаем стили, а не что-то другое.</p><p>Лучше подключать стили внутри <code>&lt;head&gt;</code>, но это необязательно. Тег <code>&lt;link&gt;</code> будет работать и в другом месте страницы.</p><p>В этом задании вы подключите внешний стилевой файл, который расположен по адресу <code>external.css</code>.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Подключение внешних стилей</title>\n  <!-- подключите внешние стили -->\n</head>\n<body>\n  <h1>Внешние стили</h1>\n  <p>Внешние стили намного удобнее встроенных, так как вы можете подключить один и тот же файл стилей ко множеству страниц.</p>\n  <p>Если понадобится внести в стили изменения, то вы меняете один файл, а изменения появляются на всех страницах, где он подключен.</p>\n  <p>Со встроенными стилями в этом случае пришлось бы повозиться.</p>\n</body>\n</html>\n`,css:``,hidden:``,js:``,tasks:[{message:"Подключите к странице внешний файл стилей. Для этого:<br>Добавьте внутрь <code class='keyword'>&lt;head&gt;</code> тег <code class='keyword'>&lt;link&gt;</code>",check:()=>~getH().search(/<head>\S*<link\S*\/?>\S*<\/head>/)},{message:"Задайте — ему атрибут <code class='keyvalue'>rel</code> со значением <code class='keytext'>stylesheet</code>",check:()=>~getH().search(/<head>\S*<link\S*rel=('|"|`)stylesheet\1\S*\/?>\S*<\/head>/)},{message:"И атрибут <code class='keyvalue'>href</code> со значением <code class='keytext'>external.css</code>",check:()=>{var rules=`body::after{display: block;margin: 0 auto;padding-top: 95px;width: 150px;height: 30px;border-radius: 50px;background: url("images/courses/2/keks.jpg") no-repeat 0 100%;background-size: cover;color: white;content: "Мяулодец!";text-align: center;text-shadow: 0 0 4px black;font-size: 18px;font-family: serif;}h1 {color: #618ad2;font-size: 28px;font-family: "Monaco", "Courier", monospace;}`;var h=getH();var style=document.getElementsByTagName('head')[0].getElementsByTagName('style')[1];if(~h.search(/<head>\S*<linkrel=('|"|`)stylesheet\1href=('|"|`)external\.css\2\/?>\S*<\/head>/)){var css="";rules=rules.split('}');for(var i=0;i<rules.length;i++){rules[i]=rules[i].replace(/\n/gi,"").replace(/body/gi,".view-body");var selector=Academy.replaceID(rules[i].slice(0,rules[i].indexOf('{')));if(selector.replace(/ /gi,'').indexOf('@')==0)css+=selector+rules[i].slice(index)+"} ";else{selector=selector.replace(/,/gi,', #view-after ');css+="#view-after "+selector+rules[i].slice(rules[i].indexOf('{'))+"} "}};if(style.styleSheet)style.styleSheet.cssText=css;else style.innerHTML=css;return true;}else{if(style.styleSheet)style.styleSheet.cssText="";else style.innerHTML="";}}}],blocked:"6",editorOff:"3"},
"lesson24":{theory:`<div><h1>Тайна CSS-редактора</h1><p>Теперь вы знаете про встроенные и внешние стили и можете узнать тайну нашего CSS-редактора.</p><p>Если в разметке внутри тега <code>&lt;head&gt;</code> подключен «внешний» файл <code>style.css</code>, CSS-код из редактора незаметно добавляется внутрь тега <code>&lt;style&gt;</code>, а этот тег добавляется в мини-браузер.</p><p>В этом задании <code>style.css</code> уже подключен, а стили вынесены в CSS-редактор и закомментированы. Комментарии в CSS работают так же, как в HTML — позволяют временно отключить какой-то кусок кода.</p><p>CSS-комментарии задаются с помощью символов <code>/*</code> и <code>*/</code>:</p><pre><code>/*\nh1 {\n  color: red;\n}\n*/</code></pre></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Тайна CSS-редактора</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Тайна CSS-редактора</h1>\n  <p>Наш мини-браузер использует тот код, который вы пишете в CSS-редакторе, и незаметно добавляет его в HTML-код страницы с помощью тега &lt;style&gt;.</p>\n</body>\n</html>\n`,css:'/*\n'+tc1+'\n*/',hidden:``,js:``,tasks:[{message:"Раскомментируйте стили в <code class='keyvalue'>CSS</code>-редакторе. Для этого удалите символы <code class='keyword'>/*</code> и <code class='keyword'>*/</code>",check:()=>!~getC().search(/(\/|\*)/)}],blocked:"3",editorOff:"3"},
"lesson25":{theory:`<div><h1>Подключение скриптов</h1><p>В вебе следующее разделение ролей: HTML отвечает за структуру документа, стили — за его внешний вид, а скрипты — за поведение. С помощью скриптов, например, можно «оживлять» страницу, добавляя анимацию и другие эффекты. Скрипты создаются с помощью языка JavaScript.</p><p>Скрипты подключаются так же, как и стили: их либо пишут внутри страницы, либо подключают как внешние файлы.</p><p>Встроенные скрипты пишут внутри тега <code>&lt;script&gt;</code>. Например:</p><pre><code>&lt;script&gt;\n  JavaScript-код\n&lt;/script&gt;</code></pre><p>Тег <code>&lt;script&gt;</code> можно использовать в любом месте HTML-документа, но лучше вставлять его в самом конце перед закрывающим тегом <code>&lt;/body&gt;</code>.</p><p>Часть возможностей JavaScript постепенно переходит в CSS, например, возможность задавать плавное изменение значений свойств. Вы увидите это в задании.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Подключение скриптов</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Подключение скриптов</h1>\n  <p id="blinking">Подключение скриптов можно выполнять разными способами. Один из способов заключается в описании скриптов прямо внутри HTML-страницы.</p>\n  <!--<script>\n    var p = document.getElementById("blinking");\n    setInterval(function() {\n      if (p.style.fontSize != '10px') {\n        p.style.fontSize = '10px';\n      } else {\n        p.style.fontSize = '20px';\n      }\n    }, 2000);\n  </script>-->\n</body>\n</html>\n`,css:tc1+`\np {\n    transition: font-size 0.5s;\n}\n`,hidden:``,js:``,tasks:[{message:"Раскомментируйте тег <code class='keyword'>&lt;script&gt;</code>.<br>Посмотрите, как подключенный скрипт оживит документ.",check:(o)=>{if(~getH().search(/<\/p><script>\S*<\/script><\/body>/)){if(!o.hE){Academy.vars.in=setInterval(()=>{var p=document.querySelector('#view-after [data-id="blinking"]');p.style.fontSize=p.style.fontSize=='10px'?'20px':'10px';},2000);Academy.vars.hE=true;};return true}else{clearInterval(o.in);}}}],blocked:"6",editorOff:"3"},
"lesson26":{theory:`<div><h1>Подключение внешних скриптов</h1><p>Скрипты чаще всего подключают из внешних файлов с расширением <code>.js</code>. Для этого используют тег <code>&lt;script&gt;</code> с атрибутом <code>src</code>, в котором указывается путь к файлу. Например:</p><pre><code>&lt;script src="external.js"&gt;&lt;/script&gt;</code></pre><p>Обратите внимание, что тег <code>&lt;script&gt;</code> парный. Если вы подключаете внешние скрипты, то просто ничего не пишите внутри тега.</p><p>Внешние скрипты лучше подключать перед закрывающим тегом <code>&lt;/body&gt;</code>.</p><p>В этом задании вы подключите внешний скрипт, который расположен по адресу: <code>external.js</code>.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Подключение внешних скриптов</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Внешние скрипты</h1>\n  <p>Внешние скрипты так же, как и внешние стили, используются намного чаще встроенных.</p>\n  <p>В них удобнее вносить изменения, особенно когда один и тот же скрипт подключён к большому количеству страниц.</p>\n  <p>А ещё внешние ресурсы кешируются браузером, что позволяет ускорить загрузку страниц. А в вебе это важно.</p>\n\n  <!-- подключите внешний скрипт -->\n</body>\n</html>\n`,css:`h1 {\n    font-size: 28px;\n    font-family: "Monaco", "Courier", monospace;\n    color: #618ad2;\n\n    transition: color 0.5s;\n}\n`,hidden:``,js:``,tasks:[{message:"Подключите к странице внешний скрипт. Для этого: Перед закрывающим тегом <code class='keyword'>&lt;/body&gt;</code> вставьте тег <code class='keyword'>&lt;script&gt;&lt;/script&gt;</code>",check:()=>~getH().search(/<body>\S*<script\S*><\/script><\/body>/)},{message:"Затем добавьте ему атрибут <code class='keyvalue'>src</code> со значением <code class='keytext'>external.js</code>",check:(o)=>{if(~getH().search(/<body>\S*<scriptsrc=('|"|`)external\.js\1><\/script><\/body>/)){if(!o.hA){Academy.vars.hA=true;Academy.vars.in=setInterval(()=>{var h=document.querySelector('#view-after h1');var hue='rgb('+(Math.floor(Math.random()*256))+','+(Math.floor(Math.random()*256))+','+(Math.floor(Math.random()*256))+')';h.style.color=hue;},1000)}return true;}else{clearInterval(o.in)}}}],blocked:"6",editorOff:"3"},
"lesson27":{theory:`<div><h1>Первое итоговое задание</h1><p>Вы познакомились с тегами, необходимыми для создания простейшей HTML-страницы, а также со служебными тегами, которые очень важны для её корректного отображения, оптимизации и продвижения в поисковиках.</p><p>Пришло время повторить изученное и выполнить два более сложных задания.</p><p>В первом задании закрепим навыки описания мета-информации:</p><ul><li>заголовка страницы;</li><li>ключевых слов;</li><li>краткого описания страницы.</li></ul><p>Прочитайте анонс статьи в мини-браузере и дополните его важной мета-информацией.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <h1>Почему всё больше «не-технарей» изучают вёрстку</h1>\n\n  <p>Раньше термин «компьютерная грамотность» по своей сути означал умение работать с офисным пакетом, но жизнь не стоит на месте, и теперь всё больше экспертов заявляют о том, что крайне важным навыком для широкого круга людей становится умение программировать.</p>\n\n  <p>При этом программирование — огромная область знаний, только небольшая часть которой может действительно пригодиться обычному человеку (то есть «не-технарю»). Мы считаем, что основу «новой компьютерной грамотности» должно составить знание вёрстки. В сегодняшнем топике мы рассмотрим примеры того, как изучение веб-технологий может помочь представителям не-технических профессий.</p>\n\n  <p>Прочитать <a href="https://habr.com/company/htmlacademy/blog/252169/" target="_blank" rel="nofollow noopener">статью целиком</a> вы можете на Хабре.</p>\n</body>\n</html>\n`,css:`h1 {\n    font-size: 28px;\n    font-family: "Georgia", serif;\n}\n\np {\n    line-height: 1.5;\n}\n`,hidden:``,js:``,tasks:[{message:"Самостоятельно задайте мета-информацию страницы:<br>Заголовок страницы <code class='keytext'>Вёрстка для не-технарей</code>",check:()=>~getH().search(/<head>\S*<title>Вёрсткадляне-технарей<\/title>\S*<\/head>/)},{message:"Ключевые слова <code class='keytext'>вёрстка, компьютерная грамотность, программирование</code>",check:()=>~getH().search(/<head>\S*<metaname=('|"|`)keywords\1content=('|"|`)вёрстка,компьютернаяграмотность,программирование\2\/?>\S*<\/head>/)},{message:"Краткое описание <code class='keytext'>Примеры того, что изучение веб-технологий может быть полезно для всех</code>",check:()=>~getH().search(/<head>\S*<metaname=('|"|`)description\1content=('|"|`)Примерытого,чтоизучениевеб-технологийможетбытьполезнодлявсех\2\/?>\S*<\/head>/)}],blocked:"6",editorOff:"3"},
"lesson28":{theory:`<div><h1>Второе итоговое задание</h1><p>Во втором итоговом задании вам нужно самостоятельно подключить к странице внешние ресурсы:</p><ul><li>Стилевой файл <a href="/assets/courses/26/final.css" target="_blank" rel="nofollow">final.css</a>.</li><li>Файл со скриптами <a href="/assets/courses/26/final.js" target="_blank" rel="nofollow">final.js</a>.</li></ul><p>Не забывайте, что хорошим тоном считается подключать внешние стили в <code>&lt;head&gt;</code>, а скрипты перед закрывающим тегом <code>&lt;/body&gt;</code>.</p><p>В подключаемых файлах — демонстрация возможностей CSS и JavaScript, которые мы будем изучать в дальнейшем.</p></div>`,html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Второе итоговое задание</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <div class="scene">\n    <div class="pot pot-bot">\n      <div class="shadow"></div>\n      <div class="pot pot-shadow"></div>\n      <div class="pot pot-top"></div>\n      <div class="plant">\n        <div class="head">\n          <ul>\n            <li></li><li></li><li></li><li></li>\n            <li></li><li></li><li></li><li></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n`,css:`li {\n    list-style: none;\n}\n`,hidden:``,js:``,tasks:[{message:"Подключите стилевой файл <code>final.css</code>",check:(o)=>{var s=document.head.getElementsByTagName('style')[0];var c="";if(!o.hC)Academy.vars.hC=s.textContent;else c+=o.hC;if(~getH().search(/<head>\S*<linkrel=("|'|`)stylesheet\1href=('|"|`)final\.css\2\>\S*<\/head>/)){c+=`#view-after .view-body{margin:0;padding:0;}#view-after .view-body::before{top:50%;z-index:-1;width:100%;height:50%;background-color:#dddddd;}#view-after ::before,#view-after ::after{position:absolute;content:"";}#view-after .scene{margin:280px auto 40px auto;width:140px;}#view-after .pot{position:relative;background:#ee7d15;}#view-after .pot > div{position:absolute;}#view-after .pot-bot{width:100px;height:100px;}#view-after .pot-bot::before{top:0;left:-15px;border-top:100px solid #ee7d15;border-right:0 solid transparent;border-left:15px solid transparent;}#view-after .pot-bot::after{top:0;right:-15px;border-top:100px solid #ee7d15;border-right:15px solid transparent;border-left:0 solid transparent;}#view-after .pot-top{top:-25px;left:50%;margin-left:-70px;width:140px;height:25px;}#view-after .pot-top::before{top:0;left:-5px;border-top:25px solid #ee7d15;border-right:0 solid transparent;border-left:5px solid transparent;}#view-after .pot-top::after{top:0;right:-5px;border-top:25px solid #ee7d15;border-right:5px solid transparent;border-left:0 solid transparent;}#view-after .pot-shadow{top:0;left:50%;z-index:3;margin-left:-62.5px;width:125px;height:10px;background:rgba(220, 84, 0, 0.2);}#view-after .shadow{bottom:-5px;left:50%;z-index:-1;margin-left:-60px;width:120px;height:10px;border-radius:120px / 10px;background:rgba(220, 84, 0, 0.1);}#view-after .plant{bottom:0;left:50%;z-index:-1;margin-left:-8px;width:16px;height:280px;border-radius:16px 16px 0 0;background:#00c975;}#view-after .plant > div{position:absolute;}#view-after .plant::before{right:0;bottom:0;width:4px;height:275px;border-radius:0 30px 0 0;background:rgba(60, 188, 131, 0.5);}#view-after .plant::after{top:110px;left:10px;width:0;height:0;border-radius:100px 0 100px 0;background:#3cbc83;transform:rotate(-20deg);animation:leaf 5s ease-out forwards;animation-delay:4s;}#view-after .head{top:-15px;left:50%;margin-left:-25px;width:50px;height:50px;border-radius:50px;background:#fda342;transform:scale(0.4);animation:flower 3s 1s forwards ease-out;}#view-after .face{position:absolute;top:50%;left:50%;margin-top:-10px;margin-left:-10px;width:20px;height:20px;border-radius:25px;background:#a3430c;}#view-after li{position:absolute;float:left;width:50px;height:30px;border-radius:100px 0 100px 0;background:#facb3d;list-style:none;}#view-after li:nth-child(1){top:10px;left:60px;transform:rotate(30deg);}#view-after li:nth-child(2){top:15px;right:60px;transform:rotate(20deg);}#view-after li:nth-child(3){top:55px;right:45px;transform:rotate(-20deg);}#view-after li:nth-child(4){top:55px;left:45px;transform:rotate(-110deg);}#view-after li:nth-child(5){top:75px;left:0;transform:rotate(-60deg);}#view-after li:nth-child(6){bottom:55px;left:45px;transform:rotate(-20deg);}#view-after li:nth-child(7){right:45px;bottom:55px;transform:rotate(-110deg);}#view-after li:nth-child(8){bottom:75px;left:0;transform: rotate(-60deg);}#view-after .plant,#view-after .plant::before{animation:grow 4s ease-out forwards;} @keyframes grow{from{height:50px;}to{height:280px;}} @keyframes flower{from{transform:scale(0.4);}to{transform:scale(1);}} @keyframes leaf{from{width:0;height:0;}to{width: 40px;height:20px;}}`;s.innerHTML=c;return true;}s.innerHTML=c;}},{message:"Затем подключите скрипт <code>final.js</code>",check:(o)=>{if(!o.hE){Academy.vars.grc=()=>'rgb('+(~~(Math.random()*256))+','+(~~(Math.random()*256))+','+(~~(Math.random()*256))+')';Academy.vars.sc=(l,c)=>{[].forEach.call(l,function(e){e.style.backgroundColor=c})};Academy.vars.lo=document.querySelectorAll("#view-after .head li:nth-child(odd)");Academy.vars.le=document.querySelectorAll("#view-after .head li:nth-child(even)");Academy.vars.hE=true;};if(~getH().search(/<script\S*src=('|"|`)final\.js\1\S*><\/script>/)){if(!o.in)Academy.vars.in=setInterval(function(){Academy.vars.sc(document.querySelectorAll("#view-after .head li:nth-child(odd)"),Academy.vars.grc());Academy.vars.sc(document.querySelectorAll("#view-after .head li:nth-child(even)"),Academy.vars.grc());},1000);return true;}else{clearInterval(o.in);Academy.vars.in=null}}}],blocked:"3",editorOff:"3"}
};
hL();