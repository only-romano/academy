keks={
ask:(text)=>{var g=~~(Math.random()*200);Academy.vars.log.push(g);setTimeout((()=>{printLog(text)}).bind(this),4);return g},
run:()=>~~(Math.random()*100)
};
fH1={
a:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) minutes/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[true,20],[true,15],[false,40],[false,15],[false,24],[false,25],[true,27],[false,12],[false,27],[false,35],[false,5]];var r=[0,0,0,40,40,20,0,30,20,20,0];for(var i=0;i<d.length;i++){var f="function z(){"+a+";isRaining="+d[i][0]+";temperature="+d[i][1]+";"+b+";return minutes};z();";var t;l.push("Тест "+(i+1)+"."+(d[i][0]?"Идёт дождь":"Дождя нет")+", температура — "+d[i][1]+"°C.");l.push("Ожидаю время прогулки: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
b:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) ageGroup/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[5,0.7,3.5,3,8,7,1];var r=['Коты средних лет','Котята','Коты средних лет','Молодые коты','Почтенные коты','Коты средних лет','Котята'];for(var i=0;i<d.length;i++){var f="function z(){"+a+";age="+d[i]+";"+b+";return ageGroup};z();";var t;l.push("Тест "+(i+1)+". Возраст кота — "+d[i]+".");l.push("Ожидаю результат, возрастная группа: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
c:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) recommendation/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[5,7,5.5,3.7,4];var r=['Вес в норме','Пора на тренировку','Вес в норме','Пора перекусить','Вес в норме'];for(var i=0;i<d.length;i++){var f="function z(){"+a+";weight="+d[i]+";"+b+";return recomendation};z();";var t;l.push("Тест "+(i+1)+". Вес — "+d[i]+".");l.push("Ожидаю рекоммендацию: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
d:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) taskResult/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[15,30,18,10,32];var r=['FizzBuzz','FizzBuzz','Fizz','Buzz',32];for(var i=0;i<d.length;i++){var f="function z(){"+a+";number="+d[i]+";"+b+";return taskResult};z();";var t;l.push("Тест "+(i+1)+". Число "+d[i]+".");l.push("Ожидаю результат: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
e:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) discountedBuy/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[4000,1200,3000,4500,5000,500,1000];var r=[3600,1140,2700,4050,4250,500,950];for(var i=0;i<d.length;i++){var f="function z(){"+a+";buy="+d[i]+";"+b+";return discountedBuy};z();";var t;l.push("Тест "+(i+1)+". Стоимость "+d[i]+".");l.push("Ожидаю результат, покупка со скидкой: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
f:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) goToDairy/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[15,12,7,13,19,21];var r=["goToDairy","goToDairy","goToMarket","goToStore","goToMarket","(goToDairy||goToStore||goToMarket)===false"];for(var i=0;i<d.length;i++){var f="function z(){"+a+";time="+d[i]+";"+b+";return "+r[i]+"};z();";var t;l.push("Тест "+(i+1)+". Время "+d[i]+".");l.push("Ожидаю результат: "+(r[i]==="goToDairy"?"На молокозавод":r[i]==="goToMarket"?"В магазин":r[i]==="goToDairy"?"На рынок":"Не успели никуда..."));try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+(t===true?"Верно!":"Не верно."));if(t===true)continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)},
g:()=>{var p=printLog;var g=getR;var l=Academy.vars.log;var j=Academy.JS.getValue();var x=j.search(/(var|let) minutes/);if(!~x){l.push("error: не найдены необходимые переменные");p("Тест задания");g(false);return};var a=j.slice(0,x);var b=j.slice(x);var d=[[false,20],[true,15],[false,40],[false,15],[false,22],[true,25],[false,41]];var r=[20,0,0,15,18,0,0];for(var i=0;i<d.length;i++){var f="function z(){"+a+";itsRaining="+d[i][0]+";temperature="+d[i][1]+";"+b+";return minutes};z();";var t;l.push("Тест "+(i+1)+"."+(d[i][0]?"Идёт дождь":"Дождя нет")+", температура — "+d[i][1]+"°C.");l.push("Ожидаю время прогулки: "+r[i]);try{t=eval(f);}catch(e){l.push(e);p("Тест задания");g(false);return};l.push("Полученный результат: "+t);if(t===r[i])continue;else{l.push("error: результаты не совпадают!");p("Тест задания");g(false);return}};l.push("Все тесты пройдены!");p("Тест задания");g(true)}
};
LessonsData={
"lesson1010":{theory:`<div><h1>Простое ветвление</h1><p>Поздравляем, боевое крещение первой программой пройдено! Теперь Кекс будет давать вам задания на более сложные программы, программы с условиями.</p><p>И сразу же <b>первая задача</b>: нужно разработать программу «Можно ли съесть ещё?». Это очень важный вопрос для всех, кто готовится к выставке. В программе используются следующие данные:</p><p></p><ul><li>дневная норма корма (переменная <code>dayLimit</code>);</li><li>вес съеденного за сегодня корма (переменная <code>foodInGrams</code>).</li></ul><p>Если Кекс съел корма меньше дневной нормы, то он может съесть ещё. Если он превысил норму, то больше есть нельзя.</p><p>До сих пор мы писали линейные программы, которые всегда выполняли <em>одинаковые команды</em>. Сейчас нам нужно, чтобы программа стала нелинейной: в зависимости от <em>разных условий</em> она должна выполнять <em>разные команды</em>. Как научить программу проверять условия и принимать решения на основе результатов проверок?</p><p>Для проверки условий используют условный оператор <code>if</code>:</p><pre>if (условие) {\n  действия;\n}</pre><p>Здесь «условие» — это выражение, возвращающее <code>true</code> или <code>false</code>, а «действия» внутри фигурных скобок — это команды, которые выполняются, если условие удовлетворено.</p><p>Сначала напишем условие, которое будет проверять, съел ли Кекс меньше дневной нормы корма. И если условие выполняется, скажем Кексу, что он может съесть ещё немного.</p></div>`,html:``,css:``,hidden:``,js:`var foodInGrams = 120;\nvar dayLimit = 80;\n`,tasks:[{message:`Начнём работу над программой <code class='keytext'>«Можно ли съесть ещё?»</code>. После переменной <code class='keyvalue'>dayLimit</code> добавьте условный оператор: <code><code class='keyword'>if</code> (<code class='keytext'>true</code>) { }</code>`,check:(o)=>{if(o.hA)return true;if(~getJ().search(/vardayLimit=\S*if\(true\)\{\S*\}/))Academy.vars.hA=true}},{message:`Теперь замените <code class='keyword'>true</code> в условии на проверку <code class='keyvalue'>foodInGrams <code class='keyword'><</code> dayLimit</code> (съел меньше дневной нормы).`,check:()=>~getJ().search(/vardayLimit=\S*if\((foodInGrams<dayLimit|dayLimit>foodInGrams)\)\{\S*\}/)},{message:`Внутри фигурных скобок условного оператора выведите сообщение: <code>console.log(<code class='keytext'>'Ещё можно!'</code>)</code>;`,check:()=>~getJ().search(/vardayLimit=\S*if\((foodInGrams<dayLimit|dayLimit>foodInGrams)\)\{\S*console\.log\(('|"|`)Ещёможно!\2\)\S*\}/)},{message:`Теперь замените значение переменной <code class='keyvalue'>foodInGrams</code> на <code class='keytext'>60</code>, чтобы убедиться, что условие работает.`,check:(o)=>o.foodInGrams===60||~getJ().search(/foodInGrams=60\S*if\(\S*\{\S*\}/)}],blocked:"4",editorOff:"8"},
"lesson1011":{theory:`<div><h1>Используем альтернативу</h1><p>Программа отлично показывает, когда можно съесть ещё, но совсем ничего не сообщает, если превышение всё-таки есть. Из-за этого Кекс чуть было не съел лишние 10 грамм! Нужно исправлять ситуацию.</p><p>Создадим ветку, которая будет срабатывать, если условие не выполнено. Для этого используем вот такой шаблон:</p><pre>if (условие) {\n  действия;\n} else {\n  другие действия;\n}</pre><p>Ветка «действия» срабатывает, если условие выполнено. Ветка «другие действия» срабатывает, если условие не выполнено.</p><p>Так мы говорим программе как поступить в той или иной ситуации. Такие конструкции можно читать так: <em>если условие выполняется, сделай действие, иначе сделай другие действия</em>. В нашем случае условие такое: если корма съедено меньше дневной нормы, то можно съесть ещё, иначе нельзя.</p><p>Когда все условия работы описаны, программа может работать с реальными данными от заказчика. Добавим вторую ветку условия, чтобы завершить разработку программы «Можно ли съесть ещё?».</p></div>`,html:``,css:``,hidden:``,js:`var foodInGrams = 60;\nvar dayLimit = 80;\n\nif (foodInGrams < dayLimit) {\n    console.log('Ещё можно!');\n}\n`,tasks:[{message:`Добавьте ветку <code class='keyword'>else</code> в программу: После фигурных скобок <code class='keyword'>if</code> добавьте <code><code class='keyword'>else</code> { }</code>`,check:()=>~getJ().search(/if\(\S*\{\S*\}else\{\S*\}/)},{message:`Внутри фигурных скобок <code class='keyword'>else</code> добавьте команду <code>console.log(<code class='keytext'>'Больше ни кусочка!'</code>)</code>;`,check:()=>~getJ().search(/if\(\S*\{\S*\}else\{\S*console\.log\(('|"|`)Большеникусочка!\1\)\S*\}/)},{message:`На первой строке замените значение переменной <code class='keyvalue'>foodInGrams</code> на <code>keks.ask(<code class='keytext'>'Сколько грамм еды вы сегодня съели, только честно?'</code>)</code>`,check:()=>~getJ().search(/varfoodInGrams=keks\.ask\(('|"|`)Сколькограммедывысегоднясъели,толькочестно\?\1/)}],blocked:"4",editorOff:"8"},
"lesson1012":{theory:`<div><h1>Простые сравнения</h1><p>В предыдущем задании мы сравнили количество съеденного корма и дневную норму корма, которую может съесть Кекс. И решили ещё одну задачу босса.</p><p>Но дальше будет только сложнее. Поэтому, пока есть небольшая передышка до следующего задания, давайте разберёмся, как правильно использовать сравнение.</p><p>В этом задании мы потренируемся использовать операторы «больше» <code>&gt;</code> и «меньше» <code>&lt;</code>, занимаясь исправлением ошибок в экспериментальных разработках босса.</p><p>Кекс обнаружил на флипчарте в отделе продаж несколько маркеров разного цвета: один красный, два жёлтых и три зелёных. Босс решил, что цвета маркеров — отличная основа для прогнозирования рынка. Он даже сам написал аналитическую программу, которая должна сравнивать количество маркеров и выводить соответствующие прогнозы. Но сравнения по какой-то причине не работают: выводятся сообщения, что прогноз неприемлем, хотя прогнозы должны быть позитивными.</p><p>Нужно разобраться в причине и исправить программу так, чтобы прогнозы радовали босса.</p><p><small>Хотя делать прогнозы по рынку на основании цветов маркеров в отделе продаж может только кот.</small></p></div>`,html:``,css:``,hidden:``,js:`var red = 1;\nvar yellow = 2;\nvar green = 3;\n\nif (red > yellow) {\n    console.log('Красные маркеры в меньшинстве. Прогноз умеренно позитивный!');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n\nif (green < yellow) {\n    console.log('Зелёные маркеры преобладают над жёлтыми. Прогноз позитивный!');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n`,tasks:[{message:`Исправим программу прогнозирования. Исправьте оператор сравнения на <code class='keyword'><</code> в первом <code class='keyword'>if</code>.`,check:()=>~getJ().search(/if\((red<yellow|yellow>red)\)\{\S*\}/)},{message:`Исправьте оператор сравнения на <code class='keyword'>></code> во втором <code class='keyword'>if</code>.`,check:()=>~getJ().search(/if\((green>yellow|yellow<green)\)\{\S*\}/)}],blocked:"4",editorOff:"8"},
"lesson1013":{theory:`<div><h1>Сравнения, допускающие равенство</h1><p>Отлично, рыночный анализатор Кекса по цветам маркеров в отделе продаж исправно работает.</p><p>Но вот незадача, на флипчарте нашлись ещё и синие маркеры, которыми менеджеры обводят рискованные сделки. Кекс доработал свой анализатор с учётом этих маркеров, но в программе снова ошибки: опять выводятся сообщения, что прогноз неприемлем.</p><p>Чтобы починить новую версию анализатора, нам нужно изучить ещё два оператора, используемых для сравнения. Если известно, что одно число может быть больше или равно другому, используют оператор «больше или равно» <code>&gt;=</code>. Аналогично, если первое число может быть меньше или равно, используют оператор «меньше или равно» <code>&lt;=</code>.</p><p>Программа дополнена ещё двумя условиями и их снова нужно исправить.</p></div>`,html:``,css:``,hidden:``,js:`var red = 1;\nvar yellow = 2;\nvar green = 3;\nvar blue = 2;\n\nif (blue > yellow) {\n    console.log('Синих маркеров больше или столько же, сколько жёлтых. Риски велики.');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n\nif (blue < yellow) {\n    console.log('Синих маркеров меньше или столько же, сколько жёлтых. Риски оптимальны.');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n\nif (red < yellow) {\n    console.log('Красные маркеры в меньшинстве. Прогноз умеренно позитивный!');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n\nif (green > yellow) {\n    console.log('Зелёные маркеры преобладают над жёлтыми. Прогноз позитивный!');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n`,tasks:[{message:`Поправьте код доработанной программы для сравнения количества маркеров. Исправьте оператор сравнения на <code class='keyword'>>=</code> в первом <code class='keyword'>if</code>.`,check:()=>~getJ().search(/if\((blue>=yellow|yellow<=blue)\)\{\S*\}/)},{message:`Исправьте оператор сравнения на <code class='keyword'><=</code> во втором <code class='keyword'>if</code>.`,check:()=>~getJ().search(/if\((blue<=yellow|yellow>=blue)\)\{\S*\}/)}],blocked:"4",editorOff:"8"},
"lesson1014":{theory:`<div><h1>Равенство, неравенство</h1><p>И вторую версию анализатора починили. Но босс где-то услышал про теорию оценки с помощью равенств и неравенств. Кексу понадобилось, чтобы анализатор сравнивал маркеры одного цвета по новым правилам, и кот быстро реализовал эту логику. И снова сработало правило «где быстрые лапы, там разные баги».</p><p>Чтобы починить эту программу, нам нужно углубиться в операторы сравнения. Чтобы выяснить, равны два значения или нет, в JavaScript используют операторы ==, !=, === и !==.</p><table cellpadding="6"><tbody><tr><th align="left" width="100">Оператор</th><th align="left">Название</th><th align="left">Действие</th></tr><tr><td>==</td><td>Нестрогое равенство (с приведением типов)</td><td>Сравнивает два значения, перед этим приводит одно из значений к типу другого. Если значения равны, возвращает <code>true</code>.</td></tr><tr><td>===</td><td>Строгое равенство (без приведения типов)</td><td>Сравнивает два значения. Если типы значений разные или значения не равны, возвращает <code>false</code>.</td></tr><tr><td>!=</td><td>Неравенство (с приведением типов)</td><td>Сравнивает два значения, перед этим приводит одно из значений к типу другого. Если значения не равны, возвращает <code>true</code>.</td></tr><tr><td>!==</td><td>Строгое неравенство (без приведения типов)</td><td>Сравнивает два значения. Если типы значений разные или значения не равны, возвращает <code>true</code>.</td></tr></tbody></table><p>Что значит «приводит или не приводит значения к одному типу»? Рассмотрим на примерах.</p><pre>console.log('123' == 123); // Выведет true\nconsole.log('123' != 123); // Выведет false\n</pre><p>Строка и число окажутся равны друг другу. Так происходит, потому что при сравнении разных типов с помощью == происходит преобразование значений к единому типу. Например, из строки '123' можно получить число 123. А число 123 равно числу 123, поэтому сравнение и возвращает <code>true</code>. По этой же причине неравенство != возвращает для этих значений <code>false</code> — их можно привести к одному типу и тогда они будут равны друг другу.</p><pre>console.log('123' === 123); // Выведет false\nconsole.log('123' !== 123); // Выведет true\n</pre><p>В этом случае результат получается противоположным. Строгое равенство === не приводит значения к одному типу, а сравнивает, как есть: строку и число. А строка, какое бы значение она не содержала, не равна числу, поэтому сравнение на равенство возвращает <code>false</code>. Зато строгое неравенство для таких значений возвращает <code>true</code>.</p></div>`,html:``,css:``,hidden:``,js:`var red = 1;\nvar yellow = 2;\nvar green = 3;\nvar blue = 2;\n\nif (blue != yellow) {\n    console.log('Синих маркеров столько же, сколько жёлтых. Прогноз умеренно позитивный!');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n\nif (blue == red) {\n    console.log('Синих маркеров не столько же, сколько красных. Прогноз позитивный!');\n} else {\n    console.log('Неправильно! Прогноз неприемлем!');\n}\n`,tasks:[{message:`Исправим условия и немного поэкспериментируем. Замените <code class='keyword'>!=</code> на <code class='keyword'>==</code> в первом условии.`,check:(o)=>{if(o.hA)return true;if(~getJ().search(/if\((blue==yellow|yellow==blue)\)\{/))Academy.vars.hA=true}},{message:`Замените <code class='keyword'>==</code> на <code class='keyword'>!=</code> во втором условии.`,check:()=>~getJ().search(/if\((blue!=red|red!=blue)\)\{/)},{message:`Задайте переменной <code class='keyvalue'>blue</code> строковое значение <code class='keytext'>'2'</code> вместо числа и понаблюдайте за результатом. Удивительно, но условия будут работать как и раньше.`,check:()=>~getJ().search(/blue=('|"|`)2\1\S*if\(\S*if\(\S*/)},{message:`Теперь в первом <code class='keyword'>if</code> замените <code class='keyword'>==</code> на оператор строгого соответствия <code class='keyword'>===</code>. На этот раз первое условие не должно выполниться.`,check:()=>~getJ().search(/if\((blue===yellow|yellow===blue)\)\{/)}],blocked:"4",editorOff:"8"},
"lesson1015":{theory:`<div><h1>Строгое сравнение строк</h1><p>Как же быть, если есть два значения разных типов, а на приведение по умолчанию надеяться не хочется? Использовать приведение «руками».</p><p>Например, можно привести числовое значение к строковому типу. Один из способов — использовать команду <code>число.toString()</code>. Например:</p><pre>var number = 1;\n\n// Выведет число: 1 (number)\nconsole.log(number);\n\n// Выведет строку: "1" (string)\nconsole.log(number.toString());\n</pre></div>`,html:``,css:``,hidden:``,js:`var string = '123';\nvar number = 123;\n\nif (string == number) {\n    console.log('Сравнение заработало!');\n} else {\n    console.log('Не могу сравнить');\n}\n`,tasks:[{message:`Приведём второе значение к строковому типу. Замените в условии <code class='keyword'>==</code> на <code class='keyword'>===</code>. Приведение перестанет работать и условие не выполнится.`,check:(o)=>{if(o.hA)return true;if(~getJ().search(/if\((string===number|number===string)\)\{/))Academy.vars.hA=true}},{message:`Замените <code class='keyvalue'>number</code> в условии на <code>number.toString()</code>. Условие должно заработать.`,check:()=>~getJ().search(/if\((string===number\.toString\(\)|number\.toString\(\)===string)\)\{/)}],blocked:"4",editorOff:"8"},
"lesson1016":{theory:`<div><h1>Строгое сравнение чисел</h1><p>Привести число к строке можно с помощью команды <code>.toString()</code>. Но иногда, наоборот, требуется превратить строку в число, чтобы сравнить их.</p><p>Для этого можно использовать команду <code>parseInt()</code>. Пример:</p><pre>var string = '1';\n\nconsole.log(string);\n// выведет строку: "1" (string)\n\nconsole.log(parseInt(string, 10));\n// выведет число: 1 (number)\n</pre><p>Обратите внимание, что у команды два аргумента:</p><ol><li>строка, которую мы пытаемся превратить в число;</li><li>основание системы счисления, в которую мы переводим число.</li></ol><p>Мы привыкли работать в десятичной системе счисления, но в программировании часто приходится иметь дело с другими системами: двоичной, восьмеричной, шестнадцатеричной. Именно поэтому у <code>parseInt()</code> есть второй аргумент. И хотя сейчас мы не будем разбираться в тонкостях систем счисления, не забывайте про эту особенность команды <code>parseInt()</code> и всегда явно указывайте второй аргумент, чтобы избежать ошибок.</p><p>Подробнее об этой команде и её особенностях мы поговорим в одном из следующих курсов.</p></div>`,html:``,css:``,hidden:``,js:`var string = '123';\nvar number = 123;\n\nif (string === number.toString()) {\n    console.log('Сравнение заработало!');\n} else {\n    console.log('Не могу сравнить');\n}\n`,tasks:[{message:`Теперь сравним числовые значения обеих переменных. Уберите команду <code>.toString()</code>, оставив в сравнении просто <code class='keyvalue'>number</code>`,check:(o)=>{if(o.hA)return true;if(~getJ().search(/if\((string===number|number===string)\)\{/))Academy.vars.hA=true}},{message:`В сравнении замените переменную <code class='keyvalue'>string</code> на команду <code>parseInt(<code class='keytext'>string, 10</code>)</code>`,check:()=>~getJ().search(/if\((parseInt\(string,10\)===number|number===parseInt\(string,10\))\)\{/)}],blocked:"4",editorOff:"8"},
"lesson1017":{theory:`<div><h1>Действия по условию</h1><p>Заканчиваем отдыхать, письмо от босса!</p><p><b>Вторая задача</b>: нужно усовершенствовать программу «Можно ли съесть ещё?». Входные данные те же:</p><ul><li>дневная норма корма, в переменной <code>dayLimit</code>;</li><li>вес съеденного за сегодня корма, в переменной <code>foodInGrams</code>.</li></ul><p>Но логику нужно изменить. Программа должна показывать, сколько граммов корма ещё можно сегодня съесть. Если корма съедено больше дневной нормы, то программа должна показывать ноль.</p><p>Сначала продумаем алгоритм решения:</p><ol><li>заводим новую переменную для хранения количества корма, которое ещё можно съесть;</li><li>проверяем, съедено ли корма меньше, чем норма;</li><li>если да, то вычитаем из нормы количество съеденного корма, а результат сохраняем в новую переменную;</li><li>если нет, то записываем в новую переменную ноль;</li><li>выводим красивое информативное сообщение.</li></ol><p>Как вы видите, внутри условий можно и нужно производить операции над переменными, а не только выводить сообщения.</p></div>`,html:``,css:``,hidden:``,js:`var foodInGrams = keks.ask('Сколько грамм еды вы сегодня съели, только честно?');\nvar dayLimit = 80;\n\nif (foodInGrams < dayLimit) {\n    console.log('Ещё можно!');\n} else {\n    console.log('Больше ни кусочка!');\n}\n`,tasks:[{message:`Теперь нам нужно посчитать, сколько корма можно съесть, если съеденное количество меньше дневной нормы. Добавьте объявление переменной <code class='keyvalue'>foodToEat</code> сразу после объявления переменной <code class='keyvalue'>dayLimit</code>`,check:()=>~getJ().search(/(var|let)foodToEat/)},{message:`Замените вывод сообщения <code>console.log(<code class='keytext'>'Ещё можно!'</code>)</code>; на <code class='keyvalue'>foodToEat <code class='keyword'>=</code> dayLimit <code class='keyword'>-</code> foodInGrams</code>;`,check:()=>~getJ().search(/if\S*\{\S*foodToEat=dayLimit-foodInGrams\S*\}else\{/),}],blocked:"4",editorOff:"8"},
"lesson1018":{theory:`<div><h1>Если условие не выполнено</h1><p>Мы посчитали, сколько корма можно съесть, если дневная норма не превышена.</p><p>Осталось посчитать количество корма, которое можно съесть, если съедено больше нормы. Это самое лёгкое задание, потому что нужно просто приравнять значение нулю.</p><p>И на последнем шаге нужно вывести красиво отформатированное сообщение. Это вы уже умеете.</p></div>`,html:``,css:``,hidden:``,js:`var foodInGrams = keks.ask('Сколько грамм еды вы сегодня съели, только честно?');\nvar dayLimit = 80;\nvar foodToEat;\n\nif (foodInGrams < dayLimit) {\n    foodToEat = dayLimit - foodInGrams;\n} else {\n    console.log('Больше ни кусочка!');\n}\n`,tasks:[{message:`Теперь завершим программу. Вместо команды <code>console.log(<code class='keytext'>'Больше ни кусочка!'</code>)</code>; задайте переменной <code class='keyvalue'>foodToEat</code> <code class='keytext'>нулевое</code> значение.`,check:()=>~getJ().search(/else\{\S*foodToEat=0\S*\}/)},{message:`После блока <code class='keyword'>else</code> выведите в <code class='keyword'>консоль</code> сообщение, склеенное из трёх фрагментов: строки <code class='keytext'>'Можно съесть ещё '</code>, переменной <code class='keyvalue'>foodToEat</code>, строки <code class='keytext'>' грамм.'</code>`,check:()=>~getJ().search(/else\{\S*\}\S*console\.log\(('|"|`)Можносъестьещё\1\+foodToEat\+('|"|`)грамм\.\2\)/)}],blocked:"4",editorOff:"8"},
"lesson1019":{theory:`<div><h1>Значения как условие</h1><p>Кекс начал работу над ещё одной программой «Можно ли приступать к проекту». А мы будем тестировать её и исправлять ошибки, если потребуется.</p><p>Программа рассматривает несколько условий и выдаёт экспертное заключение. Вначале она проверяет, гуляет ли кто-то из разработчиков в отпуске. Нам нужно оттестировать это условие на разных типах данных. </p><p>Дело в том, что информацию об отпусках мы получаем от менеджеров в абсолютно разных форматах. Кто-то сразу скажет, что разработчики ещё в отпуске, то есть передаст <code>true</code>, кто-то не поймёт вопроса и скажет, сколько разработчиков в отпуске, то есть отдаст нам какое-то число. А кто-то вообще промолчит, если никого в отпуске нет, то есть мы получим пустую строку.</p><p>Здесь сравнение значений нам не поможет, потому что данные могут прийти в любом виде. Так как в блоке условия все значения приводятся к логическому типу, мы можем использовать в качестве условий любые значения: числа, строки, <code>true</code> и <code>false</code>, переменные, которые содержат такие данные.</p><p>Главное — понимать, как эти значения приводятся к логическому типу. Если <code>true</code> и <code>false</code> остаются собой, то числа и строки приводятся по-особому. Например, все числа кроме <code>0</code> — <code>true</code>, при этом <code>0</code> — false. Все строки, кроме пустой строки — <code>true</code>, пустая строка <code>''</code> — <code>false</code>. Можно сказать, что значения, которые как бы ничего в себе не содержат (как <code>0</code> или пустая строка <code>''</code>), приводятся к <code>false</code>, а все остальные приводятся к <code>true</code>.</p><pre>if ('какая-то строка') {\n  // Непустая строка приводится к true\n  // Условие выполнится\n};\n\nif ('') {\n  // Пустая строка приводится к false\n  // Условие не выполнится\n};\n\nif (123) {\n  // Число приводится к true\n  // Условие выполнится\n};\n\nif (0) {\n  // 0 приводится к false\n  // Условие не выполнится\n};\n</pre><p>Теперь мы можем вернуться к новой программе Кекса «Можно ли приступать к проекту». Чтобы убедиться, что условие отрабатывает правильно, попробуем поменять значение переменной <code>onVacation</code>.</p></div>`,html:``,css:``,hidden:``,js:`var onVacation = false;\n\nif (true) {\n    console.log('Нельзя приступать к проекту');\n} else {\n    console.log('Можно приступать к проекту');\n}\n`,tasks:[{message:`Исправим программу и поэкспериментируем со значением переменной <code class='keyvalue'>onVacation</code>. Замените условие в <code class='keyword'>if</code> на <code class='keyvalue'>onVacation</code>`,check:()=>~getJ().search(/varonVacation\S*if\(onVacation\)\{/)},{message:`Теперь измените значение переменной <code class='keyvalue'>onVacation</code> на <code class='keyword'>true</code>`,check:(o)=>{if(o.hV>0)return true;if(~getJ().search(/onVacation=true\S*if\(onVacation\)\{/))Academy.vars.hV=1}},{message:`А теперь — на <code class='keytext'>2</code>. Число не равно <code class='keytext'>нулю</code> и приводится к <code class='keyword'>true</code>.`,check:(o)=>{if(o.hV>1)return true;if(~getJ().search(/onVacation=2\S*if\(onVacation\)\{/))Academy.vars.hV=2}},{message:`И на <code class='keytext'>0</code>. Сообщение должно измениться.`,check:(o)=>{if(o.hV>2)return true;if(~getJ().search(/onVacation=0\S*if\(onVacation\)\{/))Academy.vars.hV=3}},{message:`Теперь на <code class='keytext'>''</code>`,check:(o)=>{if(o.hV>3)return true;if(~getJ().search(/onVacation=('|"|`)\1\S*if\(onVacation\)\{/))Academy.vars.hV=4}},{message:`И, наконец, удалите значение из переменной, оставив просто <code>var onVacation</code>;`,check:(o)=>o.hV===4&&~getJ().search(/varonVacation;/)}],blocked:"4",editorOff:"8"},
"lesson1020":{theory:`<div><h1>Вложенные условия</h1><p>Что делать, если принятие решения зависит не от одного, а от двух и более условий? Можно использовать один <code>if</code>, а затем, если условие выполнилось, выполнить ещё одно условие внутри вложенного <code>if</code>:</p><pre>if (условие1) {\n  if (условие2) {\n    действия;\n  }\n}\n</pre><p>Затем внутри второй проверки можно выполнить третью и так до бесконечности.</p><p>Продолжим писать программу «Можно ли приступать к проекту», которая как нельзя кстати усложнилась. Теперь приступать к проекту можно, если выполняются два условия:</p><ol><li>есть достаточное количество разработчиков — переменная <code>enoughDevelopers</code>;</li><li>и разработчики владеют требуемыми технологиями — переменная <code>techAvailable</code>.</li></ol><p>Если разработчиков достаточно и требуемая технология освоена, выводим сообщение «Можно приступать к проекту», иначе сообщение остаётся неизменённым: «Нельзя приступать к проекту».</p></div>`,html:``,css:``,hidden:``,js:`var enoughDevelopers = true;\nvar techAvailable = false;\n\nvar message = 'Нельзя приступать к проекту';\n\nconsole.log(message);\n`,tasks:[{message:`Опишем составное условие с помощью вложенных <code class='keyword'>if</code>. Между объявлением переменной <code class='keyvalue'>message</code> и выводом в <code class='keyword'>консоль</code> добавьте <code class='keyword'>if</code> с условием <code class='keyvalue'>enoughDevelopers</code>`,check:()=>~getJ().search(/varmessage\S*if\(enoughDevelopers\)\{\S*\}\S*console\.log\(message\)/)},{message:`Внутри блока <code class='keyword'>if</code> добавьте ещё один <code class='keyword'>if</code> с условием <code class='keyvalue'>techAvailable</code>`,check:()=>~getJ().search(/varmessage\S*if\(enoughDevelopers\)\{\S*if\(techAvailable\)\{\S*\}\S*\}\S*console\.log\(message\)/)},{message:`Внутри блока второго <code class='keyword'>if</code> добавьте присвоение <code class='keyvalue'>message</code> <code class='keyword'>=</code> <code class='keytext'>'Можно приступать к проекту'</code>;`,check:()=>~getJ().search(/varmessage\S*if\(enoughDevelopers\)\{\S*if\(techAvailable\)\{\S*message=('|"|`)Можноприступатькпроекту\1\S*\}\S*\}\S*console\.log\(message\)/)},{message:`Измените значение переменной <code class='keyvalue'>techAvailable</code> на <code class='keyword'>true</code>. Значение <code class='keyvalue'>message</code> должно измениться.`,check:()=>~getJ().search(/techAvailable=true\S*if\(enoughDevelopers\)\{\S*if\(techAvailable\)\{\S*message=('|"|`)Можноприступатькпроекту\1\S*\}\S*\}\S*console\.log\(message\)/)}],blocked:"4",editorOff:"8"},
"lesson1021":{theory:`<div><h1>Логические операторы: &amp;&amp;, ||</h1><p>Работа над программой кипит и Кекс просит внести в логику принятия решений ещё несколько изменений:</p><ul><li>Проект можно начинать, если разработчиков достаточно <em>и</em> они владеют необходимыми технологиями.</li><li>Проект нельзя начинать, если кто-то из разработчиков в отпуске <em>или</em> на больничном.</li></ul><p>Первую часть логики, ту которая содержит <code>и</code>, мы уже умеем реализовывать с помощью вложенных условий. Но как быть со второй частью, которая содержит <code>или</code>? Мы можем комбинировать условия внутри <code>if</code> с помощью логических операторов: <code>&amp;&amp;</code> и <code>||</code>. Например:</p><pre>var conditionOne = true;\nvar conditionTwo = true;\nvar conditionThree = false;\nvar conditionFour = true;\n\nif (conditionOne &amp;&amp; conditionTwo) {\n  // код выполнится\n}\nif (conditionThree || conditionFour) {\n  // код тоже выполнится\n}\n</pre><p>Оператор <code>&amp;&amp;</code> или «логическое И» возвращает <code>true</code> только в том случае, если <em>оба</em> условия, слева и справа от него, возвращают <code>true</code>.</p><p>Оператор <code>||</code> или «логическое ИЛИ» возвращает <code>true</code> если <em>любое</em> из условий слева или справа от него, возвращают <code>true</code>.</p><p>Теперь понятно, как запрограммировать вторую часть логики: скомбинируем условия «сотрудники в отпуске» и «сотрудники на больничном» через «логическое ИЛИ».</p><p>Первую часть логики тоже запрограммируем без вложенных <code>if</code>: объединим условия «достаточно разработчиков» и «технология освоена» через «логическое И». Мы отказались от вкладывания условий, так как это может сделать код сложным и запутанным. Если вложенность большая, то понять, почему выполняется то или иное действие, становится трудно.</p></div>`,html:``,css:``,hidden:``,js:`var enoughDevelopers = true;\nvar techAvailable = true;\nvar onVacation = false;\nvar onSickLeave = false;\n`,tasks:[{message:`Опишем новую логику программы: добавьте первое условие, объединяющее <code class='keyvalue'>enoughDevelopers</code> и <code class='keyvalue'>techAvailable</code> через <code class='keytext'>«логическое И»</code>.`,check:()=>~getJ().search(/varonSickLeave\S*if\((enoughDevelopers&&techAvailable|techAvailable&&enoughDevelopers)\)\{\S*\}/)},{message:`Внутри условия выведите в <code class='keyword'>консоль</code> сообщение <code class='keytext'>'Можно начинать проект'</code>`,check:()=>~getJ().search(/varonSickLeave\S*if\((enoughDevelopers&&techAvailable|techAvailable&&enoughDevelopers)\)\{\S*console\.log\(('|"|`)Можноначинатьпроект\2\)\S*\}/)},{message:`Добавьте ниже второе условие, объединяющее <code class='keyvalue'>onVacation</code> и <code class='keyvalue'>onSickLeave</code> через <code class='keytext'>«логическое ИЛИ»</code>`,check:()=>~getJ().search(/varonSickLeave\S*if\((onVacation\|\|onSickLeave|onSickLeave\|\|onVacation)\)\{\S*\}/)},{message:`Внутри второго условия выведите сообщение <code class='keytext'>'Лучше подождать'</code>`,check:()=>~getJ().search(/varonSickLeave\S*if\((onVacation\|\|onSickLeave|onSickLeave\|\|onVacation)\)\{\S*console\.log\(('|"|`)Лучшеподождать\2\)\S*\}/)},{message:`Измените значение переменной <code class='keyvalue'>techAvailable</code> на <code class='keyword'>false</code>, а значение переменной <code class='keyvalue'>onSickLeave</code> на <code class='keyword'>true</code>`,check:()=>~getJ().search(/(techAvailable=false\S*onSickLeave=true|onSickLeave=true\S*techAvailable=false)\S*if\((onVacation\|\|onSickLeave|onSickLeave\|\|onVacation)\)\{\S*console\.log\(('|"|`)Лучшеподождать\3\)\S*\}/)}],blocked:"4",editorOff:"8"},
"lesson1022":{theory:`<div><h1>Ловушки логики</h1><p>В текущую программу закралась ошибка. Просто пересылаю цитату из письма босса:</p><blockquote><p>Как-то, мур-мяу, сложно.</p><p>Сначала проверяет одно и говорит, что можно начинать.</p><p>А потом начинает проверять или то, или это и говорит подождать.</p><p>И я вижу два сообщения: сначала можно, потом сразу нельзя. И не знаю, что делать.</p><p>Пусть просто говорит когда можно начинать, а когда нельзя.</p></blockquote><p>Жаль, что вам пришлось столкнуться с задачами «анализ требований заказчика» и «исправление багов с помощью чтения мыслей» так рано. Но ничего не поделаешь. Давайте разбираться, где ошибка и чего хочет босс.</p><p>Из письма следует, что при каких-то условиях программа выдаёт сразу два сообщения. Чтобы поймать ошибку, её сначала надо воспроизвести. Поэтому давайте менять значения входных данных.</p></div>`,html:``,css:``,hidden:``,js:`var enoughDevelopers = false;\nvar techAvailable = false;\nvar onVacation = false;\nvar onSickLeave = false;\n\nif (enoughDevelopers && techAvailable) {\n    console.log('Можно начинать проект');\n}\n\nif (onVacation || onSickLeave) {\n    console.log('Лучше подождать');\n}\n`,tasks:[{message:`По очереди меняйте значения переменных. Укажите, что разработчиков хватает.`,check:()=>~getJ().search(/enoughDevelopers=true\S*if\(/)},{message:`Укажите, что разработчики владеют технологиями.`,check:()=>~getJ().search(/techAvailable=true\S*if\(/)},{message:`Укажите, что кто-то из разработчиков в отпуске.`,check:()=>~getJ().search(/onVacation=true\S*if\(/)}],blocked:"4",editorOff:"8"},
"lesson1023":{theory:`<div><h1>Логическое отрицание</h1><p>Отлично! Мы нашли ошибку. Как говорил Декарт: «Если баг воспроизводится, значит он существует».</p><p>В чём ошибка? Сейчас в программе есть две отдельных проверки. И эти проверки могут сработать одновременно. Когда это случается, появляется два сообщения.</p><p>Чтобы исправить ошибку, сначала введём новые проверки с отрицаниями:</p><ul><li><em>нет</em> разработчиков в отпуске;</li><li><em>нет</em> разработчиков на больничном.</li></ul><p>В этих условиях есть ключевое слово «нет», а значит они должны выполняться в тех случаях, когда значение переменной <code>false</code> и не выполняться, если значение — <code>true</code>.</p><p>Чтобы создать проверки с отрицанием используют унарный (одноместный) логический оператор <code>!</code>. Пример:</p><pre>var condition = false;\n\nif (!condition) {\n  // код выполнится\n}\n</pre><p>Попрактикуемся в использовании отрицания в программе «Можно ли начинать проект».</p></div>`,html:``,css:``,hidden:``,js:`var enoughDevelopers = false;\nvar techAvailable = false;\nvar onVacation = false;\nvar onSickLeave = false;\n\nif (enoughDevelopers && techAvailable) {\n    console.log('Можно начинать проект');\n}\n\nif (onVacation) {\n    console.log('Никого нет в отпуске');\n} else {\n    console.log('Кто-то в отпуске');\n}\n\nif (onSickLeave) {\n    console.log('Никого нет на больничном');\n} else {\n    console.log('Кто-то на больничном');\n}\n`,tasks:[{message:`Поэкспериментируем с отрицаниями. Измените проверку про отпуск на проверку <code class='keytext'>с отрицанием</code>.`,check:()=>~getJ().search(/if\((!onVacation|onVacation!==?true|true!==?onVacation)\)/)},{message:`То же самое сделайте с проверкой про больничный.`,check:()=>~getJ().search(/if\((!onSickLeave|onSickLeave!==?true|true!==?onSickLeave)\)/)},{message:`Укажите, что кто-то из разработчиков в отпуске.`,check:()=>~getJ().search(/onVacation=true\S*if\(/)},{message:`Укажите, что кто-то из разработчиков на больничном.`,check:()=>~getJ().search(/onSickLeave=true\S*if\(/)}],blocked:"4",editorOff:"8"},
"lesson1024":{theory:`<div><h1>Комбинируем логические операторы</h1><p>Теперь, когда вы научились использовать отрицания, мы можем описать новую логику программы, которая будет работать без ошибок.</p><p>Нам нужно объединить две отдельных проверки в одну общую. Проект можно начать, если:</p><ul><li>разработчиков достаточно</li><li><em>и</em> они владеют технологиями</li><li><em>и</em> нет разработчиков в отпуске</li><li><em>и</em> нет разработчиков на больничном.</li></ul><p>Реализовать в коде эту логику достаточно легко, ведь отрицания можно комбинировать с другими логическими операторами. Пример:</p><pre>var conditionOne = true;\nvar conditionTwo = true;\nvar conditionThree = false;\n\nif (conditionOne &amp;&amp; conditionTwo &amp;&amp; !conditionThree) {\n  // код выполнится\n}\n</pre><p>Пора завершить третью программу этого рабочего дня!</p></div>`,html:``,css:``,hidden:``,js:`var enoughDevelopers = false;\nvar techAvailable = false;\nvar onVacation = false;\nvar onSickLeave = false;\n\nif (enoughDevelopers && techAvailable) {\n    console.log('Можно начинать проект');\n}\n`,tasks:[{message:`Завершим программу и проверим её поведение. Добавьте в конец проверки через <code class='keytext'>«логическое И»</code> условие <code class='keyword'>!</code><code class='keyvalue'>onVacation</code>`,check:()=>~getJ().search(/if\(enoughDevelopers&&techAvailable&&!onVacation\S*\)\{\S*\}/)},{message:`А после него, тоже через <code class='keytext'>«логическое И»</code>, — условие <code class='keyword'>!</code><code class='keyvalue'>onSickLeave</code>`,check:()=>~getJ().search(/if\(enoughDevelopers&&techAvailable&&!onVacation&&!onSickLeave\)\{\S*\}/)},{message:`Теперь добавьте ветку <code class='keyword'>else</code> и выведите в ней сообщение <code class='keytext'>'Нельзя начинать проект'</code>`,check:()=>~getJ().search(/if\(\S*\}else\{\S*console\.log\(('|"|`)Нельзяначинатьпроект\1\)\S*\}/)},{message:`Исправьте значения переменных так, чтобы условие выполнилось.`,check:(o)=>{if(o.hA)return true;if(~o.log.indexOf('Можно начинать проект'))Academy.vars.hA=true}},{message:`Затем укажите, что кто-то из разработчиков в отпуске и убедитесь, что проект начать нельзя.`,check:(o)=>o.hA&&~o.log.indexOf('Нельзя начинать проект')}],blocked:"4",editorOff:"8"},
"lesson1025":{theory:`<section><h1>Конспект «Условия»</h1><h2>Синтаксис</h2><p>Условие:</p><pre>if (условие) {\n  действие;\n}\n</pre><p>Условие с альтернативным действием:</p><pre>if (условие) {\n  действия;\n} else {\n  другие действия;\n}\n</pre><p>Вложенные условия:</p><pre>if (условие1) {\n  if (условие2) {\n    действия;\n  }\n}\n</pre><h2>Как работают условия</h2><p>Выражение в круглых скобках (проверка) возвращает <code>true</code> или <code>false</code>. Действие внутри условия выполняется, если вернулось <code>true</code>. Если выражение вернуло <code>false</code>, действие не выполнится.</p><h2>Код внутри проверок</h2><p>Операторы сравнения:</p><div class="grid grid--gutters grid--offset"><div class="grid__cell"><div class="table-responsive"><table class="table table--striped table--full-width"><tbody><tr><th>Оператор</th><th>Название</th></tr><tr><td>&gt;</td><td>«больше»</td></tr><tr><td>&lt;</td><td>«меньше»</td></tr><tr><td>&gt;=</td><td>«больше или равно»</td></tr><tr><td>&lt;=</td><td>«меньше или равно»</td></tr></tbody></table></div></div></div><p>Операторы равенства:</p><div class="grid grid--gutters grid--offset"><div class="grid__cell"><div class="table-responsive"><table class="table table--striped table--full-width"><tbody><tr><th>Оператор</th><th>Название</th><th>Описание</th></tr><tr><td>==</td><td>«нестрогое равенство»</td><td>с приведением типов аргументов</td></tr><tr><td>===</td><td>«строгое равенство»</td><td>без приведения типов аргументов</td></tr><tr><td>!=</td><td>«нестрогое неравенство»</td><td>с приведением типов аргументов</td></tr><tr><td>!==</td><td>«строгое неравенство»</td><td>без приведения типов аргументов</td></tr></tbody></table></div></div></div><p>Любые значения внутри проверок приводятся к булеву типу. Все числа кроме <code>0</code> — <code>true</code>, при этом <code>0</code> — <code>false</code>. Все строки, кроме пустой строки — <code>true</code>, пустая строка <code>''</code> — <code>false</code>.</p><p>Логические операторы.</p><ul><li>Оператор <code>&amp;&amp;</code> или «логическое И» возвращает true только в том случае, если оба условия, слева и справа от него, возвращают true.</li><li>Оператор <code>||</code> или «логическое ИЛИ» возвращает true если любое из условий слева или справа от него, возвращают true.</li><li>Оператор <code>!</code> или «логическое отрицание» меняет булево значение выражения справа от него на противоположное.</li></ul><br></section>`,html:``,css:``,hidden:``,js:`var distance = keks.run();\nvar rest;\n// Условие писать здесь\n\n\nconsole\.log(rest);\n`,tasks:[{message:"Кексик решил пробежать спринт на короткую дистанцию. Сколько он пробежал в этот раз - записано в переменную <code class='keyvalue'>distance</code>. Запишите в переменную <code class='keyvalue'>rest</code> значение <code class='keyword'>true</code>, если Кексу следует отдохнуть перед следующим забегом или <code class='keyword'>false</code>, если он справится без отдыха. Отдыхать ему стоит при забеге длиннее <code class='keytext'>60</code> метров!",check:()=>{var t;try{t=eval("function z(){Academy.vars.tcl=console.log;console.log=()=>{};"+Academy.JS.getValue()+";console.log=Academy.vars.tcl;return [distance,rest]};z();")}catch(e){return false};return Array.isArray(t)&&t.length===2&&((t[0]>60&&t[1]===true)||(t[0]<=60&&t[1]===false))}}],blocked:"4",editorOff:"9"},
"lesson1026":{theory:`<div><h1>Вторая программа: «Сколько гулять?»</h1><p>Следующая программа, которую вам предстоит написать будет рассчитывать длительность прогулки в зависимости от погодных условий и температуры воздуха, чтобы добиться максимально эффективного метаболизма в кошачьем организме.</p><blockquote><p>Мяу! Длительность прогулки зависит от нескольких условий.</p><p>Если идёт дождь, гулять я не хожу. В этом случае длительность прогулки равняется <code>0</code>. А вот если дождя нет, всё зависит от температуры на улице:</p><p>Во-первых, если температура от 10°C (включительно) до 15°C (не включая это значение), я гуляю 30 минут. Холодновато, но шерсть спасает.</p><p>Во-вторых, если температура от 15°C (включительно) до 25°C (не включая значение), я гуляю 40 минут — погода идеальна.</p><p>В-третьих, при температуре от 25°C (включительно) до 35°C (включительно), я гуляю 20 минут — уж очень лапы потеют в такую жару.</p><p>В остальных случаях я никуда не выхожу: либо очень холодно, либо очень жарко. Мне и дома на батарее неплохо.</p></blockquote><p>Переменная <code>isRaining</code> хранит показатель (он называется «флаг»), который говорит идёт ли дождь. Если значение переменной <code>true</code> – на улице дождь, если <code>false</code> — дождя нет. Переменная <code>temperature</code> показывает температуру на улице. Результат программы – время прогулки. Его необходимо записать в переменную <code>minutes</code>.</p><p>Это необычное задание. В нём заказчик будет тестировать вашу программу, подставляя разные значения во входные переменные и проверяя полученные рекомендации. Только когда все тесты пройдут успешно, задание будет выполнено.</p></div>`,html:``,css:``,hidden:``,js:`var temperature = 20;\nvar isRaining = true;\nvar minutes = 0;\n\n`,tasks:[{message:`<button onclick="fH1.a()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Длительность прогулки зависит от нескольких условий.</p><p>Если идёт дождь, гулять я не хожу. В этом случае длительность прогулки равняется <code class='keytext'>0</code>. А вот если дождя нет, всё зависит от температуры на улице:</p><ul><li>Во-первых, если температура от <code class='keytext'>10</code>°C (включительно) до <code class='keytext'>15</code>°C (не включая это значение), я гуляю <code class='keytext'>30</code> минут.</li><li>Во-вторых, если температура от <code class='keytext'>15</code>°C (включительно) до <code class='keytext'>25</code>°C (не включая значение), я гуляю <code class='keytext'>40</code> минут.</li><li>В-третьих, при температуре от <code class='keytext'>25</code>°C (включительно) до <code class='keytext'>35</code>°C (включительно), я гуляю <code class='keytext'>20</code> минут.</li><li>В остальных случаях я никуда не выхожу: либо очень холодно, либо очень жарко.</li></ul><p>Результат программы – время прогулки. Его необходимо записать в переменную <code class='keyvalue'>minutes</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"},
"lesson1027":{theory:`<div><h1>Неприличный вопрос</h1><p>Кекс решил принять участие в очередных спортивных соревнованиях. В анкете надо указать к какой возрастной группе относится участник. Кекса этот вопрос поставил в тупик, в душе-то ему всегда два. Нужно написать программу, которая определит возрастную группу Кекса — Босс хочет заранее оценить свои шансы на победу в группе.</p><blockquote><p>Мяу! Напиши программу, которая будет определять возрастную группу по возрасту.</p><p>Возраст записан в переменную <code>age</code>.</p><p>Проверяй возраст и записывай возрастную группу <b>в виде строки</b> в переменную <code>ageGroup</code>.</p><p>Если возраст до года включительно, то возрастная группа называется <code>'Котята'</code>.</p><p>Если возраст от года (не включая это значение) до трёх лет включительно — <code>'Молодые коты'</code>.</p><p>Если возраст от трёх лет (не включая это значение) до семи (включительно) — <code>'Коты средних лет'</code>.</p><p>А если возраст от семи лет (не включая это значение) и больше — <code>'Почтенные коты'</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var age = 5;\nvar ageGroup;\n\n`,tasks:[{message:`<button onclick="fH1.b()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Напиши программу, которая будет определять возрастную группу по возрасту.</p><p>Возраст записан в переменную <code class='keyvalue'>age</code>.</p><p>Проверяй возраст и записывай возрастную группу в виде строки в переменную <code class='keyvalue'>ageGroup</code>.</p><ul><li>Если возраст до <code class='keytext'>года</code> включительно, то возрастная группа называется <code class='keytext'>'Котята'</code>.</li><li>Если возраст от <code class='keytext'>года</code> (не включая это значение) до <code class='keytext'>трёх</code> лет включительно — <code class='keytext'>'Молодые коты'</code>.</li><li>Если возраст от <code class='keytext'>трёх</code> лет (не включая это значение) до <code class='keytext'>семи</code> (включительно) — <code class='keytext'>'Коты средних лет'</code>.</li><li>А если возраст от <code class='keytext'>семи</code> лет (не включая это значение) и больше — <code class='keytext'>'Почтенные коты'</code>.</li></ul></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"},
"lesson1028":{theory:`<div><h1>Умные весы</h1><p>Кекс живёт по всем правилам ЗОЖ, но иногда даёт себе расслабиться. Самому следить за весом утомительно, поэтому Кекс хочет запрограммировать умные весы, чтобы они подсказывали, когда нужно взять себя в руки, а когда можно позволить себе отдых от всех правил.</p><blockquote><p>Мяу! Запрограммируй умные весы, чтобы они давали рекомендации в зависимости от веса.</p><p>Вес записан в переменную <code>weight</code>.</p><p>Рекомендацию записывай <b>строкой</b> в переменную <code>recommendation</code>.</p><p>Если вес до <code>4 кг</code> (не включая это значение), рекомендация — <code>'Пора перекусить'</code>.</p><p>Если вес от <code>4 кг</code> включительно до <code>5.5 кг</code> включительно — <code>'Вес в норме'</code>.</p><p>Если вес больше <code>5.5 кг</code> — <code>'Пора на тренировку'</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var weight = 5;\nvar recommendation;\n\n`,tasks:[{message:`<button onclick="fH1.c()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Запрограммируй умные весы, чтобы они давали рекомендации в зависимости от веса.</p><p>Вес записан в переменную <code class='keyvalue'>weight</code>.</p><p>Рекомендацию записывай строкой в переменную <code class='keyvalue'>recommendation</code>.</p><ul><li>Если вес до <code class='keytext'>4</code> кг (не включая это значение), рекомендация – <code class='keytext'>'Пора перекусить'</code>.</li><li>Если вес от <code class='keytext'>4</code> кг включительно до <code class='keytext'>5.5</code> кг включительно – <code class='keytext'>'Вес в норме'</code>.</li><li>Если вес больше <code class='keytext'>5.5</code> кг – <code class='keytext'>'Пора на тренировку'</code>.</li></ul></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"},
"lesson1029":{theory:`<div><h1>FizzBuzz</h1><p>«Fizz Buzz» — одна из классических программистских задач. Её часто предлагают решить на собеседованиях соискателям на вакансию разработчика. Попробуйте и вы решить эту задачу.</p><p>Вот техническое задание:</p><p>Программа должна анализировать числа.</p><p>Если число делится на <code>3</code>, результат работы программы — строка <code>'Fizz'</code>.</p><p>Если число делится на <code>5</code> — строка <code>'Buzz'</code>.</p><p>Если число <b>одновременно</b> делится на <code>3</code> и на <code>5</code> — результат <code>'FizzBuzz'</code>.</p><p>В остальных случаях результат работы программы — изначальное число.</p><p>Число записано в переменную <code>number</code>.</p><p>Результат работы программы записывайте в переменную <code>taskResult</code>.</p><p>Чтобы проверить, делится ли одно число на другое без остатка, используйте оператор «остаток от деления». Он записывается в виде знака процента (<code>%</code>) и возвращает остаток от деления чисел. Работает это так:</p><pre>12 % 5;  // Вернёт 2\n27 % 3;  // Вернёт 0\n13 % 3;  // Вернёт 1\n</pre></div>`,html:``,css:``,hidden:``,js:`var number = 15;\nvar taskResult;\n\n`,tasks:[{message:`<button onclick="fH1.d()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p>Программа должна анализировать числа.</p><ul><li>Если число делится на <code class='keytext'>3</code>, результат работы программы — строка <code class='keytext'>'Fizz'</code>.</li><li>Если число делится на <code class='keytext'>5</code> — строка <code class='keytext'>'Buzz'</code>.</li><li>Если число одновременно делится на <code class='keytext'>3</code> и на <code class='keytext'>5</code> — результат <code class='keytext'>'FizzBuzz'</code>.</li><li>В остальных случаях результат работы программы — изначальное число.</li></ul><p>Число записано в переменную <code class='keyvalue'>number</code>.</p><p>Результат работы программы записывайте в переменную <code class='keyvalue'>taskResult</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"},
"lesson1030":{theory:`<div><h1>Творческий доход</h1><p>Кекс любит писать картины. Он совершенно не согласен с тем, что художник должен быть бедным, поэтому, как истинный предприниматель, решил продавать свои художества. Он даже продумал систему скидок для покупателей. Осталось написать программу, которая будет считать итоговую стоимость покупки.</p><blockquote><p>Мяу! Напиши программу, которая будет рассчитывать сумму покупки с учётом скидки.</p><p>Стоимость записана в переменную <code>buy</code>.</p><p>Если стоимость покупки <code>от 1000</code> (включительно) <code>до 3000</code> (не включая это значение), скидка составляет <code>5%</code>.</p><p>Если стоимость покупки <code>от 3000</code> (включительно) <code>до 5000</code> (не включая это значение), скидка <code>10%</code>.</p><p>Если стоимость покупки <code>от 5000</code> (включительно) и выше, скидка <code>15%</code>.</p><p>В остальных случаях скидки для покупателей нет.</p><p>Вычисляй стоимость с учётом скидки и записывай результат в переменную <code>discountedBuy</code>.</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var buy = 4000;\nvar discountedBuy;\n\n`,tasks:[{message:`<button onclick="fH1.e()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyvalue'>Мяу!</code> Напиши программу, которая будет рассчитывать сумму покупки с учётом скидки.</p><p>Стоимость записана в переменную <code class='keyvalue'>buy</code>.</p><ul><li>Если стоимость покупки от <code class='keytext'>1000</code> (включительно) до <code class='keytext'>3000</code> (не включая это значение), скидка составляет <code class='keytext'>5</code>%.</li><li>Если стоимость покупки от <code class='keytext'>3000</code> (включительно) до <code class='keytext'>5000</code> (не включая это значение), скидка <code class='keytext'>10</code>%.</li><li>Если стоимость покупки от <code class='keytext'>5000</code> (включительно) и выше, скидка <code class='keytext'>15</code>%.</li><li>В остальных случаях скидки для покупателей <code class='keytext'>нет</code>.</li></ul><p>Вычисляй стоимость с учётом скидки и записывай результат в переменную <code class='keyvalue'>discountedBuy</code>.</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"},
"lesson1031":{theory:`<div><h1>Путь к молоку</h1><p>Кекс любит молоко, но чтобы его купить, надо следить за временем — магазин, рынок и молокозавод работают по-разному. Напишите программу, которая по текущему времени будет советовать Кексу, куда сейчас сходить за молоком. Каждая торговая точка находится на разном расстоянии от дома Кекса, поэтому нужно давать правильные рекомендации. Кекс не любит тратить время зря и предпочитает ходить в места поблизости.</p><blockquote><p>Мяу! Напиши программу, которая определит <b>ближайшее</b> работающее место с молоком.</p><p>Время записано в часах в переменную <code>time</code>.</p><p>Молокозавод находится ближе всех. Он начинает работать в <code>8</code>, а закрывается в <code>19</code>. Перерыв на обед с <code>13</code> до <code>14</code>.</p><p>Дальше находится магазин. Он работает с <code>9</code> до <code>17</code>. Перерыв на обед с <code>14</code> до <code>15</code>.</p><p>Дальше всех находится рынок. Он работает с <code>7</code> до <code>20</code> без перерывов.</p><p>В остальное время все места закрыты и можно никуда не ходить.</p><p>Вычисли, куда надо пойти за молоком и запиши значение <code>true</code> в одну из переменных: <code>goToDairy</code> (молокозавод), <code>goToStore</code> (магазин), <code>goToMarket</code> (рынок).</p></blockquote></div>`,html:``,css:``,hidden:``,js:`var time = 15;\n\nvar goToDairy = false;\nvar goToStore = false;\nvar goToMarket = false;\n\n`,tasks:[{message:`<button onclick="fH1.f()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><p><code class='keyword'>Мяу!</code> Напиши программу, которая определит ближайшее работающее место с молоком.</p><p>Время записано в часах в переменную <code class='keyvalue'>time</code>.</p><p>Молокозавод находится ближе всех. Он начинает работать в <code class='keytext'>8</code>, а закрывается в <code class='keytext'>19</code>. Перерыв на обед с <code class='keytext'>13</code> до <code class='keytext'>14</code>.</p><p>Дальше находится магазин. Он работает с <code class='keytext'>9</code> до <code class='keytext'>17</code>. Перерыв на обед с <code class='keytext'>14</code> до <code class='keytext'>15</code>.</p><p>Дальше всех находится рынок. Он работает с <code class='keytext'>7</code> до <code class='keytext'>20</code> без перерывов.</p><p>В остальное время все места закрыты и можно никуда не ходить.</p><p>Вычисли, куда надо пойти за молоком и запиши значение <code class='keyword'>true</code> в одну из переменных: <code class='keyvalue'>goToDairy</code> (молокозавод), <code class='keyvalue'>goToStore</code> (магазин), <code class='keyvalue'>goToMarket</code> (рынок).</p></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"},
"lesson1032":{theory:`<div><h1>Длительность прогулки</h1><p>Следующая программа, которую вам предстоит написать будет рассчитывать длительность прогулки в зависимости от погодных условий и температуры воздуха, чтобы добиться максимально эффективного метаболизма в кошачьем организме.</p><blockquote><p>Мяу! Длительность прогулки зависит от нескольких условий.</p><p>Во-первых, если идёт дождь, прогулка не может состояться. В этом случае длительность прогулки должна равняться <code>0</code>.</p><p>Во-вторых, если температура слишком низкая (ниже 0°C) или слишком высокая (выше 35°C), прогулка тоже не состоится. </p><p>В-третьих, идеальная температура для прогулки — 20°C. В этом случае прогулка длится 20 минут.</p><p>В остальных случаях длительность прогулки уменьшается на минуту с каждым градусом отклонения от идеальной температуры: при 19°C или 21°C длительность составит 19 минут, при 18°C или 22°C — 18 минут и так далее.</p></blockquote><p>Переменная <code>itsRaining</code> хранит флаг «идёт дождь», а <code>temperature</code> — температуру на улице. Результат необходимо записать в переменную <code>minutes</code>.</p><p>Это необычное задание. В нём заказчик будет тестировать вашу программу, подставляя разные значения во входные переменные и проверяя рекомендации, которые выдаёт программа. Только когда все тесты пройдут успешно, задание будет выполнено.</p></div>`,html:``,css:``,hidden:``,js:`var temperature = 20;\nvar itsRaining = false;\n\nvar minutes;\n\n`,tasks:[{message:`<button onclick="fH1.g()">Проверить!</button><h3 class='test-header'>Техническое задание</h3><div class='test-container'><ul><li>Во-первых, если идёт дождь, прогулка не может состояться. В этом случае длительность прогулки должна равняться  <code class='keytext'>0</code>.</li><li>Во-вторых, если температура слишком низкая (ниже <code class='keytext'>0</code>°C) или слишком высокая (выше <code class='keytext'>35</code>°C), прогулка тоже не состоится.</li><li>В-третьих, идеальная температура для прогулки — <code class='keytext'>20</code>°C. В этом случае прогулка длится <code class='keytext'>20</code> минут.</li><li>В остальных случаях длительность прогулки уменьшается на минуту с каждым градусом отклонения от идеальной температуры: при <code class='keytext'>19</code>°C или <code class='keytext'>21</code>°C длительность составит <code class='keytext'>19</code> минут, при <code class='keytext'>18</code>°C или <code class='keytext'>22</code>°C — <code class='keytext'>18</code> минут и так далее.</li></ul></div><p class='task-press-button'>Нажмите кнопку <code class="keyclass">Проверить</code>, чтобы проверить задание.</p>`,check:(o)=>{document.querySelector('#lesson-tasks ul').classList.add('test-list');return o.hA}}],blocked:"4",editorOff:"8"}};
hL();