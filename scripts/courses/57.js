fH1=()=>{var a=[[true,false],[false,false],[true,true],[true,false],[false,false]];var p=document.querySelectorAll('#view-before .view-body li');for(var i=0;i<p.length;i++){p[i].classList.add(a[i][0]?'good--available':'good--unavailable');if(a[i][1])p[i].classList.add('good--hit');};Academy.vars.hE=true};
fH2=()=>{var s=[[true,'images/courses/57/choco.jpg','Сливочно-кофейное с кусочками шоколада',310,true,'Двойная порция сиропа бесплатно!'],[false,'images/courses/57/lemon.jpg','Сливочно-лимонное с карамельной присыпкой',125,false],[true,'images/courses/57/cowberry.jpg','Сливочное с брусничным джемом',170,false],[true,'images/courses/57/cookie.jpg','Сливочное с кусочками печенья',250,false],[true,'images/courses/57/creme-brulee.jpg','Сливочное крем-брюле',190,false]];var u = document.querySelector('#view-before .goods');var m=function(t,c,r){var e=document.createElement(t);e.classList.add(c);if(r)e.textContent=r;return e};for(var i=0;i<s.length;i++){var a=m('li','good');a.classList.add(s[i][0]?'good--available':'good--unavailable');a.appendChild(m('h2','good__description',s[i][2]));var g=m('img','good__image');g.src=s[i][1];g.alt=s[i][2];a.appendChild(g);a.appendChild(m('p','good__price',s[i][3]+'₽/кг'));if(s[i][4]){a.classList.add('good--hit');a.appendChild(m('p','good__special-offer',s[i][5]));};u.appendChild(a);};Academy.vars.hE=true};
tb1=`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Каталог | Техномарт</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <ul class="products">\n    <li class="product">\n      <h2 class="product__title">Пассатижи «Суперхват»</h2>\n      <img class="product__image" src="images/courses/57/good-1.jpg" width="200" height="150" alt="Пассатижи «Суперхват»">\n      <p class="product__price">800 Р.</p>\n    </li>\n\n    <li class="product">\n      <h2 class="product__title">Отвёртка «Буравочка»</h2>\n      <img class="product__image" src="images/courses/57/good-2.jpg" width="200" height="150" alt="Отвёртка «Буравочка»">\n      <p class="product__price">550 Р.</p>\n    </li>\n\n    <li class="product">\n      <h2 class="product__title">Плоскогубцы «Коперник»</h2>\n      <img class="product__image" src="images/courses/57/good-3.jpg" width="200" height="150" alt="Плоскогубцы «Коперник»">\n      <p class="product__price">1 350 Р.</p>\n    </li>\n\n    <li class="product">\n      <h2 class="product__title">Перфоратор «Привет, сосед!»</h2>\n      <img class="product__image" src="images/courses/57/good-4.jpg" width="200" height="150" alt="Перфоратор «Привет, сосед!»">\n      <p class="product__price">7 500 Р.</p>\n    </li>\n\n    <li class="product">\n      <h2 class="product__title">Молоток «Мьёльнир»</h2>\n      <img class="product__image" src="images/courses/57/good-5.jpg" width="200" height="150" alt="Молоток «Мьёльнир»">\n      <p class="product__price">2 000 Р.</p>\n    </li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`;
tc1=`.product {\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 220px;\n  margin-bottom: 20px;\n\n  text-align: center;\n\n  border: 1px solid #cccccc;\n}\n\n.product--available::before {\n  content: "";\n  position: absolute;\n  top: 5px;\n  left: 5px;\n\n  width: 15px;\n  height: 15px;\n  padding: 5px;\n\n  background-image: url("images/courses/57/check.svg");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 18px;\n  border: 1px solid #4eb543;\n  border-radius: 50%;\n}\n\n.product--unavailable {\n  filter: grayscale(1) opacity(0.7);\n}\n\n.product--unavailable::before {\n  content: "Нет в наличии";\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  padding: 5px;\n\n  font-size: 14px;\n}\n\n.product--special {\n  flex-basis: 100%;\n  order: -1;\n\n  border-color: #ee3643;\n}\n\n.product--special::after {\n  content: "Товар дня";\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  height: 30px;\n  padding-right: 10px;\n  padding-left: 10px;\n\n  line-height: 30px;\n  color: #ffffff;\n\n  background-color: #ee3643;\n}`;
th1=`body{font-size:16px;font-family:"PT Sans","Arial",sans-serif;color:#000000;background-color:#ffffff;}img{max-width:100%;height:auto;}.product{display:-webkit-box;display:-ms-flexbox;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;}.products{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:470px;margin:20px auto;padding:0;list-style:none;}.product__title{margin:0 25px;margin-bottom:15px;font-size:18px;}.product__image{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1;width:200px;height:150px;margin-bottom:10px;}.product__discount{min-height:20px;margin-bottom:10px;color:#999999;text-decoration:line-through;}.product__price{width:80px;margin:0;margin-bottom:20px;padding:10px 30px;color:#ffffff;background:#ee3643;border-radius:3px;}`;
tj1=`var catalogData = [\n    {\n        isAvailable: true,\n        isSpecial: false\n    },\n    {\n        isAvailable: false,\n        isSpecial: false\n    },\n     {\n        isAvailable: true,\n        isSpecial: true\n    },\n    {\n        isAvailable: true,\n        isSpecial: false\n    },\n    {\n        isAvailable: false,\n        isSpecial: false\n    }\n];\n`;
tb2=`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Каталог | Девайс</title>\n</head>\n<body>\n  <ul class="products">\n    <li class="product product--available">\n      <h2 class="product__title">Селфи-палка для начинающих</h2>\n      <img class="product__image" src="images/courses/57/item-1.jpg" alt="Селфи-палка для начинающих">\n      <p class="product__price">200</p>\n    </li>\n    <li class="product product--unavailable">\n      <h2 class="product__title">Профессиональная селфи-палка</h2>\n      <img class="product__image" src="images/courses/57/item-2.jpg" alt="Профессиональная селфи-палка">\n      <p class="product__price">1500</p>\n    </li>\n    <li class="product product--available">\n      <h2 class="product__title">Непотопляемая селфи-палка</h2>\n      <img class="product__image" src="images/courses/57/item-3.jpg" alt="Непотопляемая селфи-палка">\n      <p class="product__price">2500</p>\n    </li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`;
tc2=`.products {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  width: 570px;\n  margin: 20px auto;\n  padding: 0;\n\n  list-style: none;\n}\n\n.product {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  width: 270px;\n  margin-bottom: 30px;\n}\n\n.product:empty {\n  background-color: rgb(225, 225, 239);\n}\n\n.product__image {\n  order: -1;\n  width: 270px;\n  height: 380px;\n  margin-bottom: 15px;\n}\n\n.product__title {\n  max-width: 180px;\n  margin: 0;\n\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 24px;\n}\n\n.product__price {\n  max-width: 80px;\n  margin: 0;\n\n  text-align: right;\n  font-weight: 300;\n  font-size: 16px;\n  line-height: 27px;\n}\n\n.product--special {\n  order: -1;\n  width: 100%;\n  height: 380px;\n\n  flex-direction: column;\n  justify-content: flex-start;\n  align-content: space-between;\n}\n\n.product--special .product__title {\n  width: 270px;\n  max-width: 100%;\n  margin-bottom: 10px;\n\n  font-size: 28px;\n  line-height: 36px;\n}\n\n.product--special .product__price {\n  width: 270px;\n  max-width: 100%;\n  text-align: left;\n  text-decoration: line-through;\n  color: #cccccc;\n}\n\n.product--special .product__special-price {\n  margin: 0;\n}\n\n.product--special .product__image {\n  outline: 3px solid #ffc600;\n}\n\n.product--special::before {\n  content: "Товар дня";\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px 10px;\n\n  font-weight: 500;\n  color: #111111;\n  text-transform: uppercase;\n\n  background-color: #ffc600;\n}\n\n.product--available::after,\n.product--unavailable::after {\n  position: absolute;\n  top: 343px;\n  left: 50%;\n\n  padding: 10px 5px 2px 5px;\n\n  border-bottom: 1px solid #57c74b;\n  transform: translateX(-50%);\n}\n\n.product--available::after {\n  content: "В наличии";\n}\n\n.product--unavailable {\n  filter: grayscale(1) opacity(0.7);\n}\n\n.product--unavailable::after {\n  content: "Нет в наличии";\n}\n\n.product--special.product--available::after,\n.product--special.product--unavailable::after {\n  left: 135px;\n}`;
th2=`body{font-weight:300;font-size:16px;font-family:"Gilroy","Arial",sans-serif;color:#000000;background-color:#ffffff;}img{max-width:100%;height:auto;}`;
tb3=`<!DOCTYPE html>\n<html lang="ru">\n<head>\n  <meta charset="utf-8">\n  <title>Каталог | Девайс</title>\n</head>\n<body>\n  <ul class="products">\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`;

LessonsData = {
'lesson1166':{html:tb1.slice(0,tb1.length-51)+'</body>\n</html>',css:tc1,hidden:th1,js:`// document.body.style.background = 'rgba(48, 213, 200, .3)';`,theory:`<div><h1>Скрипт на старт!</h1><p>Кекс взял несколько заказов от интернет-магазинов и собирается заглянуть к вам в ближайшее время, чтобы раздать задачи. Пока Босс в пути, разберёмся, как подключать скрипты на страницу.</p><p>До этого мы писали программы, не связанные с интерфейсом сайта. В интернет-магазине такое не пройдёт, здесь надо манипулировать элементами на странице. Чтобы это сделать, надо грамотно подключить свой код.</p><p>Скрипты подключаются к странице с помощью тега <code>script</code> двумя способами:</p><p><b>Инлайновый код.</b> Код пишется внутри тега <code>script</code>.</p>\n  <pre>&lt;body&gt;\n  …\n  &lt;script&gt;console.log('Я — инлайновый скрипт');&lt;/script&gt;\n&lt;/body&gt;\n</pre><p><b>Внешний файл с кодом.</b> Тегу <code>script</code> добавляется атрибут <code>src</code>, в котором указывается путь до файла со скриптом.</p><pre>&lt;body&gt;\n  …\n  &lt;script src="script.js"&gt;&lt;/script&gt;\n&lt;/body&gt;</pre><p>Обратите внимание, что эти два способа не сочетаются друг с другом. Если у тега <code>script</code> указан атрибут <code>src</code>, инлайновый код игнорируется и не выполняется, поэтому он должен находиться в другом теге <code>script</code>.</p><pre>&lt;body&gt;\n  …\n  <i>&lt;!-- Инлайновый скрипт не сможет рассказать о себе --&gt;</i>\n  &lt;script src="script.js"&gt;console.log('Я — инлайновый скрипт');&lt;/script&gt;\n\n  <i>&lt;!-- Вся консоль внимает инлайновому скрипту --&gt;</i>\n  &lt;script src="script.js"&gt;&lt;/script&gt;\n  &lt;script&gt;console.log('Я — инлайновый скрипт');&lt;/script&gt;\n&lt;/body&gt;\n</pre><p>Скрипты выполняются по мере подключения на страницу. Если за тегом <code>script</code> находится разметка, она не отрисуется пока не выполнится скрипт (в случае с инлайновым кодом) или пока он не скачается с внешнего ресурса и не будет выполнен (при подключении внешнего файла).</p><p>Поэтому мы будем подключать скрипт перед закрывающим тегом <code>body</code> — так мы будем уверены, что вся разметка отобразилась на странице и с ней можно работать.</p></div>`,tasks:[{message:"Подключите <code class='keyword'>script.js</code> к странице перед закрывающим тегом <code class='keyvalue'>body</code>.",check:()=>{var s=document.querySelector('#view-after .view-body script');if(s&&s.getAttribute('src')&&~s.getAttribute('src').indexOf('script.js'))return true;}},{message:"Раскомментируйте код во вкладке «<code class='keyword'>JS</code>».",check:()=>!~getJ().indexOf('/')}],blocked:"2",editorOff:"2"},
'lesson1167':{html:tb1,css:tc1,hidden:th1,js:``,theory:`<div><h1>Я иду искать</h1><p>Кекс добрался до офиса и первым делом заглянул к вам. Босс хочет внести несколько правок на страницу: указать, что отвёртка «Буравочка» — товар дня, и отметить молоток «Мьёльнир» недоступным для заказа.</p><p>Казалось бы, зачем здесь JavaScript, можно ведь поменять разметку или стили. Но ни к тому, ни к другому доступа у нас нет. Так решил владелец магазина. Мы можем менять страницу только с помощью скриптов.</p><p>JavaScript особым образом воспринимает разметку: элементы здесь не строки, которые мы пишем в HTML-файлах, а объекты. При этом каждый объект связан с другими такими же объектами и знает о своём родителе, соседних объектах-элементах, вложенных объектах. В итоге получается древовидная структура, которая называется <i>DOM</i> (Document Object Model или объектная модель документа).</p><p>В каждом DOM-дереве есть корневой объект, из которого «растут» другие объекты. Он называется <code>document</code>. Этот глобальный объект доступен во всех программах, которые работают в браузере. Проще говоря, <code>document</code> — страница, которая содержит все элементы разметки (объекты).</p><p>С помощью <code>document</code> разработчики могут найти любой объект на странице, а потом изменить его. Для этого у объекта <code>document</code> есть специальные методы поиска.</p><p>Самый гибкий из них — <code>querySelector</code>. Этот метод принимает CSS-селектор и возвращает подходящий элемент. Он понимает любые CSS-селекторы и вызывается так:</p><pre>// Поиск элемента по тегу\nvar list = document.querySelector('ul');\n\n// Поиск последнего элемента из списка\nvar lastProduct = document.querySelector('li:last-child');\n\n// Поиск элемента по классу\nvar price = document.querySelector('.price');\n\n// Поиск третьего элемента из списка товаров\nvar thirdProduct = document.querySelector('.product:nth-child(3)');\n</pre><p>Посмотрим на страницу магазина. Перед нами список, где каждый товар — <code>li</code> с классом <code>product</code>. Отвёртка «Буравочка», которая должна стать товаром дня, вторая в разметке. Значит, нам нужно найти второй элемент в списке. Для этого можно использовать селектор <code>.product:nth-child(2)</code>. Молоток «Мьёльнир», которого нет в наличии, расположен последним. Его можно найти через <code>.product:last-child</code>.</p><p>Найдём второй и последний DOM-элемент из списка товаров, выведем их в консоль и убедимся, что поиск сработал верно.</p></div>`,tasks:[{message:"Объявите переменную <code class='keyvalue'>specialProduct</code> и запишите в неё второй <code class='keytext'>DOM-элемент</code> из списка товаров.",check:(o)=>o&&o.specialProduct===document.querySelector('#view-after li:nth-of-type(2)')},{message:"Выведите <code class='keyvalue'>specialProduct</code> в <code class='keytext'>консоль</code>.",check:()=>~getJ().indexOf('console.log(specialProduct)')},{message:"Ниже создайте переменную <code class='keyvalue'>unavailableProduct</code> и запишите в неё последний <code class='keytext'>DOM-элемент</code> из списка товаров.",check:(o)=>o&&o.unavailableProduct===document.querySelector('#view-after li:last-of-type')},{message:"Выведите переменную <code class='keyvalue'>unavailableProduct</code> в <code class='keytext'>консоль</code>.",check:()=>~getJ().indexOf('console.log(unavailableProduct)')}],blocked:"4",editorOff:"10"},
'lesson1168':{html:tb1,css:tc1,hidden:th1,js:`var specialProduct = document.querySelector('.product:nth-child(2)');\nconsole.log(specialProduct);\n\nvar unavailableProduct = document.querySelector('.product:last-child');\nconsole.log(unavailableProduct);\n`,theory:`<div><h1>Первый класс</h1><p>Мы нашли элементы, а что дальше? Теперь их нужно как-то визуально изменить. К счастью, мы обнаружили, что верстальщик заботливо подготовил стили для разных состояний товаров. В <code>style.css</code> можно найти разные CSS-правила:</p><ul><li>класс <code>product--available</code> нужен, скорее всего, для товара в наличии;</li><li>а <code>product--unavailable</code> добавляется, видимо, когда товара в наличии нет;</li><li>а за спецпредложения, наверное, отвечает класс <code>product--special</code>.</li></ul><p>Хотя, зачем гадать? Давайте добавим классы и посмотрим, что выходит.</p><p>Так как DOM-элементы — объекты, все они имеют набор свойств и методов. Среди свойств DOM-элементов — объект <code>classList</code>. Он содержит методы для управления классами DOM-элемента, в том числе и метод <code>add()</code>. С его помощью мы можем указать, какой класс хотим добавить элементу.</p><p>Синтаксис простой. Сначала мы указываем DOM-элемент, которому хотим добавить класс, затем обращаемся к свойству <code>classList</code> через точку и вызываем метод <code>add()</code>, передав ему строку с необходимым классом. Обратите внимание, что точку перед названием класса ставить не нужно. В итоге добавление класса выглядит так:</p><pre>// Когда ищем элемент по классу, используем точку\nvar product = document.querySelector('.product');\n\n// Но когда добавляем класс, точки нет!\nproduct.classList.add('product--sale');\n</pre><p>Результат работы <code>classList.add()</code> такой же, как при ручном добавлении класса в разметку:</p><pre><i>&lt;!-- Исходное состояние разметки --&gt;</i>\n&lt;li class="product"&gt;\n  …\n&lt;/li&gt;\n\n<i>&lt;!-- Состояние после вызова classList.add --&gt;</i>\n&lt;li class="product product--sale"&gt;\n  …\n&lt;/li&gt;\n</pre><p>Добавим найденным элементам класс товара, которого нет в наличии, и класс спецпредложения.</p></div>`,tasks:[{message:"Вместо вывода <code class='keyvalue'>specialProduct</code> в консоль добавьте этому <code class='keytext'>DOM-элементу</code> класс <code class='keyclass'>product--special</code>",check:(o)=>o&&o.specialProduct&&o.specialProduct.classList&&o.specialProduct.classList.contains('product--special')&&!~getJ().indexOf('console.log(specialProduct)')},{message:"Вместо вывода переменной <code class='keyvalue'>unavailableProduct</code> в консоль добавьте этому <code class='keytext'>DOM-элементу</code> класс <code class='keyclass'>product--unavailable</code>.",check:(o)=>o&&o.unavailableProduct&&o.unavailableProduct.classList&&o.unavailableProduct.classList.contains('product--unavailable')&&!~getJ().indexOf('console.log(unavailableProduct)')}],blocked:"4",editorOff:"1"},
'lesson1169':{html:tb1,css:tc1,hidden:th1,js:tj1,theory:`<div><h1>Найти всех до единого</h1><p>Получилось, мы угадали с классами! Но Кексу всегда мало. Теперь у него есть выгрузка с товарами из 1-Кекс и он просит обновлять все товары на странице. Придётся писать более сложную программу:</p><blockquote><p>Мяу! Есть интернет-магазин с готовой вёрсткой. Нужно показывать в интерфейсе актуальную информацию о товарах: спецпредложения и наличие на складе.</p><p>Данные приходят в виде массива объектов <code>catalogData</code>. Каждый объект соответствует одному товару и содержит свойства <code>isAvailable</code> (в наличии товар или нет) и <code>isSpecial</code> (является ли товар спецпредложением или нет).</p><p>Для каждого состояния товара есть соответствующий класс:</p><ul><li><code>product--available</code> для товара в наличии;</li><li><code>product--unavailable</code> соответствует товару, которого в наличии нет;</li><li><code>product--special</code> для спецпредложения.</li></ul><p>Жду результата! Не задерживайся, часики тикают! </p></blockquote><p>Каждый элемент массива с данными соответствует какому-то товару на странице. Мы уже умеем искать DOM-элементы и могли бы находить товары по одному с помощью <code>querySelector</code>. Например, используя цикл:</p><pre>for (…) {\n  var product = querySelector('.product:nth-child(' + i + ')');\n}\n</pre><p>Метод <code>querySelector</code> устроен так, что всегда возвращает только первый найденный элемент. Поэтому на каждой итерации приходилось бы запускать поиск очередного элемента по DOM-дереву. Такой поиск — довольно дорогая операция.</p><p>Намного оптимальней получить список всех элементов <em>до цикла</em>, а <em>внутри цикла</em> этот список перебирать. В этом нам поможет метод <code>querySelectorAll</code>, который возвращает не первый найденный элемент, а список (коллекцию) всех элементов, подходящих по селектору.</p><p>Создадим функцию <code>updateCards</code>, в которой и будем вести работу над задачей. Найдём все товары на странице и убедимся, что поиск работает верно.</p></div>`,tasks:[{message:"После массива <code class='keyvalue'>catalogData</code> объявите функцию <code>updateCards</code> с параметром <code class='keytext'>products</code>.",check:()=>{var j=getJ();return ~j.search(/(var|let)updateCards=function\(products\)\{\S*\}/)||~j.search(/functionupdateCards\(products\)\{\S*\}/)}},{message:"Ниже вызовите функцию <code>updateCards</code> с аргументом <code class='keytext'>catalogData</code>.",check:()=>{var j=getJ();return ~j.search(/(var|let)updateCards=function\(products\)\{\S*\}\S*updateCards\(catalogData\)/)||~j.search(/functionupdateCards\(products\)\{\S*\}\S*updateCards\(catalogData\)/)}},{message: `В теле <code class='keytext'>функции</code> создайте переменную <code class='keyvalue'>elements</code> и запишите в неё список <code class='keytext'>DOM-элементов</code>, найденных по селектору <code class='keyclass'>.product</code> с помощью <code>querySelectorAll</code>.`,check:()=>{var j=getJ();return ~j.search(/(var|let)updateCards=function\(products\)\{\S*(var|let)elements=document\.querySelectorAll\(('|"|`)\.product\3\)\S*\}/)||~j.search(/functionupdateCards\(products\)\{\S*(var|let)elements=document\.querySelectorAll\(('|"|`)\.product\2\)\S*\}/)}},{message:"Выведите переменную <code class='keyvalue'>elements</code> в <code class='keytext'>консоль</code>",check:(o)=>~getJ().search(/\(products\)\{\S*console\.log\(elements\)\S*\}/)}],blocked:"4",editorOff:"8"},
'lesson1170':{html:tb1,css:tc1,hidden:th1,js:tj1+`\nvar updateCards = function (products) {\n    var elements = document.querySelectorAll('.product');\n    console.log(elements);\n};\n\nupdateCards(catalogData);\n`,theory:`<div><h1>Под прикрытием</h1><p>Мы нашли все товары на странице. Теперь нужно обращаться по очереди к каждому найденному DOM-элементу из коллекции и добавлять ему подходящие классы. Как это сделать?</p><p>Обратите внимание, что DOM-коллекция, полученная через <code>querySelectorAll</code> похожа на массив. Это действительно так, она <b>похожа</b>, но им не является. Поэтому ещё одно название таких коллекций — псевдомассив. Подробно о различиях коллекций и массивов мы поговорим в других курсах, а пока будем перебирать нашу DOM-коллекцию. Это можно сделать с помощью знакомого вам цикла <code>for</code>.</p><p>Пройдёмся по найденным товарам и временно добавим каждому DOM-элементу класс доступности <code>product--available</code>. Так мы убедимся, что цикл действительно работает.</p></div>`,tasks: [{message:`<code class='keytext'>Удалите вывод <code class='keyvalue'>elements</code> в консоль</code> и вместо него напишите цикл <code class="keyword">for</code>, который перебирает список <code class='keyvalue'>elements</code>, увеличивая значение переменной <code class='keyvalue'>i</code> от <code class='keytext'>0</code> до <code class='keytext'>длины списка</code>.`,check:(o)=>{var f=getF(o.updateCards);return !~f.indexOf('console.log(elements))')&&~f.search(/for\((var|let)i=0;i<elements\.length;i(\+\+|\+=1|=i\+1)\)\{\S*\}/)}},{message:"<code class='keytext'>Внутри цикла</code> создайте переменную <code class='keyvalue'>element</code> и запишите в неё текущий <code class='keytext'>DOM-элемент</code> списка <code class='keyvalue'>elements[<code class='keytext'>i</code>]</code>.",check:(o)=>~getF(o.updateCards).search(/for\((var|let)i=0;i<elements\.length;i(\+\+|\+=1|=i\+1)\)\{\S*(var|let)element=elements\[i\]\S*\}/)},{message:"Выведите <code class='keyvalue'>element</code> в <code class='keyword'>консоль</code>.",check:(o)=>~getF(o.updateCards).search(/for\((var|let)i=0;i<elements\.length;i(\+\+|\+=1|=i\+1)\)\{\S*(var|let)element=elements\[i\]\S*console\.log\(element\)\S*\}/)},{message:"Добавьте <code class='keyvalue'>element</code> класс <code class='keyclass'>product--available</code>.",check:(o)=>~getF(o.updateCards).search(/for\((var|let)i=0;i<elements\.length;i(\+\+|\+=1|=i\+1)\)\{\S*(var|let)element=elements\[i\]\S*element\.classList\.add\(('|"|`)product--available\4\)\S*\}/)}],blocked:"4",editorOff:"8"},
'lesson1171':{html:tb1,css:tc1,hidden:th1,js:tj1+`var updateCards = function (products) {\n    var elements = document.querySelectorAll('.product');\n    for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n        console.log(element);\n        element.classList.add('product--available');\n    }\n};\n\nupdateCards(catalogData);\n`,theory:`<div><h1>Временно недоступен</h1><p>Цикл работает и корректно перебирает коллекцию DOM-элементов. Займёмся реализацией программы.</p><p>Будем считать, что массив с данными о товарах и псевдомассив с DOM-элементами всегда имеют одинаковую длину, это позволит перебирать две структуры в одном цикле. Заведём переменную <code>product</code>, которая будет соответствовать текущему товару. Тогда текущий DOM-элемент (мы уже сохраняем его в переменную <code>element</code>) и текущий товар будут совпадать друг с другом.</p><p>Чтобы отобразить статус наличия товара, надо добавлять DOM-элементу разные классы. Сделаем это в несколько шагов:</p><ul><li>Создадим переменную для хранения класса, связанного с наличием. По умолчанию считаем, что товар в наличии, поэтому исходное значение у переменной будет <code>product--available</code>.</li><li>Добавим проверку свойства <code>isAvailable</code> у товара. Если оно равно <code>false</code> (товар не в наличии), изменим значение переменной на <code>product--unavailable</code>.</li><li>С помощью <code>classList.add()</code> добавим DOM-элементу класс, хранящийся в переменной.</li></ul><p>Из курса «Условия» вы знаете, что булевы значения сами могут выступать в качестве условий. Поэтому наша проверка могла бы выглядеть примерно так:</p><pre>var value = true;\n\nif (value) {\n  // Код выполнится\n}\n</pre><p>Только в нашем случае проверка должна сработать, если значение свойства <code>isAvailable</code> равно <code>false</code>. Поэтому нужна проверка с отрицанием:</p><pre>var value = false;\n\nif (!value) {\n  // Код выполнится\n}\n</pre></div>`,tasks:[{message:`После вывода в <code class='keytext'>консоль</code> <code class='keyvalue'>element</code> создайте переменную <code class='keyvalue'>product</code>, которая равна текущему элементу массива <code class='keyvalue'>products</code>, а затем выведите её в <code class='keytext'>консоль</code>.`,check:(o)=>~getF(o.updateCards).search(/console\.log\(element\)\S*(var|let)product=products\[i\]\S*console\.log\(product\)/)},{message:"После вывода <code class='keyvalue'>product</code> создайте переменную <code class='keyvalue'>availabilityClass</code> со значением <code class='keytext'>'product--available'</code>.",check:(o)=>~getF(o.updateCards).search(/console\.log\(product\)\S*(var|let)availabilityClass=('|"|`)product--available\2/)},{message:"После этой переменной добавьте <code class='keytext'>проверку</code>, что товара <code class='keytext'>нет</code> в наличии.",check:(o)=>~getF(o.updateCards).search(/(var|let)availabilityClass=('|"|`)product--available\2\S*if\((!product\.isAvailable|product\.isAvailable={2,3}false|product\.isAvailable!={1,2}true)\)\{\S*\}/)},{message:"Если условие выполняется, переопределите значение <code class='keyvalue'>availabilityClass</code> на <code class='keytext'>'product--unavailable'</code>.",check:(o)=>~getF(o.updateCards).search(/if\((!product\.isAvailable|product\.isAvailable={2,3}false|product\.isAvailable!={1,2}true)\)\{\S*availabilityClass=('|"|`)product--unavailable\2\S*\}/)},{message:`В вызове метода <code>classList.add()</code> у текущего <code class='keytext'>DOM-элемента</code> замените строку <code class='keytext'>'product--available'</code> на переменную <code class='keyvalue'>availabilityClass</code>.`,check:(o)=>~getF(o.updateCards).indexOf('element.classList.add(availabilityClass)')}],blocked:"4",editorOff:"8"},
'lesson1172':{html:tb1,css:tc1,hidden:th1,js:tj1+`\nvar updateCards = function (products) {\n    var elements = document.querySelectorAll('.product');\n    for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n        console.log(element);\n\n        var product = products[i];\n        console.log(product);\n\n        var availabilityClass = 'product--available';\n        if (!product.isAvailable) {\n            availabilityClass = 'product--unavailable';\n        }\n\n        element.classList.add(availabilityClass);\n\n    }};\n\nupdateCards(catalogData);\n`,theory:`<div><h1>Специальное предложение</h1><p>Осталось найти товар дня и добавить ему соответствующий класс.</p><p>Алгоритм простой: проверяем значение свойства <code>isSpecial</code> текущего товара, если оно равно <code>true</code>, добавляем DOM-элементу класс <code>product--special</code>.</p><p>И не забудем убрать из кода все выводы в консоль — в рабочей программе их быть не должно.</p><p>Задание Кекса выполнено!</p></div>`,tasks:[{message:"В конце тела <code class='keytext'>цикла</code> добавьте ещё одну проверку, что на товар распространяется спецпредложение.",check:()=>~getJ().search(/element\.classList\.add\(availabilityClass\)\S*if\((product\.isSpecial|product\.isSpecial={2,3}true|product\.isSpecial!={1,2}false)\)\{\S*\}\S*\}\S*\}/)},{message:"Если <code class='keytext'>условие</code> срабатывает, добавляйте текущему <code class='keytext'>DOM-элементу</code> класс <code class='keyclass'>product--special</code>.",check:()=>~getJ().search(/element\.classList\.add\(availabilityClass\)\S*if\((product\.isSpecial|product\.isSpecial={2,3}true|product\.isSpecial!={1,2}false)\)\{\S*element\.classList\.add\(('|"|`)product--special\2\)\S*\}\S*\}\S*\}/)},{message:"Удалите из кода все выводы в <code class='keytext'>консоль</code>.",check:()=>!~getJ().indexOf('console.log')}],blocked:"4",editorOff:"1"},
'lesson1173':{html:`<html>\n<head>\n  <title>Erase me!</title>\n  <link ref="stylesheet" href="style.css" />\n</head>\n<body>\n  <h2>Не надо меня трогать!</h2>\n  <ul>\n    <li>Меня не надо убирать.</li>\n    <li class="erase-me">Убери меня!</li>\n    <li>Я хороший, меня не надо...</li>\n  </ul>\n</body>\n</html>`,css:`body {\n  background: rgba(230, 230, 250, .7);\n  font-family: 'Pacifico';\n}\n\nh2 {\n  text-align: center;\n  color: bisque;\n  text-shadow: 0 0 2px black;\n  margin-bottom: 45px;\n}\n\nul {\n  list-style-image: url("images/arrow.png");\n  font-size:18px;\n  color:#888;\n  margin-left: 30px;\n}\n\nli {\n  line-height:30px;\n}\n\nli.erase-me {\n  color: darkred;\n}`,hidden:``,js:`// Сделайте всё здесь!\n`,theory:`<section><h1>Конспект «JS в браузере». 1 часть</h1><p>Поиск элементов на странице:</p><pre>// Поиск элемента по тегу\nvar list = document.querySelector('ul');\n\n// Поиск последнего элемента из списка\nvar lastProduct = document.querySelector('li:last-child');\n\n// Поиск элемента по классу\nvar price = document.querySelector('.price');\n\n// Поиск третьего элемента из списка товаров\nvar thirdProduct = document.querySelector('.product:nth-child(3)');\n\n// Поиск <b>всех</b> элементов, подходящих по селектору\nvar listItems = document.querySelectorAll('.product');\n</pre><p><code>querySelectorAll</code> возвращает список (коллекцию) элементов. Этот список похож на массив, но им не является. Он называется <i>псевдомассив</i> и его можно перебирать с помощью цикла <code>for</code>.</p><p>Добавление класса элементу страницы:</p><pre>// Когда ищем элемент по классу, используем точку\nvar product = document.querySelector('.product');\n\n// Но когда добавляем класс, точки нет!\nproduct.classList.add('product--sale');\n</pre><p>Результат работы <code>classList.add()</code> такой же, как при ручном добавлении класса в разметку:</p><pre><i>&lt;!-- Исходное состояние разметки --&gt;</i>\n&lt;li class="product"&gt;\n  …\n&lt;/li&gt;\n\n<i>&lt;!-- Состояние после вызова classList.add --&gt;</i>\n&lt;li class="product product--sale"&gt;\n  …\n&lt;/li&gt;\n</pre><br></section>`,tasks:[{message:"Прочли конспект? Тогда добавьте класс <code class='keyclass'>off</code> элементу, который просит себя <code class='keytext'>убрать</code>!",check:()=>{var e=document.querySelector('#view-after .erase-me');return e&&e.classList&&e.classList.contains('off')}}],blocked:"4",editorOff:"7"},
'lesson1174':{html:`<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>Каталог | Глейси</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <ul class="goods">\n    <li class="good">\n      <h2 class="good__description">Сливочно-кофейное с кусочками шоколада</h2>\n      <img src="images/courses/57/choco.jpg" width="220" height="220" alt="Сливочно-кофейное с кусочками шоколада">\n      <p class="good__price">110₽/кг</p>\n    </li>\n\n    <li class="good">\n      <h2 class="good__description">Сливочно-лимонное с карамельной присыпкой</h2>\n      <img src="images/courses/57/lemon.jpg" width="220" height="220" alt="Сливочно-лимонное с карамельной присыпкой">\n      <p class="good__price">220₽/кг</p>\n    </li>\n\n    <li class="good">\n      <h2 class="good__description">Сливочное с брусничным джемом</h2>\n      <img src="images/courses/57/cowberry.jpg" width="220" height="220" alt="Сливочное с брусничным джемом">\n      <p class="good__price">310₽/кг</p>\n    </li>\n\n    <li class="good">\n      <h2 class="good__description">Сливочное с кусочками печенья</h2>\n      <img src="images/courses/57/cookie.jpg" width="220" height="220" alt="Сливочное с кусочками печенья">\n      <p class="good__price">400₽/кг</p>\n    </li>\n\n    <li class="good">\n      <h2 class="good__description">Сливочное крем-брюле</h2>\n      <img src="images/courses/57/creme-brulee.jpg" width="220" height="220" alt="Сливочное крем-брюле">\n      <p class="good__price">500₽/кг</p>\n    </li>\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.good {\n  position: relative;\n\n  display: flex;\n  width: 220px;\n  flex-direction: column;\n  align-items: center;\n  min-width: 267px;\n  margin-bottom: 35px;\n  padding: 15px 10px;\n\n  color: #ffffff;\n}\n\n.good--available::before,\n.good--unavailable::before {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  z-index: 1;\n\n  display: inline-block;\n  padding: 5px 8px;\n\n  font-weight: bold;\n  font-size: 16px;\n  vertical-align: top;\n  text-align: center;\n  color: #ffffff;\n\n  background-image: linear-gradient(#e74a35 0%, #f26843 100%);\n  border: none;\n  border-radius: 5px;\n}\n\n.good--hit {\n  width: 100%;\n  order: -1;\n\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 5px;\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.4);\n}\n\n.good--hit::after {\n  content: "";\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  z-index: 1;\n\n  width: 61px;\n  height: 61px;\n  margin: auto;\n\n  background-image: url("images/courses/57/hit.svg");\n  background-repeat: no-repeat;\n}\n\n.good--unavailable {\n  filter: grayscale(1) opacity(0.8);\n}\n\n.good--unavailable::before {\n  content: "Нет в наличии";\n}\n\n.good--available::before {\n  content: "В наличии";\n}`,hidden:`body{font-size:16px;font-family:"Roboto","Arial",sans-serif;color:#000000;background-color:#849d8f;}.goods{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:580px;margin:20px auto;padding:0;list-style:none;}.good{display:-webkit-box;display:-ms-flexbox;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;}.good__price{position:absolute;top:180px;left:55%;width:270px;margin:0;margin-bottom:20px;font-weight:bold;font-size:40px;line-height:40px;text-shadow:0.5px 0.866px 3px rgba(49,50,53,1);-webkit-transform:translateX(-140px);transform:translateX(-140px);}.good__description{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1;max-width:220px;margin:8px 11px;font-weight:400;font-size:18px;line-height:22px;text-align:center;color:#ffffff;text-decoration:underline;-webkit-text-decoration-color:rgba(255,255,255,0.4);text-decoration-color:rgba(255, 255, 255, 0.4);}.good img{border-radius:100%;width:220px;height:220px;}.good__image{padding:10px;background-image:url("images/courses/57/lollipop.svg");background-repeat:no-repeat;background-size:450px;background-position:-45px -45px;}.good__button{display:none;}`,js:`var assortmentData = [\n    {\n        inStock: true,\n        isHit: false\n    },\n    {\n        inStock: false,\n        isHit: false\n    },\n    {\n        inStock: true,\n        isHit: true\n    },    {\n        inStock: true,\n        isHit: false\n    },\n    {\n        inStock: false,\n        isHit: false\n    }\n];\n`,theory:`<div><h1>Двенадцатая программа: «Испытание мороженым»</h1><p>Кекс оценил, как вы справились с задачей по магазину перфораторов, и доверил вам ещё одно боевое задание.</p><blockquote><p>Мяу! На сайте магазина мороженого надо отображать актуальное состояние товаров: «в наличии», «нет в наличии», «хит».</p><p>Данные по продуктам хранятся в массиве с объектами <code>assortmentData</code>, каждый объект соответствует одному товару и содержит свойства:</p><ul><li><code>inStock</code>. Если значение <code>true</code> — мороженое в наличии, если <code>false</code> — товара в наличии нет.</li><li><code>isHit</code>. Если значение <code>true</code> — мороженое самое популярное среди покупателей.</li></ul><p>Каждому состоянию товара соответствует специальный класс:</p><ul><li>Товар в наличии — <code>good--available</code>.</li><li>Недоступный товар — <code>good--unavailable</code>.</li><li>Хит продаж — <code>good--hit</code>.</li></ul><p>Оформи код в виде функции <code>updateCards</code>, которая принимает на вход массив с данными. Вызови её, передав <code>assortmentData</code>.</p></blockquote></div>`,tasks:[{message:`<h3 class='test-header'>Техническое задание</h3><div class='test-container'><code class='keyword'>Мяу!</code> На сайте магазина мороженого надо отображать актуальное состояние товаров: <code class='keytext'>«в наличии»</code>, <code class='keytext'>«нет в наличии»</code>, <code class='keytext'>«хит»</code>.<br><br>Данные по продуктам хранятся в массиве с объектами <code class='keyvalue'>assortmentData</code>, каждый объект соответствует одному товару и содержит свойства:<br><ul><li><code class='keyvalue'>inStock</code>. Если значение <code class="keyword">true</code> — мороженое в наличии, если <code class="keyword">false</code> — товара в наличии нет.</li><li><code class='keyvalue'>isHit</code>. Если значение <code class="keyword">true</code> — мороженое самое популярное среди покупателей.</li></ul>Каждому состоянию товара соответствует специальный класс:<br><br>Товар в наличии — <code class='keyclass'>good--available</code>.<br>Недоступный товар — <code class='keyclass'>good--unavailable</code>.<br>Хит продаж — <code class='keyclass'>good--hit</code>.<br><br>Оформи код в виде функции <code>updateCards</code>, которая принимает на вход массив с данными. Вызови её, передав <code class='keyvalue'>assortmentData</code>.</div>`,check:(o)=>{if(!o.hE)fH1();var l=[[{"inStock": true,"isHit": false},{"inStock": false,"isHit": false},{"inStock": true,"isHit": true},{"inStock": true,"isHit": false},{"inStock": false,"isHit": false}],[{"inStock":true,"isHit":false},{"inStock":false,"isHit":true},{"inStock":true,"isHit":false},{"inStock":false,"isHit":false},{"inStock":false,"isHit":false}],[{"inStock":true,"isHit":true},{"inStock":true,"isHit":false},{"inStock":false,"isHit":false},{"inStock":true,"isHit":false},{"inStock":true,"isHit":false}],[{"inStock":true,"isHit":false},{"inStock":true,"isHit":false},{"inStock":false,"isHit":false},{"inStock":true,"isHit":true},{"inStock":false,"isHit":false}]];if(!o||!o.updateCards)return false;var f=o.updateCards;var g=document.querySelectorAll('#view-after .view-body .good');for(var i=0;i<l.length;i++){f(l[i]);for(var j=0;j<l[i].length;j++){if(l[i][j]["inStock"]){if(!g[j].classList.contains('good--available'))return false;}else{if(!g[j].classList.contains('good--unavailable'))return false;};if(l[i][j]["isHit"])if(!g[j].classList.contains('good--hit'))return false;}};for(var i=0;i<5;i++){g[i].classList.remove('good--hit');g[i].classList.remove('good--available');g[i].classList.remove('good--unavailable')};f(l[0]);return true}}],blocked:"4",editorOff:""},
'lesson1175':{html:tb2,css:tc2,hidden:th2,js:``,theory:`<div><h1>Осторожно, дети!</h1><p>Кекс остался доволен вашей работой и подкинул новую задачу: нужно добавить карточки товаров на страницу магазина селфи-палок.</p><p>Раньше мы получали данные о состояниях товара, в этот раз из выгрузки программы 1-Кекс будет приходить полная информация. Данные будут содержать название продукта, его цену, изображение, доступность для заказа и прочую информацию. Поэтому для решения задачи нам не нужен верстальщик, ведь все данные будут у нас. Мы сами добавим элементы в разметку с помощью скриптов.</p><p>Правда, программа 1-Кекс пока барахлит и не хочет отдавать выгрузку. Поэтому сначала, чтобы не терять время, мы создадим одну карточку с нуля. Верстальщик показал нам, как должны быть свёрстаны карточки товаров, поэтому сейчас в разметке они уже есть. Мы будем ориентироваться на эти карточки, создавая свою, а затем удалим и добавим все карточки самостоятельно.</p><p>Как обычно, будем решать задачу постепенно: создадим элемент, наполним его необходимым контентом и добавим подходящие классы.</p><p>Чтобы карточка оказалась в разметке, нужно найти родительский элемент, в который мы будем эту карточку добавлять. В нашем случае это список <code>products</code>. Именно в нём хранятся карточки товаров, и три из них уже есть в разметке. Мы можем найти их не только через <code>querySelectorAll</code>, но и с помощью свойства <code>children</code> списка <code>products</code>.</p><p>Обращение к свойству выглядит так: <code>DOM-элемент.children</code>. Это свойство возвращает коллекцию дочерних, то есть вложенных, DOM-элементов. В случае с нашим списком коллекция должна состоять из трёх элементов — по одному на каждый элемент списка <code>li</code>.</p><p>Перед добавлением новой карточки найдём список <code>products</code> и выведем в консоль список его дочерних элементов с помощью <code>children</code>. Убедимся, что длина коллекции равна количеству вложенных элементов, а уже затем начнём добавлять новую карточку.</p></div>`,tasks:[{message:"С помощью <code>querySelector</code> найдите элемент с классом <code class='keyclass'>products</code> и запишите его в переменную <code class='keyvalue'>cardList</code>.",check:(o)=>o&&o.cardList===document.querySelector('#view-after .products')},{message:"Выведите в <code class='keyword'>консоль</code> <code class='keytext'>дочерние элементы</code> <code class='keyvalue'>cardList</code>.",check:()=>~getJ().indexOf('console.log(cardList.children)')}],blocked:"4",editorOff:""},
'lesson1176':{html:tb2,css:tc2,hidden:th2,js:`var cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n`,tasks:[{message:`С помощью <code>createElement</code> создайте элемент списка <code class='keytext'>li</code> и запишите его в переменную <code class'keyvalue>listItem</code>.`,check:(o)=>o&&o.listItem&&o.listItem.tagName&&o.listItem.tagName.toLowerCase()==='li'},{message:`Добавьте элементу списка класс <code class='keyclass'>product</code>.`, check:(o)=>~getJ().search(/(var|let)listItem=document\.createElement\(('|"|`)li\2\)\S*listItem\.classList\.add\(('|"|`)product\3\)/)},{message:`Добавьте <code class='keyvalue'>listItem</code> в конец списка товаров с помощью <code>appendChild</code>.`,check:(o)=>~getJ().search(/(var|let)listItem=document\.createElement\(('|"|`)li\2\)\S*cardList\.appendChild\(listItem\)/)},{message:`Ниже снова выведите в <code class='keyword'>консоль</code> коллекцию дочерних элементов <code class='keyvalue'>cardList.children</code>.`,check:(o)=>~getJ().search(/console\.log\(cardList\.children\)\S*cardList\.appendChild\(listItem\)\S*console\.log\(cardList\.children\)/)}],theory:`<div><h1>Создаём карточку</h1><div><p>Приступим к добавлению карточки товара. Если бы мы добавляли новый элемент через разметку, то мы бы добавили ещё один <code>li</code> с классом <code>product</code> в список товаров. В JavaScript для выполнения этой же задачи нужно сделать несколько шагов. Пойдём по порядку.</p><p><b>Создание DOM-элемента</b></p><p>Для начала нужно создать новый элемент списка, <code>li</code>. Создавать элементы можно разными способами, мы будем использовать метод <code>createElement()</code> объекта <code>document</code>. Метод принимает на вход строку с именем тега и возвращает созданный DOM-элемент. Этот элемент можно записать в переменную для дальнейших манипуляций:</p><pre>var card = document.createElement('li');</pre><p>Обратите внимание, что <code>createElement</code> — метод именно объекта <code>document</code>. То есть с его помощью мы создаём какой-то элемент для этого документа, пока не указывая, где он будет находиться в DOM.</p><p><b>Добавление класса</b></p><p>С этим шагом вы уже знакомы. Работаем с <code>classList</code> созданного элемента:</p><pre>var card = document.createElement('li');\ncard.classList.add('card');\n</pre><p><b>Добавление в DOM-дерево</b></p><p>Вновь созданный элемент по умолчанию не находится в DOM-дереве и не отображается на странице. Мы просто храним его где-то в переменной. Чтобы новый элемент появился на странице, его нужно добавить в DOM. Для этого найдём в текущем DOM-дереве элемент (<i>родитель</i>) и вставим в него наш элемент.</p><p>Мы будем использовать метод <code>appendChild()</code> родителя. Этот метод принимает на вход элемент и вставляет его в <b>конец</b> родительского элемента. То есть, если в списке уже есть три элемента, как в нашем случае, добавленный с помощью <code>appendChild</code> элемент станет четвёртым в списке.</p><pre>var list = document.querySelector('.cards');\nvar card = document.createElement('li');\ncard.classList.add('card');\n\n// После вызова этого метода новый элемент отрисуется на странице\nlist.appendChild(card);\n</pre><p>Вот что произойдёт с разметкой после вызова <code>appendChild</code>:</p><pre><i>&lt;!-- Исходное состояние разметки --&gt;</i>\n&lt;ul class="cards"&gt;\n  &lt;li class="card"&gt;Существующий элемент&lt;/li&gt;\n&lt;/ul&gt;\n\n<i>&lt;!-- Состояние после вызова appendChild --&gt;</i>\n&lt;ul class="cards"&gt;\n  &lt;li class="card"&gt;Существующий элемент&lt;/li&gt;\n  &lt;li class="card"&gt;Добавленный элемент&lt;/li&gt;\n&lt;/ul&gt;\n</pre><p>Последовательность добавления элемента в DOM может быть другой: можно создать элемент с помощью <code>createElement</code> и сразу вставить его в родительский элемент, а уже затем добавлять классы. Но& это не лучший путь — каждое изменение в DOM вызывает перерисовку страницы, а это дорогая операция, она занимает много времени.</p><p>Теперь создадим карточку товара, добавим ей подходящий класс и вставим в конец списка товаров. Затем снова выведем в консоль <code>children</code> списка, чтобы убедиться, что наша карточка попала в коллекцию дочерних элементов. Это стандартное поведение коллекции — она меняется на лету вместе с изменением DOM.</p></div></div>`,blocked:"4",editorOff:"10"},
'lesson1177':{html:tb2,css:tc2,hidden:th2,js:`var cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n\nvar listItem = document.createElement('li');\nlistItem.classList.add('product');\ncardList.appendChild(listItem);\nconsole.log(cardList.children);\n`,theory:`<div><h1>Опиши себя</h1><p>Карточка уже в разметке, но пока она пустая. Начнём наполнять её контентом. В первую очередь добавим название товара и его цену.</p><p>Алгоритм почти такой же, как и при добавлении самой карточки: создание элемента, добавление класса, <em>вставка текстового содержимого</em> (название товара, его цена), добавление элемента в конец карточки. Все шаги нам знакомы, кроме добавления текста. Как это сделать?</p><p>У каждого DOM-элемента есть свойство <code>textContent</code>. Оно содержит текстовое содержимое элемента. В <code>textContent</code> не попадает разметка, только текст.</p><pre>// HTML\n&lt;p&gt;Я — &lt;em&gt;текстовый элемент&lt;/em&gt;.&lt;/p&gt;\n\n// JS\nvar p = document.querySelector('p');\nconsole.log(p.textContent);\n// Выведет 'Я — текстовый элемент.'\n</pre><p>Это свойство объекта, которое можно не только прочитать, но и записать или перезаписать. Поэтому, если мы хотим задать элементу текстовое содержимое, достаточно записать в свойство необходимое значение.</p><pre>p.textContent = 'Теперь у меня новое содержимое.';\nconsole.log(p.textContent);\n// Выведет 'Теперь у меня новое содержимое.'\n\n// В HTML содержание тега изменится\n&lt;p&gt;Теперь у меня новое содержимое.&lt;/p&gt;\n</pre><p>Добавим в карточку название товара и его цену. Убедимся, что все новые элементы отображаются на странице.</p></div>`,tasks:[{message:"В конце программы создайте заголовок карточки товара <code class='keytext'>h2</code> и запишите его в переменную <code class='keyvalue'>title</code>.",check:(o)=>o&&o.title&&o.title.tagName&&o.title.tagName.toLowerCase()==='h2'},{message:"Добавьте заголовку класс <code class='keyclass'>product__title</code>.",check:(o)=>o&&o.title&&o.title.classList&&o.title.classList.contains('product__title')},{message:"Задайте текст заголовка <code class='keytext'>'Профессиональная селфи-палка'</code> с помощью <code class='keyvalue'>textContent</code>.",check:(o)=>o&&o.title&&o.title.textContent==='Профессиональная селфи-палка'},{message:"Добавьте <code class='keytext'>DOM-элемент</code> <code class='keyvalue'>title</code> в конец <code class='keytext'>DOM-элемента</code> <code class='keyvalue'>listItem</code>.",check:(o)=>o&&o.listItem&&o.title&&o.title.parentNode===o.listItem},{message:`Аналогичным образом после заголовка создайте и запишите в переменную <code class='keyvalue'>price</code> <code class='keytext'>DOM-элемент</code> <code class='keytext'>p</code> с классом <code class='keyclass'>product__price</code> и текстом <code class='keytext'>'1000'</code>. Затем вставьте <code code='keyvalue'>price</code> в конец <code class='keyvalue'>listItem</code>.`,check:(o)=>o&&o.price&&o.listItem&&o.price.tagName&&o.price.tagName.toLowerCase()==='p'&&o.price.classList&&o.price.classList.contains('product__price')&&o.price.textContent==='1000'&&o.price.parentNode===o.listItem}],blocked:"4",editorOff:"2"},
'lesson1178':{html:tb2,css:tc2,hidden:th2,js:`var cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n\nvar listItem = document.createElement('li');\nlistItem.classList.add('product');\ncardList.appendChild(listItem);\nconsole.log(cardList.children);\n\nvar title = document.createElement('h2');\ntitle.classList.add('product__title');\ntitle.textContent = 'Профессиональная селфи-палка';\nlistItem.appendChild(title);\n\nvar price = document.createElement('p');\nprice.classList.add('product__price');\nprice.textContent = '1000';\nlistItem.appendChild(price);\n`,theory:`<div><h1>Не повторяйся</h1><p>Обратите внимание, по мере выполнения задачи, мы всё чаще повторяем одни и те же операции: создаём элементы с помощью <code>document.createElement()</code>, добавляем им классы через <code>элемент.classList.add()</code>, а в некоторых случаях и текстовое содержимое с помощью <code>элемент.textContent</code>. Пора вынести повторяющийся код в функцию, чтобы не писать каждый раз много похожих строчек кода.</p><p>Объявим функцию, которая будет принимать на вход три строки: имя тега (<code>tagName</code>), имя класса (<code>className</code>) и текстовое содержимое (<code>text</code>) элемента. Внутри неё будем создавать элемент с классом и текстом, а затем возвращать его наружу.</p><p>Не у всех элементов есть текстовое содержимое, поэтому дадим возможность вызывать функцию не с тремя, а с двумя параметрами. JavaScript сам по себе это позволяет. Но нам нужно предусмотреть проверку на присутствие третьего параметра. Будем добавлять в элемент текст с помощью <code>textContent</code> только если параметр <code>text</code> существует.</p><p>Как проверить наличие параметра? Если параметр не был передан в функцию, его значение внутри функции будет равно <code>undefined</code>, то есть не определено. Значение <code>undefined</code> приводится к логическому значению <code>false</code>, поэтому достаточно такой простейшей проверки:</p><pre>var createCard = function (required, optional) {\n  if (optional) {\n    // действия с optional\n  }\n}\n\n// Функция отработает, но действия с optional выполняться не будут\ncreateCard('Обязательный аргумент');\n\n// Функция отработает и действия с optional выполнятся\ncreateCard('Обязательный аргумент', 'Необязательный аргумент');\n</pre><p>А что будет если аргумент передан? Во-первых, он не будет равен <code>undefined</code>. Во-вторых, внутри оператора «круглые скобки» программа получит значение этого параметра и приведёт его к логическому типу. Как вы знаете из курса «Условия», строки могут сами выступать в роли условий. Пустая строка приводится в <code>false</code>, а непустая к <code>true</code>. То есть, элементу добавится текстовое содержимое только тогда, когда мы передадим последним аргументом непустую строку. То, что надо.</p></div>`,tasks:[{message:"В начале кода объявите функцию <code>makeElement</code> с параметрами <code class='keytext'>tagName</code>, <code class='keytext'>className</code>, <code class='keytext'>text</code>.",check:(o)=>~getF(o.makeElement).indexOf('function(tagName,className,text)')},{message:"В теле функции создайте <code class='keytext'>DOM-элемент</code> с именем тега <code class='keyvalue'>tagName</code> и запишите его в переменную <code class='keyvalue'>element</code>.",check:(o)=>~getF(o.makeElement).search(/\{\S*(var|let)element=document\.createElement\(tagName\)/)},{message:"Добавьте элементу класс <code class='keyclass'>className</code>.",check:(o)=>~getF(o.makeElement).search(/\{\S*(var|let)element=document\.createElement\(tagName\)\S*element\.classList\.add\(className\)/)},{message:`Добавьте проверку на наличие параметра <code class='keytext'>text</code>. Если проверка выполняется, добавляйте <code class='keyvalue'>element</code> текстовое содержимое <code class='keyvalue'>text</code>.`,check:(o)=>~getF(o.makeElement).search(/\{\S*(var|let)element=document\.createElement\(tagName\)\S*if\(text\)\{\S*element\.textContent=text\S*\}/)},{message:"Верните из функции <code class='keyvalue'>element</code>.",check:(o)=>~getF(o.makeElement).search(/\S*(var|let)element=document\.createElement\(tagName\)\S*returnelement/)}],blocked:"4",editorOff:"4"},
'lesson1179':{html:tb2,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n\nvar listItem = document.createElement('li');\nlistItem.classList.add('product');\ncardList.appendChild(listItem);\nconsole.log(cardList.children);\n\nvar title = document.createElement('h2');\ntitle.classList.add('product__title');\ntitle.textContent = 'Профессиональная селфи-палка';\nlistItem.appendChild(title);\n\nvar price = document.createElement('p');\nprice.classList.add('product__price');\nprice.textContent = '1000';\nlistItem.appendChild(price);\n`,theory:`<div><h1>Сокращай и властвуй</h1><p>Теперь, когда у нас есть специальная функция, мы можем заменить для каждого элемента строки с созданием, добавлением класса и текстового содержимого на одну строку с вызовом <code>makeElement</code>. Так мы сделаем код более читаемым и удобным.</p><p>Обратите внимание, что создавая карточку товара с помощью <code>makeElement</code>, мы передаём в функцию только тег <code>li</code> и класс <code>product</code>. Текстового содержимого у самой карточки нет, оно есть только у её дочерних элементов (названия продукта и цены). Вот и случай, для которого мы писали проверку в функции!</p></div>`,tasks:[{message:"Замените значение <code class='keyvalue'>listItem</code> на <code>makeElement</code>(<code class='keytext'>'li'</code>, <code class='keytext'>'product'</code>) и удалите строку с добавлением класса этому элементу.",check:(o)=>o&&o.listItem&&o.listItem.tagName&&o.listItem.tagName.toLowerCase()==='li'&&o.listItem.classList&&o.listItem.classList.contains('product')&&~getJ().search(/listItem=(?!document.createElement)makeElement\(('|"|`)li\1,('|"|`)product\2\)\S*(?!listItem\.classList\.add)/)},{message:`Аналогично переопределите значение переменной <code class='keyvalue'>title</code> на результат вызова функции <code>makeElement</code> с аргументами <code class="keytext">'h2'</code>, <code class='keyclass'>'product__title'</code>, <code class='keytext'>'Профессиональная селфи-палка'</code>. Ниже удалите добавление класса и текстового содержимого заголовку.`,check:(o)=>o&&o.title&&o.title.tagName&&o.title.tagName.toLowerCase()==='h2'&&o.title.classList&&o.title.classList.contains('product__title')&&o.title.textContent==='Профессиональная селфи-палка'&&~getJ().search(/title=(?!document\.createElement)makeElement\(('|"|`)h2\1,('|"|`)product__title\2,('|"|`)Профессиональнаяселфи-палка\3\)\S*(?!title\.classList\.add)/)},{message:`По аналогии замените значение переменной <code class='keyvalue'>price</code> и удалите строки кода, где элементу <code class='keyvalue'>price</code> добавляется класс и текстовое содержимое.`,check:(o)=>o&&o.price&&o.price.tagName&&o.price.tagName.toLowerCase()==='p'&&o.price.classList&&o.price.classList.contains('product__price')&&o.price.textContent==='1000'&&~getJ().search(/price=(?!document\.createElement)makeElement\(('|"|`)p\1,('|"|`)product__price\2,('|"|`){0,1}1000\3{0,1}\)\S*(?!price\.classList\.add)/)}],blocked:"4",editorOff:"4"},
'lesson1180':{html:tb2,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n\nvar listItem = makeElement('li', 'product');\ncardList.appendChild(listItem);\nconsole.log(cardList.children);\n\nvar title = makeElement('h2', 'product__title', 'Профессиональная селфи-палка');\nlistItem.appendChild(title);\n// Изображение добавляйте сюда\nvar price = makeElement('p', 'product__price', '1000');\nlistItem.appendChild(price);\n`,theory:`<div><h1>Добавляем иллюстрацию</h1><p>Нашей карточке не хватает изображения товара. Создадим его с помощью <code>makeElement</code>, передав функции имя тега <code>'img'</code> и класс <code>'product__image'</code>. Третий параметр мы не передаём, потому что у изображения нет текстового содержимого.</p><p>Чтобы картинка отобразилась на странице, нужно задать ей адрес файла с изображением, то есть значение атрибута <code>src</code>.Значением этого <em>атрибута</em> можно управлять с помощью одноимённого <em>свойства</em> DOM-элемента:</p><pre>var picture = document.createElement('img');\npicture.src = 'images/picture.jpg'\n</pre><p>Таким же образом добавим изображению альтернативный текст, то есть описание фотографии. Если фотография не загрузится, на странице отобразится этот текст, чтобы пользователь понимал, что за блок находится перед ним. Кроме этого такой текст распознаёт электронная читалка, поэтому добавляя такое описание, мы простым способом делаем элемент интерфейса доступным. Добавляем альтернативный текст через свойство <code>alt</code>. Как видите, названия <em>атрибутов тегов</em> и <em>свойств DOM-элементов</em> часто (но не всегда) совпадают.</p><pre>picture.alt = 'Непотопляемая селфи-палка';\n</pre><p>После создания изображения и «настройки» его свойств, добавим изображение в карточку. Обратите внимание, фотографию мы должны добавить перед ценой товара, потому что в разметке порядок тегов именно такой. Поэтому и код создания картинки нужно добавить перед кодом создания цены.</p></div>`,tasks:[{message:`До создания цены запишите результат вызова функции <code>makeElement</code> с аргументами <code class='keytext'>'img'</code> и <code class='keyclass'>'product__image'</code> в переменную <code class='keyvalue'>picture</code>.`,check:(o)=>o&&o.picture&&o.picture.tagName&&o.picture.tagName.toLowerCase()==='img'&&o.picture.classList&&o.picture.classList.contains('product__image')&&~getJ().search(/(var|let)picture\S*(var|let)price/)},{message:"Задайте созданному элементу адрес изображения <code class='keytext'>'images/courses/57/item-4.jpg'</code>",check:(o)=>o&&o.picture&&o.picture.getAttribute('src')&&~o.picture.getAttribute('src').indexOf('images/courses/57/item-4.jpg')},{message:"и альтернативный текст <code class='keytext'>'Профессиональная селфи-палка'</code>.",check:(o)=>o&&o.picture&&o.picture.getAttribute('alt')==='Профессиональная селфи-палка'},{message:"Добавьте <code class='keyvalue'>picture</code> в конец <code class='keyvalue'>listItem</code>.",check:(o)=>o&&o.listItem&&o.picture&&o.listItem.children[o.listItem.children.length-2]===o.picture}],blocked:"4",editorOff:"4"},
'lesson1181':{html:tb2,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n\nvar listItem = makeElement('li', 'product');\ncardList.appendChild(listItem);\nconsole.log(cardList.children);\n\nvar title = makeElement('h2', 'product__title', 'Профессиональная селфи-палка');\nlistItem.appendChild(title);\n\nvar picture = makeElement('img', 'product__image');\npicture.src = 'images/courses/57/item-4.jpg';\npicture.alt = 'Профессиональная селфи-палка';\nlistItem.appendChild(picture);\n\nvar price = makeElement('p', 'product__price', '1000');\nlistItem.appendChild(price);\n`,theory:`<div><h1>Ещё одна функция</h1><p>Одну карточку мы добавили, но теперь Кекс просит добавить разом много карточек, основываясь на полученных данных. Данных пока нет, система барахлит, но мы не будем сидеть без дела и подготовим всё для решения задачи.</p><p>Алгоритм добавления одной карточки не сильно отличается от добавления десяти или двадцати карточек. Мы точно так же создаём элементы, добавляем им классы, атрибуты и текстовое содержимое, только много раз. Конечно, без функции тут не обойтись.</p><p>Объявим функцию <code>createCard</code>, которая будет отвечать за создание карточки товара. Внутри функции будет создаваться элемент списка, а затем будут создаваться и «упаковываться» в него другие части карточки: заголовок, картинка товара и стоимость. Возвращать функция будет готовый DOM-элемент. Снаружи функции мы оставим поиск самого списка товаров и вставку в него DOM-элементов, возвращённых из функции.</p><p>Такое «разделение труда» сделает наш код более универсальным. Функция <code>createCard</code> «не знает» ничего о том, куда именно вставлять DOM-элемент товара, поэтому её можно повторно использовать где угодно без каких-либо правок. Например, можно вставлятьсозданные в функции карточки товаров в список спецпредложений или в совершенно другой список новинок.</p><p>Мы постепенно переходим от кустарного производства к конвейерному. Так и должно быть — готовая программа, которая стабильно и корректно работает с любым количеством элементов.</p></div>`,tasks:[{message:"После функции <code>makeElement</code> создайте функцию <code>createCard</code>.",check:(o)=>o&&o.createCard&&typeof o.createCard==='function'},{message:`Перенесите в тело функции <code>createCard</code> весь код, начиная от объявления переменной <code class='keyvalue'>listItem</code>, заканчивая добавлением <code class='keyvalue'>price</code> (включительно) в карточку товара.`,check:(o)=>{if(o&&o.createCard){var f=getF(o.createCard);return ~f.search(/listItem=makeElement\(\S*title=makeElement\(\S*listItem\.appendChild\(title\)/)&&~f.search(/price=makeElement\(\S*listItem\.appendChild\(price\)/)&&~f.search(/picture=makeElement\(\S*listItem\.appendChild\(picture\)/)}}},{message:"Из тела функции <code>createCard</code> удалите <code class='keyvalue'>cardList.appendChild(<code class='keytext'>listItem</code>)</code> и <code class='keyvalue'>console.log(<code class='keytext'>cardList.children</code>)</code>.",check:(o)=>Academy.tasks[1].done&&o&&o.createCard&&!~getF(o.createCard).search(/(cardList\.appendChild\(listItem\)|console\.log\(cardList\.children\))/)},{message:"Верните из функции <code class='keyvalue'>listItem</code>.",check:(o)=>~getF(o.createCard).indexOf('returnlistItem')}],blocked:"4",editorOff:"4"},
'lesson1182':{html:tb2,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar createCard = function () {\n    var listItem = makeElement('li', 'product');\n\n    var title = makeElement('h2', 'product__title', 'Профессиональная селфи-палка');\n    listItem.appendChild(title);\n\n    var picture = makeElement('img', 'product__image');\n    picture.src = 'images/courses/57/item-4.jpg';\n    picture.alt = 'Профессиональная селфи-палка';\n    listItem.appendChild(picture);\n\n    var price = makeElement('p', 'product__price', '1000');\n    listItem.appendChild(price);\n\n    return listItem;\n};\n\nvar cardList = document.querySelector('.products');\nconsole.log(cardList.children);\n`,theory:`<div><h1>Проверь себя</h1><p>Разметка первых трёх товаров была нужна только в качестве подсказки. Мы подглядывали в неё, когда собирали свою карточку с помощью <code>JavaScript</code>.</p><p>Сейчас, когда функция для создания карточки товара написана, пришло время избавиться от исходной разметки. В HTML-коде должен остаться пустой тег <code>ul</code>.</p><p>Смело удаляйте все элементы списка из разметки, потом вызовите функцию <code>createCard</code> и добавьте результат работы этой функции в DOM. Так мы проверим, что функция работает корректно.</p></div>`,tasks:[{message:"Удалите все <code class='keyword'>li</code> из разметки.",check:()=>!~Academy.HTML.getValue().indexOf('<li')},{message:"Во вкладке <code class='keyword'>JS</code> удалите весь оставшийся вывод в <code class='keytext'>консоль</code>.",check:()=>!~getJ().indexOf('console.log')},{message:"В конце программы вызовите функцию <code>createCard</code> и запишите результат её работы в переменную <code class='keyvalue'>cardItem</code>.",check:(o)=>o&&o.cardItem&&o.createCard&&~getJ().search(/createCard=\S*cardItem=createCard\(\)/)},{message:"Вставьте <code class='keyvalue'>cardItem</code> в конец <code class='keytext'>DOМ-элемента</code> <code class='keyvalue'>cardList</code>.",check:(o)=>o&&o.cardItem&&o.createCard&&~getJ().search(/cardItem=createCard\(\)\S*cardList\.appendChild\(cardItem\)/)}],blocked:"2",editorOff:"2"},
'lesson1183':{html:tb3,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar createCard = function () {\n    var listItem = makeElement('li', 'product');\n\n    var title = makeElement('h2', 'product__title', 'Профессиональная селфи-палка');\n    listItem.appendChild(title);\n\n    var picture = makeElement('img', 'product__image');\n    picture.src = 'images/courses/57/item-4.jpg';\n    picture.alt = 'Профессиональная селфи-палка';\n    listItem.appendChild(picture);\n\n    var price = makeElement('p', 'product__price', '1000');\n    listItem.appendChild(price);\n\n    return listItem;\n};\n\nvar cardList = document.querySelector('.products');\n\n/*\nvar productInfo = {\n     isAvailable: true,\n    imgUrl: 'images/courses/57/item-1.jpg',\n    text: 'Селфи-палка для начинающих',\n    price: 200,\n    isSpecial: false,\n    specialPrice: null\n};\n*/\n\nvar cardItem = createCard();\ncardList.appendChild(cardItem);\n`,theory:`<div><h1>Живые данные</h1><p>Наконец-то Кекс прислал пример выгрузки с данными для одного товара. Негусто, но этого достаточно, чтобы доработать функцию <code>createCard</code>. Ведь сейчас все данные в ней статичные, то есть одинаковые, и сколько бы раз мы её ни вызвали, карточки будут похожими друг на друга как близнецы.</p><p>Информация о товаре представляет собой объект, каждое свойство которого описывает характеристику товара. Вначале поработаем с этими свойствами:</p><ul><li><code>imgUrl</code> — адрес изображения;</li><li><code>text</code> — название товара;</li><li><code>price</code> — цена.</li></ul><p>Чтобы функция возвращала разные данные на выходе, нужно, чтобы она получала разные данные на входе. Поэтому сначала добавим в функцию <code>createCard</code> параметр <code>product</code> и будем передавать в неё при вызове полученный объект с данными (он, кстати, уже вставлен в код, но закомментирован).</p><p>Затем внутри функции нужно заменить фиксированные значения на свойства входного параметра. Например:</p><pre>// Было:\nvar title = createElement('h2', 'product__title', 'Профессиональная селфи-палка');\npicture.alt = 'Профессиональная селфи-палка';\n\n// Стало:\nvar title = createElement('h2', 'product__title', product.text);\npicture.alt = product.text;\n</pre></div>`,tasks:[{message:"Раскомментируйте объект <code class='keyvalue'>productInfo</code>",check:(o)=>o&&o.productInfo},{message:"Добавьте в объявление функции <code>createCard</code> параметр <code class='keytext'>product</code>, а в её вызов аргумент <code class='keyvalue'>productInfo</code>.",check:(o)=>o&&o.createCard&&~getF(o.createCard).search(/function\(product\)\{\S*(?!createCard\(productInfo\))/)&&~getJ().indexOf('createCard(productInfo)')},{message:`В теле функции <code>createCard</code> замените строку <code class='keytext'>'Профессиональная селфи-палка'</code> на значение свойства <code class='keytext'>text</code> объекта <code class='keyvalue'>product</code> (для заголовка и альта).`,check:(o)=>o&&o.createCard&&~getF(o.createCard).search(/title=makeElement\(('|"|`)h2\1,('|"|`)product__title\2,product\.text\)\S*picture\.alt=product\.text/)},{message:"<code class='keytext'>Адрес</code> изображения замените на значение свойства <code class='keytext'>imgUrl</code> объекта <code class='keyvalue'>product</code>.",check:(o)=>o&&~getF(o.createCard).search(/picture\.src=product\.imgUrl/)},{message:"<code class='keytext'>Цену</code> замените на значение свойства <code class='keytext'>price</code> объекта <code class='keyvalue'>product</code>.",check:(o)=>o&&o.createCard&&~getF(o.createCard).search(/price=makeElement\(('|"|`)p\1,('|"|`)product__price\2,product\.price\)/)}],blocked:"4",editorOff:"4"},
'lesson1184':{html:tb3,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar createCard = function (product) {\n    var listItem = makeElement('li', 'product');\n\n    var title = makeElement('h2', 'product__title', product.text);\n    listItem.appendChild(title);\n\n    var picture = makeElement('img', 'product__image');\n    picture.src = product.imgUrl;\n    picture.alt = product.text;\n    listItem.appendChild(picture);\n\n    var price = makeElement('p', 'product__price', product.price);\n    listItem.appendChild(price);\n\n    return listItem;\n};\n\nvar cardList = document.querySelector('.products');\n\nvar productInfo = {\n    isAvailable: true,\n    imgUrl: 'images/courses/57/item-1.jpg',\n    text: 'Селфи-палка для начинающих',\n    price: 200,\n    isSpecial: false,\n    specialPrice: null\n};\n\nvar cardItem = createCard(productInfo);\ncardList.appendChild(cardItem);\n`,theory:`<div><h1>В наличии есть? А если найду?</h1><p>Три свойства из выгрузки мы уже обрабатываем. На очереди четвёртое: <code>isAvailable</code>. Это свойство хранит булево значение, которое описывает наличие товара. Если товар есть, то свойство содержит <code>true</code>, иначе <code>false</code>.</p><p>В зависимости от наличия или отсутствия товара карточка должна иметь один из двух дополнительных классов: <code>product--available</code> или <code>product--unavailable</code>.</p><p>Эту задачу вы уже решали, поэтому нужно повторить её по аналогии с первой программой. Вот краткий пересказ событий:</p><ol><li>заводим переменную для хранения имени класса и записываем в неё значение по умолчанию;</li><li>делаем проверку на наличие товара;</li><li>если проверка не проходит, значение в переменной меняем;</li><li>после проверки добавляем карточке товара класс из переменной.</li></ol><p>После доработки функции нужно её протестировать. Для этого измените в объекте с данными значение свойства <code>isAvailable</code> на <code>false</code>. Если всё сделано правильно, то внешний вид карточки изменится.</p></div>`,tasks:[{message:`В функции <code>createCard</code> перед <code class='keyword'>return</code> создайте переменную <code class='keyvalue'>availabilityClass</code> со значением <code class='keytext'>'product--available'</code>.`,check:(o)=>o&&~getF(o.createCard).search(/listItem\.appendChild\(price\)\S*(var|let)availabilityClass=('|"|`)product--available\2\S*return/)},{message:"После неё добавьте <code class=keytext>проверку на отсутствие</code> товара в наличии.",check:(o)=>o&&~getF(o.createCard).search(/availabilityClass=\S*if\((!product\.isAvailable|product\.isAvailable={2,3}false|product\.isAvailable!={1,2}true)\)\{\S*\}\S*return/)},{message:"Если проверка срабатывает, переопределите значение <code class='keyvalue'>availabilityClass</code> на <code class='keytext'>'product--unavailable'</code>.",check:(o)=>o&&~getF(o.createCard).search(/if\(\S*\)\{\S*availabilityClass=('|"|`)product--unavailable\1\S*\}/)},{message:"После проверки добавьте <code>listItem</code> класс из <code>availabilityClass</code>.",check:(o)=>o&&~getF(o.createCard).search(/if\(\S*product\.isAvailable\S*\)\S*\}\S*listItem\.classList\.add\(availabilityClass\)/)},{message:"В объекте <code class='keyvalue'>productInfo</code> измените значение <code class='keytext'>isAvailable</code> на <code class='keyword'>false</code>.",check:(o)=>o&&o.productInfo&&o.productInfo.isAvailable===false}],blocked:"4",editorOff:"4"},
'lesson1185':{html:tb3,css:tc2,hidden:th2,js:`var makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n        element.textContent = text;\n    }\n    return element;\n};\n\nvar createCard = function (product) {\n    var listItem = makeElement('li', 'product');\n    var title = makeElement('h2', 'product__title', product.text);\n    listItem.appendChild(title);\n\n    var picture = makeElement('img', 'product__image');\n    picture.src = product.imgUrl;\n    picture.alt = product.text;\n    listItem.appendChild(picture);\n\n    var price = makeElement('p', 'product__price', product.price);\n    listItem.appendChild(price);\n\n    var availabilityClass = 'product--available';\n    if (!product.isAvailable) {\n        availabilityClass = 'product--unavailable';\n    }\n    listItem.classList.add(availabilityClass);\n\n    return listItem;\n};\n\nvar cardList = document.querySelector('.products');\n\nvar productInfo = {\n    isAvailable: true,\n    imgUrl: 'images/courses/57/item-1.jpg',\n    text: 'Селфи-палка для начинающих',\n    price: 200,\n    isSpecial: false,\n    specialPrice: null\n};\n\nvar cardItem = createCard(productInfo);\ncardList.appendChild(cardItem);\n`,theory:`<div><h1>Спецпредложение</h1><p>Осталось обработать последние два свойства из выгрузки: <code>isSpecial</code> и <code>specialPrice</code>. Свойство <code>isSpecial</code> содержит <code>true</code>, если на товар действует спецпредложение. У товара-спецпредложения появляется новая цена, которая хранится в <code>specialPrice</code>.</p><p>Похожую задачу вы тоже решали: у карточек спецпредложений должен появляться дополнительный класс <code>product--special</code>. Но сейчас нужно ещё и специальную цену показывать. Она должна находиться в абзаце с классом <code>product__special-price</code>. Этот абзац должен быть последним дочерним элементом в карточке.</p><p>Порядок действий такой:</p><ol><li>проверяем, является ли товар спецпредложением;</li><li>если проверка проходит, добавляем карточке товара класс,</li><li>а также добавляем внутрь карточки ещё один абзац с соответствующим классом и текстом из свойства <code>specialPrice</code>.</li></ol><p>После доработки снова тестируем функцию. Измените в объекте с данными значения свойств <code>isSpecial</code> на <code>true</code> и <code>specialPrice</code> на <code>300</code> (значение <code>null</code> обозначает «ничего» или, ближе к нашим реалиям, «спеццены нет»). Если всё сделано правильно, то внешний вид карточки изменится.</p><p><em>Почему цена изменилась с 200 на 300? Потому что так искусный маркетолог Кекс понимает спецпредложение.</em></p></div>`,tasks:[{message:"В функции <code>createCard</code> перед <code class='keyword'>return</code> добавьте проверку, что на товар распространяется <code class='keytext'>спецпредложение</code>.",check:(o)=>o&&~getF(o.createCard).search(/if\(product\.isSpecia(l|l={2,3}true|l!={1,2}false)\)\{\S*\}\S*return/)},{message:"Если <code class='keytext'>условие</code> выполняется, добавьте карточке товара класс <code class='keyclass'>product--special</code>.",check:(o)=>o&&~getF(o.createCard).search(/if\(product\.isSpecial\S*\)\{\S*listItem\.classList\.add\(('|"|`)product--special\1\)\S*\}\S*return/)},{message:`Ниже в <code class='keytext'>условии</code> создайте переменную <code class='keyvalue'>specialPrice</code> и запишите в неё <code class='keytext'>абзац</code>, созданный с помощью <code>makeElement</code> с <code class='keytext'>ценой спецпредложения</code> и особым классом <code class='keyclass'>product__special-price</code>.`,check:(o)=>o&&~getF(o.createCard).search(/if\(product\.isSpecial\S*\)\{\S*(var|let)specialPrice=makeElement\(('|"|`)p\2,('|"|`)product__special-price\3,product\.specialPrice\)\S*\}\S*return/)},{message:"Ниже в <code class='keytext'>условии</code> добавьте элемент <code class='keyvalue'>specialPrice</code> в конец <code class='keyvalue'>listItem</code>.",check:(o)=>o&&~getF(o.createCard).search(/specialPrice=\S*listItem\.appendChild\(specialPrice\)\S*\}\S*return/)},{message:`В объекте <code class='keyvalue'>productInfo</code> замените значение <code class='keytext'>isSpecial</code> на <code class='keyword'>true</code> и значение <code class='keytext'>specialPrice</code> на <code class='keyword'>300</code>.`,check:(o)=>o&&o.productInfo&&o.productInfo.isSpecial===true&&o.productInfo.specialPrice==300}],blocked:"4",editorOff:"4"},
'lesson1186':{html:tb3,css:tc2,hidden:th2,js:`var cardsData = [\n    {\n        isAvailable: true,\n        imgUrl: 'images/courses/57/item-1.jpg',\n        text: 'Селфи-палка для начинающих',\n        price: 200,\n        isSpecial: false\n    },\n    {\n        isAvailable: false,\n        imgUrl: 'images/courses/57/item-2.jpg',\n        text: 'Профессиональная селфи-палка',\n        price: 1500,\n        isSpecial: false\n    },\n    {\n        isAvailable: true,\n        imgUrl: 'images/courses/57/item-3.jpg',\n        text: 'Непотопляемая селфи-палка',\n        price: 2500,\n        isSpecial: false\n    },\n    {\n        isAvailable: true,\n        imgUrl: 'images/courses/57/item-4.jpg',\n        text: 'Селфи-палка «Следуй за мной»',\n        price: 4900,\n        isSpecial: true,\n        specialPrice: 100\n    }\n];\n\nvar makeElement = function (tagName, className, text) {\n    var element = document.createElement(tagName);\n    element.classList.add(className);\n    if (text) {\n      element.textContent = text;\n    }\n    return element;\n};\n\nvar createCard = function (product) {\n    var listItem = makeElement('li', 'product');\n\n    var title = makeElement('h2', 'product__title', product.text);\n\n    listItem.appendChild(title);\n\n    var picture = makeElement('img', 'product__image');\n    picture.src = product.imgUrl;\n    picture.alt = product.text;\n    listItem.appendChild(picture);\n\n    var price = makeElement('p', 'product__price', product.price);\n    listItem.appendChild(price);\n\n    var availabilityClass = 'product--available';\n    if (!product.isAvailable) {\n        availabilityClass = 'product--unavailable';\n    }\n    listItem.classList.add(availabilityClass);\n\n    if (product.isSpecial) {\n        listItem.classList.add('product--special');\n        var specialPrice = makeElement('p', 'product__special-price', product.specialPrice);\n        listItem.appendChild(specialPrice);\n    }\n\n    return listItem;\n};\n\nvar cardList = document.querySelector('.products');\n\nvar productInfo = {\n    isAvailable: true,\n    imgUrl: 'images/courses/57/item-1.jpg',\n    text: 'Селфи-палка для начинающих',\n    price: 200,\n    isSpecial: true,\n    specialPrice: 300\n};\n\nvar cardItem = createCard(productInfo);\ncardList.appendChild(cardItem);\n`,theory:`<div><h1>Запускаем конвейер</h1><p>Пока мы писали код, пришла полная выгрузка из 1-Кекс. Данные хранятся в массиве объектов <code>cardsData</code>.</p><p>Теперь товаров много и нам нужно вызывать <code>createCard</code> для каждого из них. Кажется, пришло время использовать цикл <code>for</code>.</p><p>Напишем цикл, который будет перебирать массив данных. Внутри цикла будем передавать текущий элемент <code>массив[i]</code> в функцию <code>createCard</code> и вставлять полученный результат в конец списка товаров. Так мы сделаем программу универсальной для любого количества карточек.</p><p>Примерно так может выглядеть цикл:</p><pre>var item;\n\nfor (var i = 0; i &lt; array.length; i++) {\n    item = createCard(array[i]);\n    list.appendChild(item);\n}\n</pre><p>В этом коде мы сначала объявляем переменную, а затем внутри цикла переопределяем её значение на каждой итерации. При этом переменную мы используем только внутри цикла. До и после цикла она нам не нужна, поэтому объявлять её снаружи цикла бессмысленно. Учтём это и будем создавать переменную внутри цикла на каждой итерации. В неё будем записывать результат вызова <code>createCard(массив[i])</code>, а затем добавим содержимое этой переменной в конец каталога товаров. Цикл будет выглядеть так:</p><pre>for (var i = 0; i &lt; array.length; i++) {\n    var item = createCard(array[i]);\n    list.appendChild(item);\n}\n</pre></div>`,tasks:[{message:"Удалите весь код, расположенный ниже объявления переменной <code class='keyvalue'>cardList</code>.",check:()=>~getJ().search(/cardList=document\.querySelector\(('|"|`)\.products\1\)/)&&!~getJ().search(/productInfo/)},{message:`В конце программы создайте цикл <code class="keyword">for</code>, который перебирает элементы массива <code class='keyvalue'>cardsData</code>, увеличивая значение <code class='keyvalue'>i</code> с <code class='keytext'>0</code> до <code class='keytext'>длины</code> массива <code class='keyvalue'>cardsData</code>.`,check:()=>~getJ().search(/cardList=document\S*for\((var|let)i=0;i<cardsData\.length;i(\+\+|\+=1|=i\+1)\)\{\S*\}/)},{message:`В теле цикла вызывайте функцию <code>createCard</code>, передавая в неё текущий элемент массива <code class='keyvalue'>cardsData</code>, и записывайте результат вызова в переменную <code class='keyvalue'>cardItem</code> (эту переменную объявляйте внутри каждой итерации цикла).`,check:()=>~getJ().search(/for\(\S*;i<cardsData\.length;i\S*\)\{\S*(var|let)cardItem=createCard\(cardsData\[i\]\)\S*\}/)},{message:"Ниже в теле цикла добавляйте <code class='keyvalue'>cardItem</code> в список товаров <code class='keyvalue'>cardList</code>.",check:()=>~getJ().search(/for\(\S*\)\{\S*(var|let)cardItem=\S*cardList\.appendChild\(cardItem\)\S*\}/)}],blocked:"4",editorOff:"4"},
'lesson1187':{html:`<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="utf-8">\n  <title>Цветочек</title>\n</head>\n<body>\n  <div class="scene">\n    <div class="pot pot-bot">\n      <div class="shadow">\n      </div>\n      <div class="pot pot-shadow">\n      </div>\n      <div class="pot pot-top">\n      </div>\n      <div class="plant">\n        <div class="head">\n          <ul>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n            <li></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>`,css:`body {\n  margin: 0;\n  background: antiquewhite;\n}\nbody::before {\n  top: 50%;\n  z-index: -1;\n  width: calc(100% - 3vh);\n  height: 50%;\n  background: antiquewhite;\n}\n::before, ::after {\n  position: absolute;\n  content: "";\n}\n.scene {\n  margin: 280px auto 40px auto;\n  width: 140px;\n}\n.pot {\n  position: relative;\n  background: #ee7d15;\n}\n.pot > div {\n  position: absolute;\n}\n.pot-bot {\n  width: 100px;\n  height: 100px;\n}\n.pot-bot::before {\n  top: 0;\n  left: -15px;\n  border-top: 100px solid #ee7d15;\n  border-right: 0 solid transparent;\n  border-left: 15px solid transparent;\n}\n.pot-bot::after {\n  top: 0;\n  right: -15px;\n  border-top: 100px solid #ee7d15;\n  border-right: 15px solid transparent;\n  border-left: 0 solid transparent;\n}\n.pot-top {\n  top: -25px;\n  left: 50%;\n  margin-left: -70px;\n  width: 140px;\n  height: 25px;\n}\n.pot-top::before {\n  top: 0;\n  left: -5px;\n  border-top: 25px solid #ee7d15;\n  border-right: 0 solid transparent;\n  border-left: 5px solid transparent;\n}\n.pot-top::after {\n  top: 0;\n  right: -5px;\n  border-top: 25px solid #ee7d15;\n  border-right: 5px solid transparent;\n  border-left: 0 solid transparent;\n}\n.pot-shadow {\n  top: 0;\n  left: 50%;\n  z-index: 3;\n  margin-left: -62.5px;\n  width: 125px;\n  height: 10px;\n  background: rgba(220, 84, 0, 0.2);\n}\n.shadow {\n  bottom: -5px;\n  left: 50%;\n  z-index: -1;\n  margin-left: -60px;\n  width: 120px;\n  height: 10px;\n  border-radius: 120px / 10px;\n  background: rgba(220, 84, 0, 0.1);\n}\n.plant {\n  bottom: 0;\n  left: 50%;\n  z-index: -1;\n  margin-left: -8px;\n  width: 16px;\n  height: 280px;\n  border-radius: 16px 16px 0 0;\n  background: #00c975;\n}\n.plant > div {\n  position: absolute;\n}\n.plant::before {\n  right: 0;\n  bottom: 0;\n  width: 4px;\n  height: 275px;\n  border-radius: 0 30px 0 0;\n  background: rgba(60, 188, 131, 0.5);\n}\n.plant::after {\n  top: 110px;\n  left: 10px;\n  width: 0;\n  height: 0;\n  border-radius: 100px 0 100px 0;\n  background: #3cbc83;\n  -webkit-transform: rotate(-20deg);\n      -ms-transform: rotate(-20deg);\n          transform: rotate(-20deg);\n}\n.head {\n  top: -15px;\n  left: 50%;\n  margin-left: -25px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50px;\n  background: #fda342;\n}\n.face {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -10px;\n  margin-left: -10px;\n  width: 20px;\n  height: 20px;\n  border-radius: 25px;\n  background: #a3430c;\n}\nli {\n  position: absolute;\n  float: left;\n  width: 50px;\n  height: 30px;\n  border-radius: 100px 0 100px 0;\n  background: #facb3d;\n  list-style: none;\n}\nli:nth-child(1) {\n  top: 10px;\n  left: 60px;\n  -webkit-transform: rotate(30deg);\n      -ms-transform: rotate(30deg);\n          transform: rotate(30deg);\n}\nli:nth-child(2) {\n  top: 15px;\n  right: 60px;\n  -webkit-transform: rotate(20deg);\n      -ms-transform: rotate(20deg);\n          transform: rotate(20deg);\n}\nli:nth-child(3) {\n  top: 55px;\n  right: 45px;\n  -webkit-transform: rotate(-20deg);\n      -ms-transform: rotate(-20deg);\n          transform: rotate(-20deg);\n}\nli:nth-child(4) {\n  top: 55px;\n  left: 45px;\n  -webkit-transform: rotate(-110deg);\n      -ms-transform: rotate(-110deg);\n          transform: rotate(-110deg);\n}\nli:nth-child(5) {\n  top: 75px;\n  left: 00px;\n  -webkit-transform: rotate(-60deg);\n      -ms-transform: rotate(-60deg);\n          transform: rotate(-60deg);\n}\nli:nth-child(6) {\n  bottom: 55px;\n  left: 45px;\n  -webkit-transform: rotate(-20deg);\n      -ms-transform: rotate(-20deg);\n          transform: rotate(-20deg);\n}\nli:nth-child(7) {\n  right: 45px;\n  bottom: 55px;\n  -webkit-transform: rotate(-110deg);\n      -ms-transform: rotate(-110deg);\n          transform: rotate(-110deg);\n}\nli:nth-child(8) {\n  bottom: 75px;\n  left: 00px;\n   -webkit-transform: rotate(-60deg);\n      -ms-transform: rotate(-60deg);\n          transform: rotate(-60deg);\n}\n.plant, .plant::before {\n  -webkit-animation: grow 4s ease-out forwards;\n          animation: grow 4s ease-out forwards;\n}\n.head {\n  -webkit-transform: scale(0.4);\n      -ms-transform: scale(0.4);\n          transform: scale(0.4);\n  -webkit-animation: flower 3s 1s forwards ease-out;\n          animation: flower 3s 1s forwards ease-out;\n}\n.plant:after {\n  -webkit-animation: leaf 5s ease-out forwards;\n          animation: leaf 5s ease-out forwards;\n  -webkit-animation-delay: 4s;\n          animation-delay: 4s;\n}`,hidden:`li{list-style:none;}`,js:`// Код писать здесь\n\n\n// Вспомогательные функции\nfunction getRandomColor() {\n    return 'rgb(' + (~~(Math.random() * 256)) +\n        ',' + (~~(Math.random() * 256)) +\n        ',' + (~~(Math.random() * 256)) + ')';\n};\n\nfunction setColor(collection, color) {\n    [].forEach.call(collection, function(el) {\n        el.style.backgroundColor = color;\n    });\n};\n\nsetTimeout( function() {\n    let leafsOdd = document.querySelectorAll('.head li:nth-child(odd)');\n    let leafsEven = document.querySelectorAll('.head li:nth-child(even)');\n\n    setInterval(function() {\n        setColor(leafsOdd, getRandomColor());\n        setColor(leafsEven, getRandomColor());\n    }, 1000);\n}, 9000);\n`,theory:`<section><h1>Конспект «JS в браузере». 2 часть</h1><p>Свойство <code>DOM-элемент.children</code> возвращает коллекцию дочерних, то есть вложенных, DOM-элементов.</p><p>Создание элемента и добавление его в DOM-дерево:</p><pre>var list = document.querySelector('.cards');\n// Создаём новый элемент\nvar card = <b>document.createElement('li')</b>;\n\ncard.classList.add('card');\n\n// После вызова этого метода новый элемент отрисуется на странице\n<b>list.appendChild(card)</b>;\n</pre><p>Вот что произойдёт с разметкой после вызова <code>appendChild</code>:</p><pre><i>&lt;!-- Исходное состояние разметки --&gt;</i>\n&lt;ul class="cards"&gt;\n  &lt;li class="card"&gt;Существующий элемент&lt;/li&gt;\n&lt;/ul&gt;\n\n<i>&lt;!-- Состояние после вызова appendChild --&gt;</i>\n&lt;ul class="cards"&gt;\n  &lt;li class="card"&gt;Существующий элемент&lt;/li&gt;\n  &lt;li class="card"&gt;Добавленный элемент&lt;/li&gt;\n&lt;/ul&gt;\n</pre><p>Работа с текстовым содержимым элемента:</p><pre>// HTML\n&lt;p&gt;Я — &lt;em&gt;текстовый элемент&lt;/em&gt;.&lt;/p&gt;\n\n// JS\nvar p = document.querySelector('p');\nconsole.log(<b>p.textContent</b>);\n// Выведет 'Я — текстовый элемент.'\n\n<b>p.textContent</b> = 'Теперь у меня новое содержимое.';\nconsole.log(p.textContent);\n// Выведет 'Теперь у меня новое содержимое.'\n\n// В HTML содержание тега изменится\n&lt;p&gt;Теперь у меня новое содержимое.&lt;/p&gt;\n</pre><p>Работа с изображениями:</p><pre>// Создание изображения\nvar picture = document.createElement('img');\n\n// Добавляем адрес картинки\npicture.src = 'images/picture.jpg';\n\n// Добавляет альтернативный текст\npicture.alt = 'Непотопляемая селфи-палка';\n\n// Добавляет изображение в конец родительского элемента\nelement.appendChild(picture);\n</pre><br></section>`,tasks:[{message:"Добавьте новый листочек цветочку! Но только один :)",check:()=>document.querySelectorAll('#view-after .plant .head ul li').length===8}],blocked:"4",editorOff:"7"},
'lesson1188':{html:`<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>Каталог | Глейси</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <ul class="goods">\n\n  </ul>\n  <script src="script.js"></script>\n</body>\n</html>`,css:`.goods {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  width: 580px;\n  margin: 20px auto;\n  padding: 0;\n\n  list-style: none;\n}\n\n.good {\n  position: relative;\n\n  display: flex;\n  width: 220px;\n  flex-direction: column;\n  align-items: center;\n  min-width: 267px;\n  margin-bottom: 35px;\n  padding: 15px 10px;\n\n  color: #ffffff;\n}\n\n.good--available::before,\n.good--unavailable::before {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  z-index: 1;\n\n  display: inline-block;\n  padding: 5px 8px;\n\n  font-weight: bold;\n  font-size: 16px;\n  vertical-align: top;\n  text-align: center;\n  color: #ffffff;\n\n  background-image: linear-gradient(#e74a35 0%, #f26843 100%);\n  border: none;\n  border-radius: 5px;\n}\n\n.good--hit {\n  width: 100%;\n  order: -1;\n\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 5px;\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.4);\n}\n\n.good--hit::after {\n  content: "";\n  position: absolute;\n  top: 5px;\n  left: 5px;\n  z-index: 1;\n\n  width: 61px;\n  height: 61px;\n  margin: auto;\n\n  background-image: url("images/courses/57/hit.svg");\n  background-repeat: no-repeat;\n}\n\n.good--unavailable {\n  filter: grayscale(1) opacity(0.8);\n}\n\n.good--unavailable::before {\n  content: "Нет в наличии";\n}\n\n.good--available::before {\n  content: "В наличии";\n}\n\n.good__price {\n  position: absolute;\n  top: 180px;\n  left: 55%;\n\n  width: 270px;\n  margin: 0;\n  margin-bottom: 20px;\n\n  font-weight: bold;\n  font-size: 40px;\n  line-height: 40px;\n  text-shadow: 0.5px 0.866px 3px rgba(49, 50, 53, 1);\n\n  transform: translateX(-140px);\n}\n\n.good__description {\n  order: 1;\n  max-width: 220px;\n  margin: 8px 11px;\n\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 22px;\n  text-align: center;\n  color: #ffffff;\n  text-decoration: underline;\n  text-decoration-color: rgba(255, 255, 255, 0.4);\n}\n\n.good__image {\n  padding: 10px;\n  background-image: url("images/courses/57/lollipop.svg");\n  background-repeat: no-repeat;\n  background-size: 450px;\n  background-position: -45px -45px;\n}\n\n.good__special-offer {\n  position: relative;\n  order: 2;\n\n  max-width: 190px;\n  margin: 5px 11px;\n  padding-left: 5px;\n\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 22px;\n  text-align: center;\n\n  color: rgba(255, 239, 213, 1);\n  text-shadow: 0.5px 0.866px 3px rgba(49, 50, 53, 0.5);\n}\n\n.good__special-offer::before {\n  position: absolute;\n  content: "*";\n  top: 0;\n  left: 0;\n}`,hidden:`body{font-size:16px;font-family:"Roboto","Arial",sans-serif;color:#000000;background-color:#849d8f;}.goods{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:580px;margin:20px auto;padding:0;list-style:none;}.good{display:-webkit-box;display:-ms-flexbox;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;}.good__price{position:absolute;top:180px;left:55%;width:270px;margin:0;margin-bottom:20px;font-weight:bold;font-size:40px;line-height:40px;text-shadow:0.5px 0.866px 3px rgba(49,50,53,1);-webkit-transform:translateX(-140px);transform:translateX(-140px);}.good__description{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1;max-width:220px;margin:8px 11px;font-weight:400;font-size:18px;line-height:22px;text-align:center;color:#ffffff;text-decoration:underline;-webkit-text-decoration-color:rgba(255,255,255,0.4);text-decoration-color:rgba(255,255,255,0.4);}.good img{border-radius:100%;width:220px;height:220px;}.good__image{padding:10px;background-image:url("images/courses/57/lollipop.svg");background-repeat:no-repeat;background-size:450px;background-position:-45px -45px;}.good__button{display:none;}`,js:`var cardsData = [\n    {\n        "inStock": true,\n        imgUrl: 'images/courses/57/choco.jpg',\n        text: 'Сливочно-кофейное с кусочками шоколада',\n        price: 310,\n        "isHit": true,\n        specialOffer: 'Двойная порция сиропа бесплатно!'\n    },\n    {\n        "inStock": false,\n        imgUrl: 'images/courses/57/lemon.jpg',\n        text: 'Сливочно-лимонное с карамельной присыпкой',\n        price: 125,\n        "isHit": false\n    },\n    {\n        "inStock": true,\n        imgUrl: 'images/courses/57/cowberry.jpg',\n        text: 'Сливочное с брусничным джемом',\n        price: 170,\n        "isHit": false\n    },\n    {\n        "inStock": true,\n        imgUrl: 'images/courses/57/cookie.jpg',\n        text: 'Сливочное с кусочками печенья',\n        price: 250,\n        "isHit": false\n    },\n    {\n        "inStock": true,\n        imgUrl: 'images/courses/57/creme-brulee.jpg',\n        text: 'Сливочное крем-брюле',\n        price: 190,\n        "isHit": false\n    }\n];\n\n`,theory:`<div><h1>Тринадцатая программа: «Мороженое. Возвращение»</h1><p>Не успели вы доделать одну задачу, как Кекс пришёл с новой.</p><blockquote><p>Мяу! Помнишь магазин мороженого? Нужно создать карточки товаров, основываясь на данных, полученных с сервера.</p><p>Данные — массив объектов <code>cardsData</code>, один элемент соответствует одному товару. У каждого объекта есть следующие свойства:</p><ul><li><code>inStock</code> — доступность товара. Если значение <code>true</code> — товар доступен (для такого продукта верстальщик подготовил класс <code>good--available</code>), если <code>false</code> — продукта нет в наличии (товар с классом <code>good--unavailable</code>).</li><li><code>imgUrl</code> — ссылка на изображение товара.</li><li><code>text</code> — название продукта.</li><li><code>price</code> — цена.</li><li><code>isHit</code> — является ли товар хитом продаж. Если значение <code>true</code> — продукт «хитовый». Для такого товара подготовлен класс <code>good--hit</code>.</li><li><code>specialOffer</code> — специальное предложение, которое есть только у хита продаж. Должно находиться в абзаце с классом <code>good__special-offer</code> и быть самым последним дочерним элементов в карточке.</li></ul><p>Вот пример вёрстки одной карточки в каталоге:</p><pre>&lt;ul class="goods"&gt;\n  &lt;li class="good"&gt;\n    &lt;h2 class="good__description"&gt;Сливочно-кофейное с кусочками шоколада&lt;/h2&gt;\n    &lt;img class="good__image" src="images/courses/57/choco.jpg" alt="Сливочно-кофейное с кусочками шоколада"&gt;\n    &lt;p class="good__price"&gt;110₽/кг&lt;/p&gt;\n  &lt;/li&gt;\n  …\n&lt;/ul&gt;\n</pre><p>Обрати внимание, что текст в атрибуте <code>alt</code> у изображения должен быть таким же, как и название товара.</p><p>Создай функцию <code>renderCards</code>, которая будет принимать на вход массив данных, вызови её, передав <code>cardsData</code>, и отрисуй на странице карточки мороженого.</p></blockquote><div><p>Обратите внимание, в какой последовательности идут элементы в карточке товара. Помните, что при вставке через <code>appendChild</code>, элементы добавляются в конец родителя.</p><p>Для того чтобы собрать строку с ценой, используйте конкатенацию: <code>цена + '₽/кг'</code>.</p></div></div>`,tasks:[{message:`<h3 class='test-header'>Техническое задание</h3><div class='test-container'><p>Нужно создать карточки товаров, основываясь на данных, полученных с сервера. Каждая карточка - должна быть <code class='keyword'>li</code>-элементом с классом <code class='keyclass'>good</code>, находится карточки должны в <code class='keyword'>ul</code> с классом <code class='keyclass'>goods</code>, который уже создан. Данные — массив объектов <code class='keyvalue'>cardsData</code>, один элемент массива соответствует одному товару.</p><p>Создай функцию <code>renderCards</code>, которая будет принимать на вход массив данных, вызови её, передав <code class='keyvalue'>cardsData</code>, и отрисуй на странице карточки мороженого.</p><p>У каждого объекта есть следующие свойства:</p><ul><li><code class='keyvalue'>inStock</code> — доступность товара. Если значение <code class='keyword'>true</code> — товар доступен (для такого продукта верстальщик подготовил класс <code class='keyclass'>good--available</code>), если <code class='keyword'>false</code> — продукта нет в наличии (товар с классом <code class='keyclass'>good--unavailable</code>).</li><li><code class='keyvalue'>imgUrl</code> — ссылка на изображение товара. Изображение должно быть с классом <code class='keyclass'>good__image</code></li><li><code class='keyvalue'>text</code> — название продукта. Заголовок с классом <code class='keyclass'>good__description</code></li><li><code class='keyvalue'>price</code> — цена. Абзац с классом <code class='keyclass'>good__price</code>, не забудьте к цене добавить <code class='keytext'>'₽/кг'</code>!</li><li><code class='keyvalue'>isHit</code> — является ли товар хитом продаж. Если значение <code class='keyword'>true</code> — продукт «хитовый». Для такого товара подготовлен класс <code class='keyclass'>good--hit</code>.</li><li><code class='keyvalue'>specialOffer</code> — специальное предложение, которое есть только у хита продаж. Должно находиться в абзаце с классом <code class='keyclass'>good__special-offer</code> и быть самым последним дочерним элементов в карточке.</li></ul><p>Обрати внимание, что текст в атрибуте <code class='keyword'>alt</code> у изображения должен быть таким же, как и название товара. Не забудьте задать названию, изображению и цене каждой карточки соответствующие <code class='keyclass'>классы</code>!</p></div>`,check:(o)=>{if(!Academy.vars.hE)fH2();if(!o||!o.renderCards||!(typeof o.renderCards==='function'))return false;var l=[[{"inStock":true,imgUrl:'images/courses/57/choco.jpg',text:'Сливочно-кофейное с кусочками шоколада',price:310,"isHit":true,specialOffer:'Двойная порция сиропа бесплатно!'},{"inStock":false,imgUrl:'images/courses/57/lemon.jpg',text:'Сливочно-лимонное с карамельной присыпкой',price:125,"isHit":false},{"inStock":true,imgUrl:'images/courses/57/cowberry.jpg',text:'Сливочное с брусничным джемом',price:170,"isHit":false},{"inStock":true,imgUrl:'images/courses/57/cookie.jpg',text:'Сливочное с кусочками печенья',price:250,"isHit":false},{"inStock":true,imgUrl:'images/courses/57/creme-brulee.jpg',text:'Сливочное крем-брюле',price:190,"isHit":false}],[{"imgUrl":"images/courses/57/choco.jpg","text":"Сливочно-кофейное с кусочками шоколада","price":170,"inStock":true,"isHit":true,"specialOffer":"Его действительно можно есть"},{"imgUrl":"images/courses/57/cowberry.jpg","text":"Сливочное с брусничным джемом","price":240,"inStock":false,"isHit":false,"specialOffer":null}],[{"imgUrl":"images/courses/57/creme-brulee.jpg","text":"Сливочное крем-брюле","price":110,"inStock":true,"isHit":false,"specialOffer":null},{"imgUrl":"images/courses/57/choco.jpg","text":"Сливочно-кофейное с кусочками шоколада","price":210,"inStock":true,"isHit":false,"specialOffer":null},{"imgUrl":"images/courses/57/cookie.jpg","text":"Сливочное с кусочками печенья","price":250,"inStock":true,"isHit":true,"specialOffer":"Содержит игрушку"}],[{"imgUrl":"images/courses/57/choco.jpg","text":"Сливочно-кофейное с кусочками шоколада","price":110,"inStock":true,"isHit":true,"specialOffer":"Палочка продаётся отдельно"},{"imgUrl":"images/courses/57/cowberry.jpg","text":"Сливочное с брусничным джемом","price":210,"inStock":false,"isHit":false,"specialOffer":null},{"imgUrl":"images/courses/57/lemon.jpg","text":"Сливочно-лимонное с карамельной присыпкой","price":250,"inStock":false,"isHit":false,"specialOffer":null},{"imgUrl":"images/courses/57/creme-brulee.jpg","text":"Сливочное крем-брюле","price":150,"inStock":true,"isHit":false,"specialOffer":null}]];var u=document.querySelector('#view-after .goods');var f=o.renderCards;for(var i=0;i<l.length;i++){u.innerHTML='';f(l[i]);var g=u.children;for(var j=0;j<l[i].length;j++){if(!g[j].classList.contains('good'))return false;if(l[i][j]["inStock"]){if(!g[j]||!g[j].classList||!g[j].classList.contains('good--available'))return false;}else{if(!g[j]||!g[j].classList||!g[j].classList.contains('good--unavailable'))return false;};if(l[i][j]["isHit"]){if(!g[j]||!g[j].classList||!g[j].classList.contains('good--hit'))return false;var s=g[j].lastElementChild;if(!s||!(s.tagName.toLowerCase()=='p')||!s.classList.contains('good__special-offer')||!(s.textContent==l[i][j].specialOffer))return false;};var m=g[j].getElementsByTagName('img')[0];var t=g[j].getElementsByTagName('h2')[0];var p=g[j].getElementsByTagName('p')[0];if(!m||!(m.getAttribute('src')==l[i][j].imgUrl)||!(m.getAttribute('alt')==l[i][j].text)||!m.classList.contains('good__image'))return false;if(!t||!(t.textContent==l[i][j].text)||!t.classList.contains('good__description'))return false;if(!p||!(p.textContent==l[i][j].price+'₽/кг')||!p.classList.contains('good__price'))return false;}};u.innerHTML='';f(l[0]);return true;}}],blocked:"4",editorOff:"4"}
};
hL();